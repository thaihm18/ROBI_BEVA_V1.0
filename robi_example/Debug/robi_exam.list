
robi_exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001840  08008e18  08008e18  00018e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a658  0800a658  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a658  0800a658  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a658  0800a658  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a658  0800a658  0001a658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a65c  0800a65c  0001a65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800a660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  200000bc  0800a71c  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  0800a71c  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e62e  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003337  00000000  00000000  0002e712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00031a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00032b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f198  00000000  00000000  00033a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f398  00000000  00000000  00042bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004afac  00000000  00000000  00051f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009cf34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040bc  00000000  00000000  0009cf84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000bc 	.word	0x200000bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008e00 	.word	0x08008e00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c0 	.word	0x200000c0
 8000104:	08008e00 	.word	0x08008e00

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fbed 	bl	8001bf4 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 fb3d 	bl	8001aa4 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fbdf 	bl	8001bf4 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fbd5 	bl	8001bf4 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb65 	bl	8001b28 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb5b 	bl	8001b28 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_fadd>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	46c6      	mov	lr, r8
 8000484:	0243      	lsls	r3, r0, #9
 8000486:	0a5b      	lsrs	r3, r3, #9
 8000488:	024e      	lsls	r6, r1, #9
 800048a:	0045      	lsls	r5, r0, #1
 800048c:	004f      	lsls	r7, r1, #1
 800048e:	00da      	lsls	r2, r3, #3
 8000490:	0fc4      	lsrs	r4, r0, #31
 8000492:	469c      	mov	ip, r3
 8000494:	0a70      	lsrs	r0, r6, #9
 8000496:	4690      	mov	r8, r2
 8000498:	b500      	push	{lr}
 800049a:	0e2d      	lsrs	r5, r5, #24
 800049c:	0e3f      	lsrs	r7, r7, #24
 800049e:	0fc9      	lsrs	r1, r1, #31
 80004a0:	09b6      	lsrs	r6, r6, #6
 80004a2:	428c      	cmp	r4, r1
 80004a4:	d04b      	beq.n	800053e <__aeabi_fadd+0xbe>
 80004a6:	1bea      	subs	r2, r5, r7
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	dd36      	ble.n	800051a <__aeabi_fadd+0x9a>
 80004ac:	2f00      	cmp	r7, #0
 80004ae:	d061      	beq.n	8000574 <__aeabi_fadd+0xf4>
 80004b0:	2dff      	cmp	r5, #255	; 0xff
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fadd+0x36>
 80004b4:	e0ad      	b.n	8000612 <__aeabi_fadd+0x192>
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	04db      	lsls	r3, r3, #19
 80004ba:	431e      	orrs	r6, r3
 80004bc:	2a1b      	cmp	r2, #27
 80004be:	dc00      	bgt.n	80004c2 <__aeabi_fadd+0x42>
 80004c0:	e0d3      	b.n	800066a <__aeabi_fadd+0x1ea>
 80004c2:	2001      	movs	r0, #1
 80004c4:	4643      	mov	r3, r8
 80004c6:	1a18      	subs	r0, r3, r0
 80004c8:	0143      	lsls	r3, r0, #5
 80004ca:	d400      	bmi.n	80004ce <__aeabi_fadd+0x4e>
 80004cc:	e08c      	b.n	80005e8 <__aeabi_fadd+0x168>
 80004ce:	0180      	lsls	r0, r0, #6
 80004d0:	0987      	lsrs	r7, r0, #6
 80004d2:	0038      	movs	r0, r7
 80004d4:	f002 fafc 	bl	8002ad0 <__clzsi2>
 80004d8:	3805      	subs	r0, #5
 80004da:	4087      	lsls	r7, r0
 80004dc:	4285      	cmp	r5, r0
 80004de:	dc00      	bgt.n	80004e2 <__aeabi_fadd+0x62>
 80004e0:	e0b6      	b.n	8000650 <__aeabi_fadd+0x1d0>
 80004e2:	1a2d      	subs	r5, r5, r0
 80004e4:	48b3      	ldr	r0, [pc, #716]	; (80007b4 <__aeabi_fadd+0x334>)
 80004e6:	4038      	ands	r0, r7
 80004e8:	0743      	lsls	r3, r0, #29
 80004ea:	d004      	beq.n	80004f6 <__aeabi_fadd+0x76>
 80004ec:	230f      	movs	r3, #15
 80004ee:	4003      	ands	r3, r0
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d000      	beq.n	80004f6 <__aeabi_fadd+0x76>
 80004f4:	3004      	adds	r0, #4
 80004f6:	0143      	lsls	r3, r0, #5
 80004f8:	d400      	bmi.n	80004fc <__aeabi_fadd+0x7c>
 80004fa:	e078      	b.n	80005ee <__aeabi_fadd+0x16e>
 80004fc:	1c6a      	adds	r2, r5, #1
 80004fe:	2dfe      	cmp	r5, #254	; 0xfe
 8000500:	d065      	beq.n	80005ce <__aeabi_fadd+0x14e>
 8000502:	0180      	lsls	r0, r0, #6
 8000504:	0a43      	lsrs	r3, r0, #9
 8000506:	469c      	mov	ip, r3
 8000508:	b2d2      	uxtb	r2, r2
 800050a:	4663      	mov	r3, ip
 800050c:	05d0      	lsls	r0, r2, #23
 800050e:	4318      	orrs	r0, r3
 8000510:	07e4      	lsls	r4, r4, #31
 8000512:	4320      	orrs	r0, r4
 8000514:	bc80      	pop	{r7}
 8000516:	46b8      	mov	r8, r7
 8000518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051a:	2a00      	cmp	r2, #0
 800051c:	d035      	beq.n	800058a <__aeabi_fadd+0x10a>
 800051e:	1b7a      	subs	r2, r7, r5
 8000520:	2d00      	cmp	r5, #0
 8000522:	d000      	beq.n	8000526 <__aeabi_fadd+0xa6>
 8000524:	e0af      	b.n	8000686 <__aeabi_fadd+0x206>
 8000526:	4643      	mov	r3, r8
 8000528:	2b00      	cmp	r3, #0
 800052a:	d100      	bne.n	800052e <__aeabi_fadd+0xae>
 800052c:	e0a7      	b.n	800067e <__aeabi_fadd+0x1fe>
 800052e:	1e53      	subs	r3, r2, #1
 8000530:	2a01      	cmp	r2, #1
 8000532:	d100      	bne.n	8000536 <__aeabi_fadd+0xb6>
 8000534:	e12f      	b.n	8000796 <__aeabi_fadd+0x316>
 8000536:	2aff      	cmp	r2, #255	; 0xff
 8000538:	d069      	beq.n	800060e <__aeabi_fadd+0x18e>
 800053a:	001a      	movs	r2, r3
 800053c:	e0aa      	b.n	8000694 <__aeabi_fadd+0x214>
 800053e:	1be9      	subs	r1, r5, r7
 8000540:	2900      	cmp	r1, #0
 8000542:	dd70      	ble.n	8000626 <__aeabi_fadd+0x1a6>
 8000544:	2f00      	cmp	r7, #0
 8000546:	d037      	beq.n	80005b8 <__aeabi_fadd+0x138>
 8000548:	2dff      	cmp	r5, #255	; 0xff
 800054a:	d062      	beq.n	8000612 <__aeabi_fadd+0x192>
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	04db      	lsls	r3, r3, #19
 8000550:	431e      	orrs	r6, r3
 8000552:	291b      	cmp	r1, #27
 8000554:	dc00      	bgt.n	8000558 <__aeabi_fadd+0xd8>
 8000556:	e0b0      	b.n	80006ba <__aeabi_fadd+0x23a>
 8000558:	2001      	movs	r0, #1
 800055a:	4440      	add	r0, r8
 800055c:	0143      	lsls	r3, r0, #5
 800055e:	d543      	bpl.n	80005e8 <__aeabi_fadd+0x168>
 8000560:	3501      	adds	r5, #1
 8000562:	2dff      	cmp	r5, #255	; 0xff
 8000564:	d033      	beq.n	80005ce <__aeabi_fadd+0x14e>
 8000566:	2301      	movs	r3, #1
 8000568:	4a93      	ldr	r2, [pc, #588]	; (80007b8 <__aeabi_fadd+0x338>)
 800056a:	4003      	ands	r3, r0
 800056c:	0840      	lsrs	r0, r0, #1
 800056e:	4010      	ands	r0, r2
 8000570:	4318      	orrs	r0, r3
 8000572:	e7b9      	b.n	80004e8 <__aeabi_fadd+0x68>
 8000574:	2e00      	cmp	r6, #0
 8000576:	d100      	bne.n	800057a <__aeabi_fadd+0xfa>
 8000578:	e083      	b.n	8000682 <__aeabi_fadd+0x202>
 800057a:	1e51      	subs	r1, r2, #1
 800057c:	2a01      	cmp	r2, #1
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x102>
 8000580:	e0d8      	b.n	8000734 <__aeabi_fadd+0x2b4>
 8000582:	2aff      	cmp	r2, #255	; 0xff
 8000584:	d045      	beq.n	8000612 <__aeabi_fadd+0x192>
 8000586:	000a      	movs	r2, r1
 8000588:	e798      	b.n	80004bc <__aeabi_fadd+0x3c>
 800058a:	27fe      	movs	r7, #254	; 0xfe
 800058c:	1c6a      	adds	r2, r5, #1
 800058e:	4217      	tst	r7, r2
 8000590:	d000      	beq.n	8000594 <__aeabi_fadd+0x114>
 8000592:	e086      	b.n	80006a2 <__aeabi_fadd+0x222>
 8000594:	2d00      	cmp	r5, #0
 8000596:	d000      	beq.n	800059a <__aeabi_fadd+0x11a>
 8000598:	e0b7      	b.n	800070a <__aeabi_fadd+0x28a>
 800059a:	4643      	mov	r3, r8
 800059c:	2b00      	cmp	r3, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0x122>
 80005a0:	e0f3      	b.n	800078a <__aeabi_fadd+0x30a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	d0b0      	beq.n	800050a <__aeabi_fadd+0x8a>
 80005a8:	1b98      	subs	r0, r3, r6
 80005aa:	0143      	lsls	r3, r0, #5
 80005ac:	d400      	bmi.n	80005b0 <__aeabi_fadd+0x130>
 80005ae:	e0fa      	b.n	80007a6 <__aeabi_fadd+0x326>
 80005b0:	4643      	mov	r3, r8
 80005b2:	000c      	movs	r4, r1
 80005b4:	1af0      	subs	r0, r6, r3
 80005b6:	e797      	b.n	80004e8 <__aeabi_fadd+0x68>
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0x13e>
 80005bc:	e0c8      	b.n	8000750 <__aeabi_fadd+0x2d0>
 80005be:	1e4a      	subs	r2, r1, #1
 80005c0:	2901      	cmp	r1, #1
 80005c2:	d100      	bne.n	80005c6 <__aeabi_fadd+0x146>
 80005c4:	e0ae      	b.n	8000724 <__aeabi_fadd+0x2a4>
 80005c6:	29ff      	cmp	r1, #255	; 0xff
 80005c8:	d023      	beq.n	8000612 <__aeabi_fadd+0x192>
 80005ca:	0011      	movs	r1, r2
 80005cc:	e7c1      	b.n	8000552 <__aeabi_fadd+0xd2>
 80005ce:	2300      	movs	r3, #0
 80005d0:	22ff      	movs	r2, #255	; 0xff
 80005d2:	469c      	mov	ip, r3
 80005d4:	e799      	b.n	800050a <__aeabi_fadd+0x8a>
 80005d6:	21fe      	movs	r1, #254	; 0xfe
 80005d8:	1c6a      	adds	r2, r5, #1
 80005da:	4211      	tst	r1, r2
 80005dc:	d077      	beq.n	80006ce <__aeabi_fadd+0x24e>
 80005de:	2aff      	cmp	r2, #255	; 0xff
 80005e0:	d0f5      	beq.n	80005ce <__aeabi_fadd+0x14e>
 80005e2:	0015      	movs	r5, r2
 80005e4:	4446      	add	r6, r8
 80005e6:	0870      	lsrs	r0, r6, #1
 80005e8:	0743      	lsls	r3, r0, #29
 80005ea:	d000      	beq.n	80005ee <__aeabi_fadd+0x16e>
 80005ec:	e77e      	b.n	80004ec <__aeabi_fadd+0x6c>
 80005ee:	08c3      	lsrs	r3, r0, #3
 80005f0:	2dff      	cmp	r5, #255	; 0xff
 80005f2:	d00e      	beq.n	8000612 <__aeabi_fadd+0x192>
 80005f4:	025b      	lsls	r3, r3, #9
 80005f6:	0a5b      	lsrs	r3, r3, #9
 80005f8:	469c      	mov	ip, r3
 80005fa:	b2ea      	uxtb	r2, r5
 80005fc:	e785      	b.n	800050a <__aeabi_fadd+0x8a>
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d007      	beq.n	8000612 <__aeabi_fadd+0x192>
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	03d2      	lsls	r2, r2, #15
 8000606:	4213      	tst	r3, r2
 8000608:	d003      	beq.n	8000612 <__aeabi_fadd+0x192>
 800060a:	4210      	tst	r0, r2
 800060c:	d101      	bne.n	8000612 <__aeabi_fadd+0x192>
 800060e:	000c      	movs	r4, r1
 8000610:	0003      	movs	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0db      	beq.n	80005ce <__aeabi_fadd+0x14e>
 8000616:	2080      	movs	r0, #128	; 0x80
 8000618:	03c0      	lsls	r0, r0, #15
 800061a:	4318      	orrs	r0, r3
 800061c:	0240      	lsls	r0, r0, #9
 800061e:	0a43      	lsrs	r3, r0, #9
 8000620:	469c      	mov	ip, r3
 8000622:	22ff      	movs	r2, #255	; 0xff
 8000624:	e771      	b.n	800050a <__aeabi_fadd+0x8a>
 8000626:	2900      	cmp	r1, #0
 8000628:	d0d5      	beq.n	80005d6 <__aeabi_fadd+0x156>
 800062a:	1b7a      	subs	r2, r7, r5
 800062c:	2d00      	cmp	r5, #0
 800062e:	d160      	bne.n	80006f2 <__aeabi_fadd+0x272>
 8000630:	4643      	mov	r3, r8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d024      	beq.n	8000680 <__aeabi_fadd+0x200>
 8000636:	1e53      	subs	r3, r2, #1
 8000638:	2a01      	cmp	r2, #1
 800063a:	d073      	beq.n	8000724 <__aeabi_fadd+0x2a4>
 800063c:	2aff      	cmp	r2, #255	; 0xff
 800063e:	d0e7      	beq.n	8000610 <__aeabi_fadd+0x190>
 8000640:	001a      	movs	r2, r3
 8000642:	2a1b      	cmp	r2, #27
 8000644:	dc00      	bgt.n	8000648 <__aeabi_fadd+0x1c8>
 8000646:	e085      	b.n	8000754 <__aeabi_fadd+0x2d4>
 8000648:	2001      	movs	r0, #1
 800064a:	003d      	movs	r5, r7
 800064c:	1980      	adds	r0, r0, r6
 800064e:	e785      	b.n	800055c <__aeabi_fadd+0xdc>
 8000650:	2320      	movs	r3, #32
 8000652:	003a      	movs	r2, r7
 8000654:	1b45      	subs	r5, r0, r5
 8000656:	0038      	movs	r0, r7
 8000658:	3501      	adds	r5, #1
 800065a:	40ea      	lsrs	r2, r5
 800065c:	1b5d      	subs	r5, r3, r5
 800065e:	40a8      	lsls	r0, r5
 8000660:	1e43      	subs	r3, r0, #1
 8000662:	4198      	sbcs	r0, r3
 8000664:	2500      	movs	r5, #0
 8000666:	4310      	orrs	r0, r2
 8000668:	e73e      	b.n	80004e8 <__aeabi_fadd+0x68>
 800066a:	2320      	movs	r3, #32
 800066c:	0030      	movs	r0, r6
 800066e:	1a9b      	subs	r3, r3, r2
 8000670:	0031      	movs	r1, r6
 8000672:	4098      	lsls	r0, r3
 8000674:	40d1      	lsrs	r1, r2
 8000676:	1e43      	subs	r3, r0, #1
 8000678:	4198      	sbcs	r0, r3
 800067a:	4308      	orrs	r0, r1
 800067c:	e722      	b.n	80004c4 <__aeabi_fadd+0x44>
 800067e:	000c      	movs	r4, r1
 8000680:	0003      	movs	r3, r0
 8000682:	0015      	movs	r5, r2
 8000684:	e7b4      	b.n	80005f0 <__aeabi_fadd+0x170>
 8000686:	2fff      	cmp	r7, #255	; 0xff
 8000688:	d0c1      	beq.n	800060e <__aeabi_fadd+0x18e>
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	4640      	mov	r0, r8
 800068e:	04db      	lsls	r3, r3, #19
 8000690:	4318      	orrs	r0, r3
 8000692:	4680      	mov	r8, r0
 8000694:	2a1b      	cmp	r2, #27
 8000696:	dd51      	ble.n	800073c <__aeabi_fadd+0x2bc>
 8000698:	2001      	movs	r0, #1
 800069a:	000c      	movs	r4, r1
 800069c:	003d      	movs	r5, r7
 800069e:	1a30      	subs	r0, r6, r0
 80006a0:	e712      	b.n	80004c8 <__aeabi_fadd+0x48>
 80006a2:	4643      	mov	r3, r8
 80006a4:	1b9f      	subs	r7, r3, r6
 80006a6:	017b      	lsls	r3, r7, #5
 80006a8:	d42b      	bmi.n	8000702 <__aeabi_fadd+0x282>
 80006aa:	2f00      	cmp	r7, #0
 80006ac:	d000      	beq.n	80006b0 <__aeabi_fadd+0x230>
 80006ae:	e710      	b.n	80004d2 <__aeabi_fadd+0x52>
 80006b0:	2300      	movs	r3, #0
 80006b2:	2400      	movs	r4, #0
 80006b4:	2200      	movs	r2, #0
 80006b6:	469c      	mov	ip, r3
 80006b8:	e727      	b.n	800050a <__aeabi_fadd+0x8a>
 80006ba:	2320      	movs	r3, #32
 80006bc:	0032      	movs	r2, r6
 80006be:	0030      	movs	r0, r6
 80006c0:	40ca      	lsrs	r2, r1
 80006c2:	1a59      	subs	r1, r3, r1
 80006c4:	4088      	lsls	r0, r1
 80006c6:	1e43      	subs	r3, r0, #1
 80006c8:	4198      	sbcs	r0, r3
 80006ca:	4310      	orrs	r0, r2
 80006cc:	e745      	b.n	800055a <__aeabi_fadd+0xda>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d14a      	bne.n	8000768 <__aeabi_fadd+0x2e8>
 80006d2:	4643      	mov	r3, r8
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d063      	beq.n	80007a0 <__aeabi_fadd+0x320>
 80006d8:	2200      	movs	r2, #0
 80006da:	2e00      	cmp	r6, #0
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fadd+0x260>
 80006de:	e714      	b.n	800050a <__aeabi_fadd+0x8a>
 80006e0:	0030      	movs	r0, r6
 80006e2:	4440      	add	r0, r8
 80006e4:	0143      	lsls	r3, r0, #5
 80006e6:	d400      	bmi.n	80006ea <__aeabi_fadd+0x26a>
 80006e8:	e77e      	b.n	80005e8 <__aeabi_fadd+0x168>
 80006ea:	4b32      	ldr	r3, [pc, #200]	; (80007b4 <__aeabi_fadd+0x334>)
 80006ec:	3501      	adds	r5, #1
 80006ee:	4018      	ands	r0, r3
 80006f0:	e77a      	b.n	80005e8 <__aeabi_fadd+0x168>
 80006f2:	2fff      	cmp	r7, #255	; 0xff
 80006f4:	d08c      	beq.n	8000610 <__aeabi_fadd+0x190>
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	4641      	mov	r1, r8
 80006fa:	04db      	lsls	r3, r3, #19
 80006fc:	4319      	orrs	r1, r3
 80006fe:	4688      	mov	r8, r1
 8000700:	e79f      	b.n	8000642 <__aeabi_fadd+0x1c2>
 8000702:	4643      	mov	r3, r8
 8000704:	000c      	movs	r4, r1
 8000706:	1af7      	subs	r7, r6, r3
 8000708:	e6e3      	b.n	80004d2 <__aeabi_fadd+0x52>
 800070a:	4642      	mov	r2, r8
 800070c:	2a00      	cmp	r2, #0
 800070e:	d000      	beq.n	8000712 <__aeabi_fadd+0x292>
 8000710:	e775      	b.n	80005fe <__aeabi_fadd+0x17e>
 8000712:	2e00      	cmp	r6, #0
 8000714:	d000      	beq.n	8000718 <__aeabi_fadd+0x298>
 8000716:	e77a      	b.n	800060e <__aeabi_fadd+0x18e>
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	03db      	lsls	r3, r3, #15
 800071c:	2400      	movs	r4, #0
 800071e:	469c      	mov	ip, r3
 8000720:	22ff      	movs	r2, #255	; 0xff
 8000722:	e6f2      	b.n	800050a <__aeabi_fadd+0x8a>
 8000724:	0030      	movs	r0, r6
 8000726:	4440      	add	r0, r8
 8000728:	2501      	movs	r5, #1
 800072a:	0143      	lsls	r3, r0, #5
 800072c:	d400      	bmi.n	8000730 <__aeabi_fadd+0x2b0>
 800072e:	e75b      	b.n	80005e8 <__aeabi_fadd+0x168>
 8000730:	2502      	movs	r5, #2
 8000732:	e718      	b.n	8000566 <__aeabi_fadd+0xe6>
 8000734:	4643      	mov	r3, r8
 8000736:	2501      	movs	r5, #1
 8000738:	1b98      	subs	r0, r3, r6
 800073a:	e6c5      	b.n	80004c8 <__aeabi_fadd+0x48>
 800073c:	2320      	movs	r3, #32
 800073e:	4644      	mov	r4, r8
 8000740:	4640      	mov	r0, r8
 8000742:	40d4      	lsrs	r4, r2
 8000744:	1a9a      	subs	r2, r3, r2
 8000746:	4090      	lsls	r0, r2
 8000748:	1e43      	subs	r3, r0, #1
 800074a:	4198      	sbcs	r0, r3
 800074c:	4320      	orrs	r0, r4
 800074e:	e7a4      	b.n	800069a <__aeabi_fadd+0x21a>
 8000750:	000d      	movs	r5, r1
 8000752:	e74d      	b.n	80005f0 <__aeabi_fadd+0x170>
 8000754:	2320      	movs	r3, #32
 8000756:	4641      	mov	r1, r8
 8000758:	4640      	mov	r0, r8
 800075a:	40d1      	lsrs	r1, r2
 800075c:	1a9a      	subs	r2, r3, r2
 800075e:	4090      	lsls	r0, r2
 8000760:	1e43      	subs	r3, r0, #1
 8000762:	4198      	sbcs	r0, r3
 8000764:	4308      	orrs	r0, r1
 8000766:	e770      	b.n	800064a <__aeabi_fadd+0x1ca>
 8000768:	4642      	mov	r2, r8
 800076a:	2a00      	cmp	r2, #0
 800076c:	d100      	bne.n	8000770 <__aeabi_fadd+0x2f0>
 800076e:	e74f      	b.n	8000610 <__aeabi_fadd+0x190>
 8000770:	2e00      	cmp	r6, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_fadd+0x2f6>
 8000774:	e74d      	b.n	8000612 <__aeabi_fadd+0x192>
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	03d2      	lsls	r2, r2, #15
 800077a:	4213      	tst	r3, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_fadd+0x300>
 800077e:	e748      	b.n	8000612 <__aeabi_fadd+0x192>
 8000780:	4210      	tst	r0, r2
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0x306>
 8000784:	e745      	b.n	8000612 <__aeabi_fadd+0x192>
 8000786:	0003      	movs	r3, r0
 8000788:	e743      	b.n	8000612 <__aeabi_fadd+0x192>
 800078a:	2e00      	cmp	r6, #0
 800078c:	d090      	beq.n	80006b0 <__aeabi_fadd+0x230>
 800078e:	000c      	movs	r4, r1
 8000790:	4684      	mov	ip, r0
 8000792:	2200      	movs	r2, #0
 8000794:	e6b9      	b.n	800050a <__aeabi_fadd+0x8a>
 8000796:	4643      	mov	r3, r8
 8000798:	000c      	movs	r4, r1
 800079a:	1af0      	subs	r0, r6, r3
 800079c:	3501      	adds	r5, #1
 800079e:	e693      	b.n	80004c8 <__aeabi_fadd+0x48>
 80007a0:	4684      	mov	ip, r0
 80007a2:	2200      	movs	r2, #0
 80007a4:	e6b1      	b.n	800050a <__aeabi_fadd+0x8a>
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x32c>
 80007aa:	e71d      	b.n	80005e8 <__aeabi_fadd+0x168>
 80007ac:	2300      	movs	r3, #0
 80007ae:	2400      	movs	r4, #0
 80007b0:	469c      	mov	ip, r3
 80007b2:	e6aa      	b.n	800050a <__aeabi_fadd+0x8a>
 80007b4:	fbffffff 	.word	0xfbffffff
 80007b8:	7dffffff 	.word	0x7dffffff

080007bc <__aeabi_fmul>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0244      	lsls	r4, r0, #9
 80007c6:	0045      	lsls	r5, r0, #1
 80007c8:	b5c0      	push	{r6, r7, lr}
 80007ca:	0a64      	lsrs	r4, r4, #9
 80007cc:	1c0f      	adds	r7, r1, #0
 80007ce:	0e2d      	lsrs	r5, r5, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2d00      	cmp	r5, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fmul+0x1c>
 80007d6:	e08d      	b.n	80008f4 <__aeabi_fmul+0x138>
 80007d8:	2dff      	cmp	r5, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fmul+0x22>
 80007dc:	e092      	b.n	8000904 <__aeabi_fmul+0x148>
 80007de:	2300      	movs	r3, #0
 80007e0:	2080      	movs	r0, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00e4      	lsls	r4, r4, #3
 80007e8:	04c0      	lsls	r0, r0, #19
 80007ea:	4304      	orrs	r4, r0
 80007ec:	3d7f      	subs	r5, #127	; 0x7f
 80007ee:	0278      	lsls	r0, r7, #9
 80007f0:	0a43      	lsrs	r3, r0, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	007b      	lsls	r3, r7, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fff      	lsrs	r7, r7, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fmul+0x44>
 80007fe:	e070      	b.n	80008e2 <__aeabi_fmul+0x126>
 8000800:	2bff      	cmp	r3, #255	; 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fmul+0x4a>
 8000804:	e086      	b.n	8000914 <__aeabi_fmul+0x158>
 8000806:	4642      	mov	r2, r8
 8000808:	00d0      	lsls	r0, r2, #3
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	3b7f      	subs	r3, #127	; 0x7f
 800080e:	18ed      	adds	r5, r5, r3
 8000810:	2300      	movs	r3, #0
 8000812:	04d2      	lsls	r2, r2, #19
 8000814:	4302      	orrs	r2, r0
 8000816:	4690      	mov	r8, r2
 8000818:	469c      	mov	ip, r3
 800081a:	0031      	movs	r1, r6
 800081c:	464b      	mov	r3, r9
 800081e:	4079      	eors	r1, r7
 8000820:	1c68      	adds	r0, r5, #1
 8000822:	2b0f      	cmp	r3, #15
 8000824:	d81c      	bhi.n	8000860 <__aeabi_fmul+0xa4>
 8000826:	4a76      	ldr	r2, [pc, #472]	; (8000a00 <__aeabi_fmul+0x244>)
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	58d3      	ldr	r3, [r2, r3]
 800082c:	469f      	mov	pc, r3
 800082e:	0039      	movs	r1, r7
 8000830:	4644      	mov	r4, r8
 8000832:	46e2      	mov	sl, ip
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d00f      	beq.n	800085a <__aeabi_fmul+0x9e>
 800083a:	2b03      	cmp	r3, #3
 800083c:	d100      	bne.n	8000840 <__aeabi_fmul+0x84>
 800083e:	e0d7      	b.n	80009f0 <__aeabi_fmul+0x234>
 8000840:	2b01      	cmp	r3, #1
 8000842:	d137      	bne.n	80008b4 <__aeabi_fmul+0xf8>
 8000844:	2000      	movs	r0, #0
 8000846:	2400      	movs	r4, #0
 8000848:	05c0      	lsls	r0, r0, #23
 800084a:	4320      	orrs	r0, r4
 800084c:	07c9      	lsls	r1, r1, #31
 800084e:	4308      	orrs	r0, r1
 8000850:	bce0      	pop	{r5, r6, r7}
 8000852:	46ba      	mov	sl, r7
 8000854:	46b1      	mov	r9, r6
 8000856:	46a8      	mov	r8, r5
 8000858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085a:	20ff      	movs	r0, #255	; 0xff
 800085c:	2400      	movs	r4, #0
 800085e:	e7f3      	b.n	8000848 <__aeabi_fmul+0x8c>
 8000860:	0c26      	lsrs	r6, r4, #16
 8000862:	0424      	lsls	r4, r4, #16
 8000864:	0c22      	lsrs	r2, r4, #16
 8000866:	4644      	mov	r4, r8
 8000868:	0424      	lsls	r4, r4, #16
 800086a:	0c24      	lsrs	r4, r4, #16
 800086c:	4643      	mov	r3, r8
 800086e:	0027      	movs	r7, r4
 8000870:	0c1b      	lsrs	r3, r3, #16
 8000872:	4357      	muls	r7, r2
 8000874:	4374      	muls	r4, r6
 8000876:	435a      	muls	r2, r3
 8000878:	435e      	muls	r6, r3
 800087a:	1912      	adds	r2, r2, r4
 800087c:	0c3b      	lsrs	r3, r7, #16
 800087e:	189b      	adds	r3, r3, r2
 8000880:	429c      	cmp	r4, r3
 8000882:	d903      	bls.n	800088c <__aeabi_fmul+0xd0>
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	0252      	lsls	r2, r2, #9
 8000888:	4694      	mov	ip, r2
 800088a:	4466      	add	r6, ip
 800088c:	043f      	lsls	r7, r7, #16
 800088e:	041a      	lsls	r2, r3, #16
 8000890:	0c3f      	lsrs	r7, r7, #16
 8000892:	19d2      	adds	r2, r2, r7
 8000894:	0194      	lsls	r4, r2, #6
 8000896:	1e67      	subs	r7, r4, #1
 8000898:	41bc      	sbcs	r4, r7
 800089a:	0c1b      	lsrs	r3, r3, #16
 800089c:	0e92      	lsrs	r2, r2, #26
 800089e:	199b      	adds	r3, r3, r6
 80008a0:	4314      	orrs	r4, r2
 80008a2:	019b      	lsls	r3, r3, #6
 80008a4:	431c      	orrs	r4, r3
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	d400      	bmi.n	80008ac <__aeabi_fmul+0xf0>
 80008aa:	e09b      	b.n	80009e4 <__aeabi_fmul+0x228>
 80008ac:	2301      	movs	r3, #1
 80008ae:	0862      	lsrs	r2, r4, #1
 80008b0:	401c      	ands	r4, r3
 80008b2:	4314      	orrs	r4, r2
 80008b4:	0002      	movs	r2, r0
 80008b6:	327f      	adds	r2, #127	; 0x7f
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	dd64      	ble.n	8000986 <__aeabi_fmul+0x1ca>
 80008bc:	0763      	lsls	r3, r4, #29
 80008be:	d004      	beq.n	80008ca <__aeabi_fmul+0x10e>
 80008c0:	230f      	movs	r3, #15
 80008c2:	4023      	ands	r3, r4
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d000      	beq.n	80008ca <__aeabi_fmul+0x10e>
 80008c8:	3404      	adds	r4, #4
 80008ca:	0123      	lsls	r3, r4, #4
 80008cc:	d503      	bpl.n	80008d6 <__aeabi_fmul+0x11a>
 80008ce:	0002      	movs	r2, r0
 80008d0:	4b4c      	ldr	r3, [pc, #304]	; (8000a04 <__aeabi_fmul+0x248>)
 80008d2:	3280      	adds	r2, #128	; 0x80
 80008d4:	401c      	ands	r4, r3
 80008d6:	2afe      	cmp	r2, #254	; 0xfe
 80008d8:	dcbf      	bgt.n	800085a <__aeabi_fmul+0x9e>
 80008da:	01a4      	lsls	r4, r4, #6
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	b2d0      	uxtb	r0, r2
 80008e0:	e7b2      	b.n	8000848 <__aeabi_fmul+0x8c>
 80008e2:	4643      	mov	r3, r8
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d13d      	bne.n	8000964 <__aeabi_fmul+0x1a8>
 80008e8:	464a      	mov	r2, r9
 80008ea:	3301      	adds	r3, #1
 80008ec:	431a      	orrs	r2, r3
 80008ee:	4691      	mov	r9, r2
 80008f0:	469c      	mov	ip, r3
 80008f2:	e792      	b.n	800081a <__aeabi_fmul+0x5e>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d129      	bne.n	800094c <__aeabi_fmul+0x190>
 80008f8:	2304      	movs	r3, #4
 80008fa:	4699      	mov	r9, r3
 80008fc:	3b03      	subs	r3, #3
 80008fe:	2500      	movs	r5, #0
 8000900:	469a      	mov	sl, r3
 8000902:	e774      	b.n	80007ee <__aeabi_fmul+0x32>
 8000904:	2c00      	cmp	r4, #0
 8000906:	d11b      	bne.n	8000940 <__aeabi_fmul+0x184>
 8000908:	2308      	movs	r3, #8
 800090a:	4699      	mov	r9, r3
 800090c:	3b06      	subs	r3, #6
 800090e:	25ff      	movs	r5, #255	; 0xff
 8000910:	469a      	mov	sl, r3
 8000912:	e76c      	b.n	80007ee <__aeabi_fmul+0x32>
 8000914:	4643      	mov	r3, r8
 8000916:	35ff      	adds	r5, #255	; 0xff
 8000918:	2b00      	cmp	r3, #0
 800091a:	d10b      	bne.n	8000934 <__aeabi_fmul+0x178>
 800091c:	2302      	movs	r3, #2
 800091e:	464a      	mov	r2, r9
 8000920:	431a      	orrs	r2, r3
 8000922:	4691      	mov	r9, r2
 8000924:	469c      	mov	ip, r3
 8000926:	e778      	b.n	800081a <__aeabi_fmul+0x5e>
 8000928:	4653      	mov	r3, sl
 800092a:	0031      	movs	r1, r6
 800092c:	2b02      	cmp	r3, #2
 800092e:	d000      	beq.n	8000932 <__aeabi_fmul+0x176>
 8000930:	e783      	b.n	800083a <__aeabi_fmul+0x7e>
 8000932:	e792      	b.n	800085a <__aeabi_fmul+0x9e>
 8000934:	2303      	movs	r3, #3
 8000936:	464a      	mov	r2, r9
 8000938:	431a      	orrs	r2, r3
 800093a:	4691      	mov	r9, r2
 800093c:	469c      	mov	ip, r3
 800093e:	e76c      	b.n	800081a <__aeabi_fmul+0x5e>
 8000940:	230c      	movs	r3, #12
 8000942:	4699      	mov	r9, r3
 8000944:	3b09      	subs	r3, #9
 8000946:	25ff      	movs	r5, #255	; 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e750      	b.n	80007ee <__aeabi_fmul+0x32>
 800094c:	0020      	movs	r0, r4
 800094e:	f002 f8bf 	bl	8002ad0 <__clzsi2>
 8000952:	2576      	movs	r5, #118	; 0x76
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	409c      	lsls	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	426d      	negs	r5, r5
 800095c:	4699      	mov	r9, r3
 800095e:	469a      	mov	sl, r3
 8000960:	1a2d      	subs	r5, r5, r0
 8000962:	e744      	b.n	80007ee <__aeabi_fmul+0x32>
 8000964:	4640      	mov	r0, r8
 8000966:	f002 f8b3 	bl	8002ad0 <__clzsi2>
 800096a:	4642      	mov	r2, r8
 800096c:	1f43      	subs	r3, r0, #5
 800096e:	409a      	lsls	r2, r3
 8000970:	2300      	movs	r3, #0
 8000972:	1a2d      	subs	r5, r5, r0
 8000974:	4690      	mov	r8, r2
 8000976:	469c      	mov	ip, r3
 8000978:	3d76      	subs	r5, #118	; 0x76
 800097a:	e74e      	b.n	800081a <__aeabi_fmul+0x5e>
 800097c:	2480      	movs	r4, #128	; 0x80
 800097e:	2100      	movs	r1, #0
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	03e4      	lsls	r4, r4, #15
 8000984:	e760      	b.n	8000848 <__aeabi_fmul+0x8c>
 8000986:	2301      	movs	r3, #1
 8000988:	1a9b      	subs	r3, r3, r2
 800098a:	2b1b      	cmp	r3, #27
 800098c:	dd00      	ble.n	8000990 <__aeabi_fmul+0x1d4>
 800098e:	e759      	b.n	8000844 <__aeabi_fmul+0x88>
 8000990:	0022      	movs	r2, r4
 8000992:	309e      	adds	r0, #158	; 0x9e
 8000994:	40da      	lsrs	r2, r3
 8000996:	4084      	lsls	r4, r0
 8000998:	0013      	movs	r3, r2
 800099a:	1e62      	subs	r2, r4, #1
 800099c:	4194      	sbcs	r4, r2
 800099e:	431c      	orrs	r4, r3
 80009a0:	0763      	lsls	r3, r4, #29
 80009a2:	d004      	beq.n	80009ae <__aeabi_fmul+0x1f2>
 80009a4:	230f      	movs	r3, #15
 80009a6:	4023      	ands	r3, r4
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d000      	beq.n	80009ae <__aeabi_fmul+0x1f2>
 80009ac:	3404      	adds	r4, #4
 80009ae:	0163      	lsls	r3, r4, #5
 80009b0:	d51a      	bpl.n	80009e8 <__aeabi_fmul+0x22c>
 80009b2:	2001      	movs	r0, #1
 80009b4:	2400      	movs	r4, #0
 80009b6:	e747      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009b8:	2080      	movs	r0, #128	; 0x80
 80009ba:	03c0      	lsls	r0, r0, #15
 80009bc:	4204      	tst	r4, r0
 80009be:	d009      	beq.n	80009d4 <__aeabi_fmul+0x218>
 80009c0:	4643      	mov	r3, r8
 80009c2:	4203      	tst	r3, r0
 80009c4:	d106      	bne.n	80009d4 <__aeabi_fmul+0x218>
 80009c6:	4644      	mov	r4, r8
 80009c8:	4304      	orrs	r4, r0
 80009ca:	0264      	lsls	r4, r4, #9
 80009cc:	0039      	movs	r1, r7
 80009ce:	20ff      	movs	r0, #255	; 0xff
 80009d0:	0a64      	lsrs	r4, r4, #9
 80009d2:	e739      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009d4:	2080      	movs	r0, #128	; 0x80
 80009d6:	03c0      	lsls	r0, r0, #15
 80009d8:	4304      	orrs	r4, r0
 80009da:	0264      	lsls	r4, r4, #9
 80009dc:	0031      	movs	r1, r6
 80009de:	20ff      	movs	r0, #255	; 0xff
 80009e0:	0a64      	lsrs	r4, r4, #9
 80009e2:	e731      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009e4:	0028      	movs	r0, r5
 80009e6:	e765      	b.n	80008b4 <__aeabi_fmul+0xf8>
 80009e8:	01a4      	lsls	r4, r4, #6
 80009ea:	2000      	movs	r0, #0
 80009ec:	0a64      	lsrs	r4, r4, #9
 80009ee:	e72b      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009f0:	2080      	movs	r0, #128	; 0x80
 80009f2:	03c0      	lsls	r0, r0, #15
 80009f4:	4304      	orrs	r4, r0
 80009f6:	0264      	lsls	r4, r4, #9
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	0a64      	lsrs	r4, r4, #9
 80009fc:	e724      	b.n	8000848 <__aeabi_fmul+0x8c>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	08008e78 	.word	0x08008e78
 8000a04:	f7ffffff 	.word	0xf7ffffff

08000a08 <__aeabi_fsub>:
 8000a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0a:	46ce      	mov	lr, r9
 8000a0c:	4647      	mov	r7, r8
 8000a0e:	0243      	lsls	r3, r0, #9
 8000a10:	0a5b      	lsrs	r3, r3, #9
 8000a12:	024e      	lsls	r6, r1, #9
 8000a14:	00da      	lsls	r2, r3, #3
 8000a16:	4694      	mov	ip, r2
 8000a18:	0a72      	lsrs	r2, r6, #9
 8000a1a:	4691      	mov	r9, r2
 8000a1c:	0045      	lsls	r5, r0, #1
 8000a1e:	004a      	lsls	r2, r1, #1
 8000a20:	b580      	push	{r7, lr}
 8000a22:	0e2d      	lsrs	r5, r5, #24
 8000a24:	001f      	movs	r7, r3
 8000a26:	0fc4      	lsrs	r4, r0, #31
 8000a28:	0e12      	lsrs	r2, r2, #24
 8000a2a:	0fc9      	lsrs	r1, r1, #31
 8000a2c:	09b6      	lsrs	r6, r6, #6
 8000a2e:	2aff      	cmp	r2, #255	; 0xff
 8000a30:	d05b      	beq.n	8000aea <__aeabi_fsub+0xe2>
 8000a32:	2001      	movs	r0, #1
 8000a34:	4041      	eors	r1, r0
 8000a36:	428c      	cmp	r4, r1
 8000a38:	d039      	beq.n	8000aae <__aeabi_fsub+0xa6>
 8000a3a:	1aa8      	subs	r0, r5, r2
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	dd5a      	ble.n	8000af6 <__aeabi_fsub+0xee>
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d06a      	beq.n	8000b1a <__aeabi_fsub+0x112>
 8000a44:	2dff      	cmp	r5, #255	; 0xff
 8000a46:	d100      	bne.n	8000a4a <__aeabi_fsub+0x42>
 8000a48:	e0d9      	b.n	8000bfe <__aeabi_fsub+0x1f6>
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	04d2      	lsls	r2, r2, #19
 8000a4e:	4316      	orrs	r6, r2
 8000a50:	281b      	cmp	r0, #27
 8000a52:	dc00      	bgt.n	8000a56 <__aeabi_fsub+0x4e>
 8000a54:	e0e9      	b.n	8000c2a <__aeabi_fsub+0x222>
 8000a56:	2001      	movs	r0, #1
 8000a58:	4663      	mov	r3, ip
 8000a5a:	1a18      	subs	r0, r3, r0
 8000a5c:	0143      	lsls	r3, r0, #5
 8000a5e:	d400      	bmi.n	8000a62 <__aeabi_fsub+0x5a>
 8000a60:	e0b4      	b.n	8000bcc <__aeabi_fsub+0x1c4>
 8000a62:	0180      	lsls	r0, r0, #6
 8000a64:	0987      	lsrs	r7, r0, #6
 8000a66:	0038      	movs	r0, r7
 8000a68:	f002 f832 	bl	8002ad0 <__clzsi2>
 8000a6c:	3805      	subs	r0, #5
 8000a6e:	4087      	lsls	r7, r0
 8000a70:	4285      	cmp	r5, r0
 8000a72:	dc00      	bgt.n	8000a76 <__aeabi_fsub+0x6e>
 8000a74:	e0cc      	b.n	8000c10 <__aeabi_fsub+0x208>
 8000a76:	1a2d      	subs	r5, r5, r0
 8000a78:	48b5      	ldr	r0, [pc, #724]	; (8000d50 <__aeabi_fsub+0x348>)
 8000a7a:	4038      	ands	r0, r7
 8000a7c:	0743      	lsls	r3, r0, #29
 8000a7e:	d004      	beq.n	8000a8a <__aeabi_fsub+0x82>
 8000a80:	230f      	movs	r3, #15
 8000a82:	4003      	ands	r3, r0
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fsub+0x82>
 8000a88:	3004      	adds	r0, #4
 8000a8a:	0143      	lsls	r3, r0, #5
 8000a8c:	d400      	bmi.n	8000a90 <__aeabi_fsub+0x88>
 8000a8e:	e0a0      	b.n	8000bd2 <__aeabi_fsub+0x1ca>
 8000a90:	1c6a      	adds	r2, r5, #1
 8000a92:	2dfe      	cmp	r5, #254	; 0xfe
 8000a94:	d100      	bne.n	8000a98 <__aeabi_fsub+0x90>
 8000a96:	e08d      	b.n	8000bb4 <__aeabi_fsub+0x1ac>
 8000a98:	0180      	lsls	r0, r0, #6
 8000a9a:	0a47      	lsrs	r7, r0, #9
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	05d0      	lsls	r0, r2, #23
 8000aa0:	4338      	orrs	r0, r7
 8000aa2:	07e4      	lsls	r4, r4, #31
 8000aa4:	4320      	orrs	r0, r4
 8000aa6:	bcc0      	pop	{r6, r7}
 8000aa8:	46b9      	mov	r9, r7
 8000aaa:	46b0      	mov	r8, r6
 8000aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aae:	1aa8      	subs	r0, r5, r2
 8000ab0:	4680      	mov	r8, r0
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	dd45      	ble.n	8000b42 <__aeabi_fsub+0x13a>
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d070      	beq.n	8000b9c <__aeabi_fsub+0x194>
 8000aba:	2dff      	cmp	r5, #255	; 0xff
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_fsub+0xb8>
 8000abe:	e09e      	b.n	8000bfe <__aeabi_fsub+0x1f6>
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	04db      	lsls	r3, r3, #19
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	2b1b      	cmp	r3, #27
 8000aca:	dc00      	bgt.n	8000ace <__aeabi_fsub+0xc6>
 8000acc:	e0d2      	b.n	8000c74 <__aeabi_fsub+0x26c>
 8000ace:	2001      	movs	r0, #1
 8000ad0:	4460      	add	r0, ip
 8000ad2:	0143      	lsls	r3, r0, #5
 8000ad4:	d57a      	bpl.n	8000bcc <__aeabi_fsub+0x1c4>
 8000ad6:	3501      	adds	r5, #1
 8000ad8:	2dff      	cmp	r5, #255	; 0xff
 8000ada:	d06b      	beq.n	8000bb4 <__aeabi_fsub+0x1ac>
 8000adc:	2301      	movs	r3, #1
 8000ade:	4a9d      	ldr	r2, [pc, #628]	; (8000d54 <__aeabi_fsub+0x34c>)
 8000ae0:	4003      	ands	r3, r0
 8000ae2:	0840      	lsrs	r0, r0, #1
 8000ae4:	4010      	ands	r0, r2
 8000ae6:	4318      	orrs	r0, r3
 8000ae8:	e7c8      	b.n	8000a7c <__aeabi_fsub+0x74>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d020      	beq.n	8000b30 <__aeabi_fsub+0x128>
 8000aee:	428c      	cmp	r4, r1
 8000af0:	d023      	beq.n	8000b3a <__aeabi_fsub+0x132>
 8000af2:	0028      	movs	r0, r5
 8000af4:	38ff      	subs	r0, #255	; 0xff
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d039      	beq.n	8000b6e <__aeabi_fsub+0x166>
 8000afa:	1b57      	subs	r7, r2, r5
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d000      	beq.n	8000b02 <__aeabi_fsub+0xfa>
 8000b00:	e09d      	b.n	8000c3e <__aeabi_fsub+0x236>
 8000b02:	4663      	mov	r3, ip
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_fsub+0x102>
 8000b08:	e0db      	b.n	8000cc2 <__aeabi_fsub+0x2ba>
 8000b0a:	1e7b      	subs	r3, r7, #1
 8000b0c:	2f01      	cmp	r7, #1
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_fsub+0x10a>
 8000b10:	e10d      	b.n	8000d2e <__aeabi_fsub+0x326>
 8000b12:	2fff      	cmp	r7, #255	; 0xff
 8000b14:	d071      	beq.n	8000bfa <__aeabi_fsub+0x1f2>
 8000b16:	001f      	movs	r7, r3
 8000b18:	e098      	b.n	8000c4c <__aeabi_fsub+0x244>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x118>
 8000b1e:	e0a7      	b.n	8000c70 <__aeabi_fsub+0x268>
 8000b20:	1e42      	subs	r2, r0, #1
 8000b22:	2801      	cmp	r0, #1
 8000b24:	d100      	bne.n	8000b28 <__aeabi_fsub+0x120>
 8000b26:	e0e6      	b.n	8000cf6 <__aeabi_fsub+0x2ee>
 8000b28:	28ff      	cmp	r0, #255	; 0xff
 8000b2a:	d068      	beq.n	8000bfe <__aeabi_fsub+0x1f6>
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	e78f      	b.n	8000a50 <__aeabi_fsub+0x48>
 8000b30:	2001      	movs	r0, #1
 8000b32:	4041      	eors	r1, r0
 8000b34:	42a1      	cmp	r1, r4
 8000b36:	d000      	beq.n	8000b3a <__aeabi_fsub+0x132>
 8000b38:	e77f      	b.n	8000a3a <__aeabi_fsub+0x32>
 8000b3a:	20ff      	movs	r0, #255	; 0xff
 8000b3c:	4240      	negs	r0, r0
 8000b3e:	4680      	mov	r8, r0
 8000b40:	44a8      	add	r8, r5
 8000b42:	4640      	mov	r0, r8
 8000b44:	2800      	cmp	r0, #0
 8000b46:	d038      	beq.n	8000bba <__aeabi_fsub+0x1b2>
 8000b48:	1b51      	subs	r1, r2, r5
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fsub+0x148>
 8000b4e:	e0ae      	b.n	8000cae <__aeabi_fsub+0x2a6>
 8000b50:	2aff      	cmp	r2, #255	; 0xff
 8000b52:	d100      	bne.n	8000b56 <__aeabi_fsub+0x14e>
 8000b54:	e0df      	b.n	8000d16 <__aeabi_fsub+0x30e>
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	4660      	mov	r0, ip
 8000b5a:	04db      	lsls	r3, r3, #19
 8000b5c:	4318      	orrs	r0, r3
 8000b5e:	4684      	mov	ip, r0
 8000b60:	291b      	cmp	r1, #27
 8000b62:	dc00      	bgt.n	8000b66 <__aeabi_fsub+0x15e>
 8000b64:	e0d9      	b.n	8000d1a <__aeabi_fsub+0x312>
 8000b66:	2001      	movs	r0, #1
 8000b68:	0015      	movs	r5, r2
 8000b6a:	1980      	adds	r0, r0, r6
 8000b6c:	e7b1      	b.n	8000ad2 <__aeabi_fsub+0xca>
 8000b6e:	20fe      	movs	r0, #254	; 0xfe
 8000b70:	1c6a      	adds	r2, r5, #1
 8000b72:	4210      	tst	r0, r2
 8000b74:	d171      	bne.n	8000c5a <__aeabi_fsub+0x252>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d000      	beq.n	8000b7c <__aeabi_fsub+0x174>
 8000b7a:	e0a6      	b.n	8000cca <__aeabi_fsub+0x2c2>
 8000b7c:	4663      	mov	r3, ip
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fsub+0x17c>
 8000b82:	e0d9      	b.n	8000d38 <__aeabi_fsub+0x330>
 8000b84:	2200      	movs	r2, #0
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fsub+0x184>
 8000b8a:	e788      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000b8c:	1b98      	subs	r0, r3, r6
 8000b8e:	0143      	lsls	r3, r0, #5
 8000b90:	d400      	bmi.n	8000b94 <__aeabi_fsub+0x18c>
 8000b92:	e0e1      	b.n	8000d58 <__aeabi_fsub+0x350>
 8000b94:	4663      	mov	r3, ip
 8000b96:	000c      	movs	r4, r1
 8000b98:	1af0      	subs	r0, r6, r3
 8000b9a:	e76f      	b.n	8000a7c <__aeabi_fsub+0x74>
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_fsub+0x19a>
 8000ba0:	e0b7      	b.n	8000d12 <__aeabi_fsub+0x30a>
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	2801      	cmp	r0, #1
 8000ba8:	d100      	bne.n	8000bac <__aeabi_fsub+0x1a4>
 8000baa:	e09c      	b.n	8000ce6 <__aeabi_fsub+0x2de>
 8000bac:	28ff      	cmp	r0, #255	; 0xff
 8000bae:	d026      	beq.n	8000bfe <__aeabi_fsub+0x1f6>
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	e788      	b.n	8000ac6 <__aeabi_fsub+0xbe>
 8000bb4:	22ff      	movs	r2, #255	; 0xff
 8000bb6:	2700      	movs	r7, #0
 8000bb8:	e771      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000bba:	20fe      	movs	r0, #254	; 0xfe
 8000bbc:	1c6a      	adds	r2, r5, #1
 8000bbe:	4210      	tst	r0, r2
 8000bc0:	d064      	beq.n	8000c8c <__aeabi_fsub+0x284>
 8000bc2:	2aff      	cmp	r2, #255	; 0xff
 8000bc4:	d0f6      	beq.n	8000bb4 <__aeabi_fsub+0x1ac>
 8000bc6:	0015      	movs	r5, r2
 8000bc8:	4466      	add	r6, ip
 8000bca:	0870      	lsrs	r0, r6, #1
 8000bcc:	0743      	lsls	r3, r0, #29
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_fsub+0x1ca>
 8000bd0:	e756      	b.n	8000a80 <__aeabi_fsub+0x78>
 8000bd2:	08c3      	lsrs	r3, r0, #3
 8000bd4:	2dff      	cmp	r5, #255	; 0xff
 8000bd6:	d012      	beq.n	8000bfe <__aeabi_fsub+0x1f6>
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	0a5f      	lsrs	r7, r3, #9
 8000bdc:	b2ea      	uxtb	r2, r5
 8000bde:	e75e      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000be0:	4662      	mov	r2, ip
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fsub+0x1e0>
 8000be6:	e096      	b.n	8000d16 <__aeabi_fsub+0x30e>
 8000be8:	2e00      	cmp	r6, #0
 8000bea:	d008      	beq.n	8000bfe <__aeabi_fsub+0x1f6>
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	03d2      	lsls	r2, r2, #15
 8000bf0:	4213      	tst	r3, r2
 8000bf2:	d004      	beq.n	8000bfe <__aeabi_fsub+0x1f6>
 8000bf4:	4648      	mov	r0, r9
 8000bf6:	4210      	tst	r0, r2
 8000bf8:	d101      	bne.n	8000bfe <__aeabi_fsub+0x1f6>
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0d8      	beq.n	8000bb4 <__aeabi_fsub+0x1ac>
 8000c02:	2780      	movs	r7, #128	; 0x80
 8000c04:	03ff      	lsls	r7, r7, #15
 8000c06:	431f      	orrs	r7, r3
 8000c08:	027f      	lsls	r7, r7, #9
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	0a7f      	lsrs	r7, r7, #9
 8000c0e:	e746      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000c10:	2320      	movs	r3, #32
 8000c12:	003a      	movs	r2, r7
 8000c14:	1b45      	subs	r5, r0, r5
 8000c16:	0038      	movs	r0, r7
 8000c18:	3501      	adds	r5, #1
 8000c1a:	40ea      	lsrs	r2, r5
 8000c1c:	1b5d      	subs	r5, r3, r5
 8000c1e:	40a8      	lsls	r0, r5
 8000c20:	1e43      	subs	r3, r0, #1
 8000c22:	4198      	sbcs	r0, r3
 8000c24:	2500      	movs	r5, #0
 8000c26:	4310      	orrs	r0, r2
 8000c28:	e728      	b.n	8000a7c <__aeabi_fsub+0x74>
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	1a1b      	subs	r3, r3, r0
 8000c2e:	0032      	movs	r2, r6
 8000c30:	409e      	lsls	r6, r3
 8000c32:	40c2      	lsrs	r2, r0
 8000c34:	0030      	movs	r0, r6
 8000c36:	1e43      	subs	r3, r0, #1
 8000c38:	4198      	sbcs	r0, r3
 8000c3a:	4310      	orrs	r0, r2
 8000c3c:	e70c      	b.n	8000a58 <__aeabi_fsub+0x50>
 8000c3e:	2aff      	cmp	r2, #255	; 0xff
 8000c40:	d0db      	beq.n	8000bfa <__aeabi_fsub+0x1f2>
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	4660      	mov	r0, ip
 8000c46:	04db      	lsls	r3, r3, #19
 8000c48:	4318      	orrs	r0, r3
 8000c4a:	4684      	mov	ip, r0
 8000c4c:	2f1b      	cmp	r7, #27
 8000c4e:	dd56      	ble.n	8000cfe <__aeabi_fsub+0x2f6>
 8000c50:	2001      	movs	r0, #1
 8000c52:	000c      	movs	r4, r1
 8000c54:	0015      	movs	r5, r2
 8000c56:	1a30      	subs	r0, r6, r0
 8000c58:	e700      	b.n	8000a5c <__aeabi_fsub+0x54>
 8000c5a:	4663      	mov	r3, ip
 8000c5c:	1b9f      	subs	r7, r3, r6
 8000c5e:	017b      	lsls	r3, r7, #5
 8000c60:	d43d      	bmi.n	8000cde <__aeabi_fsub+0x2d6>
 8000c62:	2f00      	cmp	r7, #0
 8000c64:	d000      	beq.n	8000c68 <__aeabi_fsub+0x260>
 8000c66:	e6fe      	b.n	8000a66 <__aeabi_fsub+0x5e>
 8000c68:	2400      	movs	r4, #0
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e716      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000c70:	0005      	movs	r5, r0
 8000c72:	e7af      	b.n	8000bd4 <__aeabi_fsub+0x1cc>
 8000c74:	0032      	movs	r2, r6
 8000c76:	4643      	mov	r3, r8
 8000c78:	4641      	mov	r1, r8
 8000c7a:	40da      	lsrs	r2, r3
 8000c7c:	2320      	movs	r3, #32
 8000c7e:	1a5b      	subs	r3, r3, r1
 8000c80:	409e      	lsls	r6, r3
 8000c82:	0030      	movs	r0, r6
 8000c84:	1e43      	subs	r3, r0, #1
 8000c86:	4198      	sbcs	r0, r3
 8000c88:	4310      	orrs	r0, r2
 8000c8a:	e721      	b.n	8000ad0 <__aeabi_fsub+0xc8>
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d1a7      	bne.n	8000be0 <__aeabi_fsub+0x1d8>
 8000c90:	4663      	mov	r3, ip
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d059      	beq.n	8000d4a <__aeabi_fsub+0x342>
 8000c96:	2200      	movs	r2, #0
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_fsub+0x296>
 8000c9c:	e6ff      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000c9e:	0030      	movs	r0, r6
 8000ca0:	4460      	add	r0, ip
 8000ca2:	0143      	lsls	r3, r0, #5
 8000ca4:	d592      	bpl.n	8000bcc <__aeabi_fsub+0x1c4>
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <__aeabi_fsub+0x348>)
 8000ca8:	3501      	adds	r5, #1
 8000caa:	4018      	ands	r0, r3
 8000cac:	e78e      	b.n	8000bcc <__aeabi_fsub+0x1c4>
 8000cae:	4663      	mov	r3, ip
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d047      	beq.n	8000d44 <__aeabi_fsub+0x33c>
 8000cb4:	1e4b      	subs	r3, r1, #1
 8000cb6:	2901      	cmp	r1, #1
 8000cb8:	d015      	beq.n	8000ce6 <__aeabi_fsub+0x2de>
 8000cba:	29ff      	cmp	r1, #255	; 0xff
 8000cbc:	d02b      	beq.n	8000d16 <__aeabi_fsub+0x30e>
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	e74e      	b.n	8000b60 <__aeabi_fsub+0x158>
 8000cc2:	000c      	movs	r4, r1
 8000cc4:	464b      	mov	r3, r9
 8000cc6:	003d      	movs	r5, r7
 8000cc8:	e784      	b.n	8000bd4 <__aeabi_fsub+0x1cc>
 8000cca:	4662      	mov	r2, ip
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	d18b      	bne.n	8000be8 <__aeabi_fsub+0x1e0>
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d192      	bne.n	8000bfa <__aeabi_fsub+0x1f2>
 8000cd4:	2780      	movs	r7, #128	; 0x80
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	22ff      	movs	r2, #255	; 0xff
 8000cda:	03ff      	lsls	r7, r7, #15
 8000cdc:	e6df      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000cde:	4663      	mov	r3, ip
 8000ce0:	000c      	movs	r4, r1
 8000ce2:	1af7      	subs	r7, r6, r3
 8000ce4:	e6bf      	b.n	8000a66 <__aeabi_fsub+0x5e>
 8000ce6:	0030      	movs	r0, r6
 8000ce8:	4460      	add	r0, ip
 8000cea:	2501      	movs	r5, #1
 8000cec:	0143      	lsls	r3, r0, #5
 8000cee:	d400      	bmi.n	8000cf2 <__aeabi_fsub+0x2ea>
 8000cf0:	e76c      	b.n	8000bcc <__aeabi_fsub+0x1c4>
 8000cf2:	2502      	movs	r5, #2
 8000cf4:	e6f2      	b.n	8000adc <__aeabi_fsub+0xd4>
 8000cf6:	4663      	mov	r3, ip
 8000cf8:	2501      	movs	r5, #1
 8000cfa:	1b98      	subs	r0, r3, r6
 8000cfc:	e6ae      	b.n	8000a5c <__aeabi_fsub+0x54>
 8000cfe:	2320      	movs	r3, #32
 8000d00:	4664      	mov	r4, ip
 8000d02:	4660      	mov	r0, ip
 8000d04:	40fc      	lsrs	r4, r7
 8000d06:	1bdf      	subs	r7, r3, r7
 8000d08:	40b8      	lsls	r0, r7
 8000d0a:	1e43      	subs	r3, r0, #1
 8000d0c:	4198      	sbcs	r0, r3
 8000d0e:	4320      	orrs	r0, r4
 8000d10:	e79f      	b.n	8000c52 <__aeabi_fsub+0x24a>
 8000d12:	0005      	movs	r5, r0
 8000d14:	e75e      	b.n	8000bd4 <__aeabi_fsub+0x1cc>
 8000d16:	464b      	mov	r3, r9
 8000d18:	e771      	b.n	8000bfe <__aeabi_fsub+0x1f6>
 8000d1a:	2320      	movs	r3, #32
 8000d1c:	4665      	mov	r5, ip
 8000d1e:	4660      	mov	r0, ip
 8000d20:	40cd      	lsrs	r5, r1
 8000d22:	1a59      	subs	r1, r3, r1
 8000d24:	4088      	lsls	r0, r1
 8000d26:	1e43      	subs	r3, r0, #1
 8000d28:	4198      	sbcs	r0, r3
 8000d2a:	4328      	orrs	r0, r5
 8000d2c:	e71c      	b.n	8000b68 <__aeabi_fsub+0x160>
 8000d2e:	4663      	mov	r3, ip
 8000d30:	000c      	movs	r4, r1
 8000d32:	2501      	movs	r5, #1
 8000d34:	1af0      	subs	r0, r6, r3
 8000d36:	e691      	b.n	8000a5c <__aeabi_fsub+0x54>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d095      	beq.n	8000c68 <__aeabi_fsub+0x260>
 8000d3c:	000c      	movs	r4, r1
 8000d3e:	464f      	mov	r7, r9
 8000d40:	2200      	movs	r2, #0
 8000d42:	e6ac      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000d44:	464b      	mov	r3, r9
 8000d46:	000d      	movs	r5, r1
 8000d48:	e744      	b.n	8000bd4 <__aeabi_fsub+0x1cc>
 8000d4a:	464f      	mov	r7, r9
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	e6a6      	b.n	8000a9e <__aeabi_fsub+0x96>
 8000d50:	fbffffff 	.word	0xfbffffff
 8000d54:	7dffffff 	.word	0x7dffffff
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fsub+0x356>
 8000d5c:	e736      	b.n	8000bcc <__aeabi_fsub+0x1c4>
 8000d5e:	2400      	movs	r4, #0
 8000d60:	2700      	movs	r7, #0
 8000d62:	e69c      	b.n	8000a9e <__aeabi_fsub+0x96>

08000d64 <__aeabi_f2iz>:
 8000d64:	0241      	lsls	r1, r0, #9
 8000d66:	0042      	lsls	r2, r0, #1
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0a49      	lsrs	r1, r1, #9
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	2a7e      	cmp	r2, #126	; 0x7e
 8000d72:	dd03      	ble.n	8000d7c <__aeabi_f2iz+0x18>
 8000d74:	2a9d      	cmp	r2, #157	; 0x9d
 8000d76:	dd02      	ble.n	8000d7e <__aeabi_f2iz+0x1a>
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <__aeabi_f2iz+0x3c>)
 8000d7a:	1898      	adds	r0, r3, r2
 8000d7c:	4770      	bx	lr
 8000d7e:	2080      	movs	r0, #128	; 0x80
 8000d80:	0400      	lsls	r0, r0, #16
 8000d82:	4301      	orrs	r1, r0
 8000d84:	2a95      	cmp	r2, #149	; 0x95
 8000d86:	dc07      	bgt.n	8000d98 <__aeabi_f2iz+0x34>
 8000d88:	2096      	movs	r0, #150	; 0x96
 8000d8a:	1a82      	subs	r2, r0, r2
 8000d8c:	40d1      	lsrs	r1, r2
 8000d8e:	4248      	negs	r0, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f3      	bne.n	8000d7c <__aeabi_f2iz+0x18>
 8000d94:	0008      	movs	r0, r1
 8000d96:	e7f1      	b.n	8000d7c <__aeabi_f2iz+0x18>
 8000d98:	3a96      	subs	r2, #150	; 0x96
 8000d9a:	4091      	lsls	r1, r2
 8000d9c:	e7f7      	b.n	8000d8e <__aeabi_f2iz+0x2a>
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	7fffffff 	.word	0x7fffffff

08000da4 <__aeabi_i2f>:
 8000da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da6:	2800      	cmp	r0, #0
 8000da8:	d013      	beq.n	8000dd2 <__aeabi_i2f+0x2e>
 8000daa:	17c3      	asrs	r3, r0, #31
 8000dac:	18c6      	adds	r6, r0, r3
 8000dae:	405e      	eors	r6, r3
 8000db0:	0fc4      	lsrs	r4, r0, #31
 8000db2:	0030      	movs	r0, r6
 8000db4:	f001 fe8c 	bl	8002ad0 <__clzsi2>
 8000db8:	239e      	movs	r3, #158	; 0x9e
 8000dba:	0005      	movs	r5, r0
 8000dbc:	1a1b      	subs	r3, r3, r0
 8000dbe:	2b96      	cmp	r3, #150	; 0x96
 8000dc0:	dc0f      	bgt.n	8000de2 <__aeabi_i2f+0x3e>
 8000dc2:	2808      	cmp	r0, #8
 8000dc4:	dd01      	ble.n	8000dca <__aeabi_i2f+0x26>
 8000dc6:	3d08      	subs	r5, #8
 8000dc8:	40ae      	lsls	r6, r5
 8000dca:	0276      	lsls	r6, r6, #9
 8000dcc:	0a76      	lsrs	r6, r6, #9
 8000dce:	b2d8      	uxtb	r0, r3
 8000dd0:	e002      	b.n	8000dd8 <__aeabi_i2f+0x34>
 8000dd2:	2400      	movs	r4, #0
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	05c0      	lsls	r0, r0, #23
 8000dda:	4330      	orrs	r0, r6
 8000ddc:	07e4      	lsls	r4, r4, #31
 8000dde:	4320      	orrs	r0, r4
 8000de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000de2:	2b99      	cmp	r3, #153	; 0x99
 8000de4:	dd0c      	ble.n	8000e00 <__aeabi_i2f+0x5c>
 8000de6:	2205      	movs	r2, #5
 8000de8:	0031      	movs	r1, r6
 8000dea:	1a12      	subs	r2, r2, r0
 8000dec:	40d1      	lsrs	r1, r2
 8000dee:	000a      	movs	r2, r1
 8000df0:	0001      	movs	r1, r0
 8000df2:	0030      	movs	r0, r6
 8000df4:	311b      	adds	r1, #27
 8000df6:	4088      	lsls	r0, r1
 8000df8:	1e41      	subs	r1, r0, #1
 8000dfa:	4188      	sbcs	r0, r1
 8000dfc:	4302      	orrs	r2, r0
 8000dfe:	0016      	movs	r6, r2
 8000e00:	2d05      	cmp	r5, #5
 8000e02:	dc12      	bgt.n	8000e2a <__aeabi_i2f+0x86>
 8000e04:	0031      	movs	r1, r6
 8000e06:	4f0d      	ldr	r7, [pc, #52]	; (8000e3c <__aeabi_i2f+0x98>)
 8000e08:	4039      	ands	r1, r7
 8000e0a:	0772      	lsls	r2, r6, #29
 8000e0c:	d009      	beq.n	8000e22 <__aeabi_i2f+0x7e>
 8000e0e:	200f      	movs	r0, #15
 8000e10:	4030      	ands	r0, r6
 8000e12:	2804      	cmp	r0, #4
 8000e14:	d005      	beq.n	8000e22 <__aeabi_i2f+0x7e>
 8000e16:	3104      	adds	r1, #4
 8000e18:	014a      	lsls	r2, r1, #5
 8000e1a:	d502      	bpl.n	8000e22 <__aeabi_i2f+0x7e>
 8000e1c:	239f      	movs	r3, #159	; 0x9f
 8000e1e:	4039      	ands	r1, r7
 8000e20:	1b5b      	subs	r3, r3, r5
 8000e22:	0189      	lsls	r1, r1, #6
 8000e24:	0a4e      	lsrs	r6, r1, #9
 8000e26:	b2d8      	uxtb	r0, r3
 8000e28:	e7d6      	b.n	8000dd8 <__aeabi_i2f+0x34>
 8000e2a:	1f6a      	subs	r2, r5, #5
 8000e2c:	4096      	lsls	r6, r2
 8000e2e:	0031      	movs	r1, r6
 8000e30:	4f02      	ldr	r7, [pc, #8]	; (8000e3c <__aeabi_i2f+0x98>)
 8000e32:	4039      	ands	r1, r7
 8000e34:	0772      	lsls	r2, r6, #29
 8000e36:	d0f4      	beq.n	8000e22 <__aeabi_i2f+0x7e>
 8000e38:	e7e9      	b.n	8000e0e <__aeabi_i2f+0x6a>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	fbffffff 	.word	0xfbffffff

08000e40 <__aeabi_dadd>:
 8000e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e42:	464f      	mov	r7, r9
 8000e44:	4646      	mov	r6, r8
 8000e46:	46d6      	mov	lr, sl
 8000e48:	000d      	movs	r5, r1
 8000e4a:	0004      	movs	r4, r0
 8000e4c:	b5c0      	push	{r6, r7, lr}
 8000e4e:	001f      	movs	r7, r3
 8000e50:	0011      	movs	r1, r2
 8000e52:	0328      	lsls	r0, r5, #12
 8000e54:	0f62      	lsrs	r2, r4, #29
 8000e56:	0a40      	lsrs	r0, r0, #9
 8000e58:	4310      	orrs	r0, r2
 8000e5a:	007a      	lsls	r2, r7, #1
 8000e5c:	0d52      	lsrs	r2, r2, #21
 8000e5e:	00e3      	lsls	r3, r4, #3
 8000e60:	033c      	lsls	r4, r7, #12
 8000e62:	4691      	mov	r9, r2
 8000e64:	0a64      	lsrs	r4, r4, #9
 8000e66:	0ffa      	lsrs	r2, r7, #31
 8000e68:	0f4f      	lsrs	r7, r1, #29
 8000e6a:	006e      	lsls	r6, r5, #1
 8000e6c:	4327      	orrs	r7, r4
 8000e6e:	4692      	mov	sl, r2
 8000e70:	46b8      	mov	r8, r7
 8000e72:	0d76      	lsrs	r6, r6, #21
 8000e74:	0fed      	lsrs	r5, r5, #31
 8000e76:	00c9      	lsls	r1, r1, #3
 8000e78:	4295      	cmp	r5, r2
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_dadd+0x3e>
 8000e7c:	e099      	b.n	8000fb2 <__aeabi_dadd+0x172>
 8000e7e:	464c      	mov	r4, r9
 8000e80:	1b34      	subs	r4, r6, r4
 8000e82:	46a4      	mov	ip, r4
 8000e84:	2c00      	cmp	r4, #0
 8000e86:	dc00      	bgt.n	8000e8a <__aeabi_dadd+0x4a>
 8000e88:	e07c      	b.n	8000f84 <__aeabi_dadd+0x144>
 8000e8a:	464a      	mov	r2, r9
 8000e8c:	2a00      	cmp	r2, #0
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_dadd+0x52>
 8000e90:	e0b8      	b.n	8001004 <__aeabi_dadd+0x1c4>
 8000e92:	4ac5      	ldr	r2, [pc, #788]	; (80011a8 <__aeabi_dadd+0x368>)
 8000e94:	4296      	cmp	r6, r2
 8000e96:	d100      	bne.n	8000e9a <__aeabi_dadd+0x5a>
 8000e98:	e11c      	b.n	80010d4 <__aeabi_dadd+0x294>
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	003c      	movs	r4, r7
 8000e9e:	0412      	lsls	r2, r2, #16
 8000ea0:	4314      	orrs	r4, r2
 8000ea2:	46a0      	mov	r8, r4
 8000ea4:	4662      	mov	r2, ip
 8000ea6:	2a38      	cmp	r2, #56	; 0x38
 8000ea8:	dd00      	ble.n	8000eac <__aeabi_dadd+0x6c>
 8000eaa:	e161      	b.n	8001170 <__aeabi_dadd+0x330>
 8000eac:	2a1f      	cmp	r2, #31
 8000eae:	dd00      	ble.n	8000eb2 <__aeabi_dadd+0x72>
 8000eb0:	e1cc      	b.n	800124c <__aeabi_dadd+0x40c>
 8000eb2:	4664      	mov	r4, ip
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	1b12      	subs	r2, r2, r4
 8000eb8:	4644      	mov	r4, r8
 8000eba:	4094      	lsls	r4, r2
 8000ebc:	000f      	movs	r7, r1
 8000ebe:	46a1      	mov	r9, r4
 8000ec0:	4664      	mov	r4, ip
 8000ec2:	4091      	lsls	r1, r2
 8000ec4:	40e7      	lsrs	r7, r4
 8000ec6:	464c      	mov	r4, r9
 8000ec8:	1e4a      	subs	r2, r1, #1
 8000eca:	4191      	sbcs	r1, r2
 8000ecc:	433c      	orrs	r4, r7
 8000ece:	4642      	mov	r2, r8
 8000ed0:	4321      	orrs	r1, r4
 8000ed2:	4664      	mov	r4, ip
 8000ed4:	40e2      	lsrs	r2, r4
 8000ed6:	1a80      	subs	r0, r0, r2
 8000ed8:	1a5c      	subs	r4, r3, r1
 8000eda:	42a3      	cmp	r3, r4
 8000edc:	419b      	sbcs	r3, r3
 8000ede:	425f      	negs	r7, r3
 8000ee0:	1bc7      	subs	r7, r0, r7
 8000ee2:	023b      	lsls	r3, r7, #8
 8000ee4:	d400      	bmi.n	8000ee8 <__aeabi_dadd+0xa8>
 8000ee6:	e0d0      	b.n	800108a <__aeabi_dadd+0x24a>
 8000ee8:	027f      	lsls	r7, r7, #9
 8000eea:	0a7f      	lsrs	r7, r7, #9
 8000eec:	2f00      	cmp	r7, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_dadd+0xb2>
 8000ef0:	e0ff      	b.n	80010f2 <__aeabi_dadd+0x2b2>
 8000ef2:	0038      	movs	r0, r7
 8000ef4:	f001 fdec 	bl	8002ad0 <__clzsi2>
 8000ef8:	0001      	movs	r1, r0
 8000efa:	3908      	subs	r1, #8
 8000efc:	2320      	movs	r3, #32
 8000efe:	0022      	movs	r2, r4
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	408f      	lsls	r7, r1
 8000f04:	40da      	lsrs	r2, r3
 8000f06:	408c      	lsls	r4, r1
 8000f08:	4317      	orrs	r7, r2
 8000f0a:	42b1      	cmp	r1, r6
 8000f0c:	da00      	bge.n	8000f10 <__aeabi_dadd+0xd0>
 8000f0e:	e0ff      	b.n	8001110 <__aeabi_dadd+0x2d0>
 8000f10:	1b89      	subs	r1, r1, r6
 8000f12:	1c4b      	adds	r3, r1, #1
 8000f14:	2b1f      	cmp	r3, #31
 8000f16:	dd00      	ble.n	8000f1a <__aeabi_dadd+0xda>
 8000f18:	e0a8      	b.n	800106c <__aeabi_dadd+0x22c>
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	0039      	movs	r1, r7
 8000f1e:	1ad2      	subs	r2, r2, r3
 8000f20:	0020      	movs	r0, r4
 8000f22:	4094      	lsls	r4, r2
 8000f24:	4091      	lsls	r1, r2
 8000f26:	40d8      	lsrs	r0, r3
 8000f28:	1e62      	subs	r2, r4, #1
 8000f2a:	4194      	sbcs	r4, r2
 8000f2c:	40df      	lsrs	r7, r3
 8000f2e:	2600      	movs	r6, #0
 8000f30:	4301      	orrs	r1, r0
 8000f32:	430c      	orrs	r4, r1
 8000f34:	0763      	lsls	r3, r4, #29
 8000f36:	d009      	beq.n	8000f4c <__aeabi_dadd+0x10c>
 8000f38:	230f      	movs	r3, #15
 8000f3a:	4023      	ands	r3, r4
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d005      	beq.n	8000f4c <__aeabi_dadd+0x10c>
 8000f40:	1d23      	adds	r3, r4, #4
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	41a4      	sbcs	r4, r4
 8000f46:	4264      	negs	r4, r4
 8000f48:	193f      	adds	r7, r7, r4
 8000f4a:	001c      	movs	r4, r3
 8000f4c:	023b      	lsls	r3, r7, #8
 8000f4e:	d400      	bmi.n	8000f52 <__aeabi_dadd+0x112>
 8000f50:	e09e      	b.n	8001090 <__aeabi_dadd+0x250>
 8000f52:	4b95      	ldr	r3, [pc, #596]	; (80011a8 <__aeabi_dadd+0x368>)
 8000f54:	3601      	adds	r6, #1
 8000f56:	429e      	cmp	r6, r3
 8000f58:	d100      	bne.n	8000f5c <__aeabi_dadd+0x11c>
 8000f5a:	e0b7      	b.n	80010cc <__aeabi_dadd+0x28c>
 8000f5c:	4a93      	ldr	r2, [pc, #588]	; (80011ac <__aeabi_dadd+0x36c>)
 8000f5e:	08e4      	lsrs	r4, r4, #3
 8000f60:	4017      	ands	r7, r2
 8000f62:	077b      	lsls	r3, r7, #29
 8000f64:	0571      	lsls	r1, r6, #21
 8000f66:	027f      	lsls	r7, r7, #9
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	0b3f      	lsrs	r7, r7, #12
 8000f6c:	0d4a      	lsrs	r2, r1, #21
 8000f6e:	0512      	lsls	r2, r2, #20
 8000f70:	433a      	orrs	r2, r7
 8000f72:	07ed      	lsls	r5, r5, #31
 8000f74:	432a      	orrs	r2, r5
 8000f76:	0018      	movs	r0, r3
 8000f78:	0011      	movs	r1, r2
 8000f7a:	bce0      	pop	{r5, r6, r7}
 8000f7c:	46ba      	mov	sl, r7
 8000f7e:	46b1      	mov	r9, r6
 8000f80:	46a8      	mov	r8, r5
 8000f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d04b      	beq.n	8001020 <__aeabi_dadd+0x1e0>
 8000f88:	464c      	mov	r4, r9
 8000f8a:	1ba4      	subs	r4, r4, r6
 8000f8c:	46a4      	mov	ip, r4
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	d000      	beq.n	8000f94 <__aeabi_dadd+0x154>
 8000f92:	e123      	b.n	80011dc <__aeabi_dadd+0x39c>
 8000f94:	0004      	movs	r4, r0
 8000f96:	431c      	orrs	r4, r3
 8000f98:	d100      	bne.n	8000f9c <__aeabi_dadd+0x15c>
 8000f9a:	e1af      	b.n	80012fc <__aeabi_dadd+0x4bc>
 8000f9c:	4662      	mov	r2, ip
 8000f9e:	1e54      	subs	r4, r2, #1
 8000fa0:	2a01      	cmp	r2, #1
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dadd+0x166>
 8000fa4:	e215      	b.n	80013d2 <__aeabi_dadd+0x592>
 8000fa6:	4d80      	ldr	r5, [pc, #512]	; (80011a8 <__aeabi_dadd+0x368>)
 8000fa8:	45ac      	cmp	ip, r5
 8000faa:	d100      	bne.n	8000fae <__aeabi_dadd+0x16e>
 8000fac:	e1c8      	b.n	8001340 <__aeabi_dadd+0x500>
 8000fae:	46a4      	mov	ip, r4
 8000fb0:	e11b      	b.n	80011ea <__aeabi_dadd+0x3aa>
 8000fb2:	464a      	mov	r2, r9
 8000fb4:	1ab2      	subs	r2, r6, r2
 8000fb6:	4694      	mov	ip, r2
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	dc00      	bgt.n	8000fbe <__aeabi_dadd+0x17e>
 8000fbc:	e0ac      	b.n	8001118 <__aeabi_dadd+0x2d8>
 8000fbe:	464a      	mov	r2, r9
 8000fc0:	2a00      	cmp	r2, #0
 8000fc2:	d043      	beq.n	800104c <__aeabi_dadd+0x20c>
 8000fc4:	4a78      	ldr	r2, [pc, #480]	; (80011a8 <__aeabi_dadd+0x368>)
 8000fc6:	4296      	cmp	r6, r2
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_dadd+0x18c>
 8000fca:	e1af      	b.n	800132c <__aeabi_dadd+0x4ec>
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	003c      	movs	r4, r7
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	4314      	orrs	r4, r2
 8000fd4:	46a0      	mov	r8, r4
 8000fd6:	4662      	mov	r2, ip
 8000fd8:	2a38      	cmp	r2, #56	; 0x38
 8000fda:	dc67      	bgt.n	80010ac <__aeabi_dadd+0x26c>
 8000fdc:	2a1f      	cmp	r2, #31
 8000fde:	dc00      	bgt.n	8000fe2 <__aeabi_dadd+0x1a2>
 8000fe0:	e15f      	b.n	80012a2 <__aeabi_dadd+0x462>
 8000fe2:	4647      	mov	r7, r8
 8000fe4:	3a20      	subs	r2, #32
 8000fe6:	40d7      	lsrs	r7, r2
 8000fe8:	4662      	mov	r2, ip
 8000fea:	2a20      	cmp	r2, #32
 8000fec:	d005      	beq.n	8000ffa <__aeabi_dadd+0x1ba>
 8000fee:	4664      	mov	r4, ip
 8000ff0:	2240      	movs	r2, #64	; 0x40
 8000ff2:	1b12      	subs	r2, r2, r4
 8000ff4:	4644      	mov	r4, r8
 8000ff6:	4094      	lsls	r4, r2
 8000ff8:	4321      	orrs	r1, r4
 8000ffa:	1e4a      	subs	r2, r1, #1
 8000ffc:	4191      	sbcs	r1, r2
 8000ffe:	000c      	movs	r4, r1
 8001000:	433c      	orrs	r4, r7
 8001002:	e057      	b.n	80010b4 <__aeabi_dadd+0x274>
 8001004:	003a      	movs	r2, r7
 8001006:	430a      	orrs	r2, r1
 8001008:	d100      	bne.n	800100c <__aeabi_dadd+0x1cc>
 800100a:	e105      	b.n	8001218 <__aeabi_dadd+0x3d8>
 800100c:	0022      	movs	r2, r4
 800100e:	3a01      	subs	r2, #1
 8001010:	2c01      	cmp	r4, #1
 8001012:	d100      	bne.n	8001016 <__aeabi_dadd+0x1d6>
 8001014:	e182      	b.n	800131c <__aeabi_dadd+0x4dc>
 8001016:	4c64      	ldr	r4, [pc, #400]	; (80011a8 <__aeabi_dadd+0x368>)
 8001018:	45a4      	cmp	ip, r4
 800101a:	d05b      	beq.n	80010d4 <__aeabi_dadd+0x294>
 800101c:	4694      	mov	ip, r2
 800101e:	e741      	b.n	8000ea4 <__aeabi_dadd+0x64>
 8001020:	4c63      	ldr	r4, [pc, #396]	; (80011b0 <__aeabi_dadd+0x370>)
 8001022:	1c77      	adds	r7, r6, #1
 8001024:	4227      	tst	r7, r4
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x1ea>
 8001028:	e0c4      	b.n	80011b4 <__aeabi_dadd+0x374>
 800102a:	0004      	movs	r4, r0
 800102c:	431c      	orrs	r4, r3
 800102e:	2e00      	cmp	r6, #0
 8001030:	d000      	beq.n	8001034 <__aeabi_dadd+0x1f4>
 8001032:	e169      	b.n	8001308 <__aeabi_dadd+0x4c8>
 8001034:	2c00      	cmp	r4, #0
 8001036:	d100      	bne.n	800103a <__aeabi_dadd+0x1fa>
 8001038:	e1bf      	b.n	80013ba <__aeabi_dadd+0x57a>
 800103a:	4644      	mov	r4, r8
 800103c:	430c      	orrs	r4, r1
 800103e:	d000      	beq.n	8001042 <__aeabi_dadd+0x202>
 8001040:	e1d0      	b.n	80013e4 <__aeabi_dadd+0x5a4>
 8001042:	0742      	lsls	r2, r0, #29
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	4313      	orrs	r3, r2
 8001048:	08c0      	lsrs	r0, r0, #3
 800104a:	e029      	b.n	80010a0 <__aeabi_dadd+0x260>
 800104c:	003a      	movs	r2, r7
 800104e:	430a      	orrs	r2, r1
 8001050:	d100      	bne.n	8001054 <__aeabi_dadd+0x214>
 8001052:	e170      	b.n	8001336 <__aeabi_dadd+0x4f6>
 8001054:	4662      	mov	r2, ip
 8001056:	4664      	mov	r4, ip
 8001058:	3a01      	subs	r2, #1
 800105a:	2c01      	cmp	r4, #1
 800105c:	d100      	bne.n	8001060 <__aeabi_dadd+0x220>
 800105e:	e0e0      	b.n	8001222 <__aeabi_dadd+0x3e2>
 8001060:	4c51      	ldr	r4, [pc, #324]	; (80011a8 <__aeabi_dadd+0x368>)
 8001062:	45a4      	cmp	ip, r4
 8001064:	d100      	bne.n	8001068 <__aeabi_dadd+0x228>
 8001066:	e161      	b.n	800132c <__aeabi_dadd+0x4ec>
 8001068:	4694      	mov	ip, r2
 800106a:	e7b4      	b.n	8000fd6 <__aeabi_dadd+0x196>
 800106c:	003a      	movs	r2, r7
 800106e:	391f      	subs	r1, #31
 8001070:	40ca      	lsrs	r2, r1
 8001072:	0011      	movs	r1, r2
 8001074:	2b20      	cmp	r3, #32
 8001076:	d003      	beq.n	8001080 <__aeabi_dadd+0x240>
 8001078:	2240      	movs	r2, #64	; 0x40
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	409f      	lsls	r7, r3
 800107e:	433c      	orrs	r4, r7
 8001080:	1e63      	subs	r3, r4, #1
 8001082:	419c      	sbcs	r4, r3
 8001084:	2700      	movs	r7, #0
 8001086:	2600      	movs	r6, #0
 8001088:	430c      	orrs	r4, r1
 800108a:	0763      	lsls	r3, r4, #29
 800108c:	d000      	beq.n	8001090 <__aeabi_dadd+0x250>
 800108e:	e753      	b.n	8000f38 <__aeabi_dadd+0xf8>
 8001090:	46b4      	mov	ip, r6
 8001092:	08e4      	lsrs	r4, r4, #3
 8001094:	077b      	lsls	r3, r7, #29
 8001096:	4323      	orrs	r3, r4
 8001098:	08f8      	lsrs	r0, r7, #3
 800109a:	4a43      	ldr	r2, [pc, #268]	; (80011a8 <__aeabi_dadd+0x368>)
 800109c:	4594      	cmp	ip, r2
 800109e:	d01d      	beq.n	80010dc <__aeabi_dadd+0x29c>
 80010a0:	4662      	mov	r2, ip
 80010a2:	0307      	lsls	r7, r0, #12
 80010a4:	0552      	lsls	r2, r2, #21
 80010a6:	0b3f      	lsrs	r7, r7, #12
 80010a8:	0d52      	lsrs	r2, r2, #21
 80010aa:	e760      	b.n	8000f6e <__aeabi_dadd+0x12e>
 80010ac:	4644      	mov	r4, r8
 80010ae:	430c      	orrs	r4, r1
 80010b0:	1e62      	subs	r2, r4, #1
 80010b2:	4194      	sbcs	r4, r2
 80010b4:	18e4      	adds	r4, r4, r3
 80010b6:	429c      	cmp	r4, r3
 80010b8:	419b      	sbcs	r3, r3
 80010ba:	425f      	negs	r7, r3
 80010bc:	183f      	adds	r7, r7, r0
 80010be:	023b      	lsls	r3, r7, #8
 80010c0:	d5e3      	bpl.n	800108a <__aeabi_dadd+0x24a>
 80010c2:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <__aeabi_dadd+0x368>)
 80010c4:	3601      	adds	r6, #1
 80010c6:	429e      	cmp	r6, r3
 80010c8:	d000      	beq.n	80010cc <__aeabi_dadd+0x28c>
 80010ca:	e0b5      	b.n	8001238 <__aeabi_dadd+0x3f8>
 80010cc:	0032      	movs	r2, r6
 80010ce:	2700      	movs	r7, #0
 80010d0:	2300      	movs	r3, #0
 80010d2:	e74c      	b.n	8000f6e <__aeabi_dadd+0x12e>
 80010d4:	0742      	lsls	r2, r0, #29
 80010d6:	08db      	lsrs	r3, r3, #3
 80010d8:	4313      	orrs	r3, r2
 80010da:	08c0      	lsrs	r0, r0, #3
 80010dc:	001a      	movs	r2, r3
 80010de:	4302      	orrs	r2, r0
 80010e0:	d100      	bne.n	80010e4 <__aeabi_dadd+0x2a4>
 80010e2:	e1e1      	b.n	80014a8 <__aeabi_dadd+0x668>
 80010e4:	2780      	movs	r7, #128	; 0x80
 80010e6:	033f      	lsls	r7, r7, #12
 80010e8:	4307      	orrs	r7, r0
 80010ea:	033f      	lsls	r7, r7, #12
 80010ec:	4a2e      	ldr	r2, [pc, #184]	; (80011a8 <__aeabi_dadd+0x368>)
 80010ee:	0b3f      	lsrs	r7, r7, #12
 80010f0:	e73d      	b.n	8000f6e <__aeabi_dadd+0x12e>
 80010f2:	0020      	movs	r0, r4
 80010f4:	f001 fcec 	bl	8002ad0 <__clzsi2>
 80010f8:	0001      	movs	r1, r0
 80010fa:	3118      	adds	r1, #24
 80010fc:	291f      	cmp	r1, #31
 80010fe:	dc00      	bgt.n	8001102 <__aeabi_dadd+0x2c2>
 8001100:	e6fc      	b.n	8000efc <__aeabi_dadd+0xbc>
 8001102:	3808      	subs	r0, #8
 8001104:	4084      	lsls	r4, r0
 8001106:	0027      	movs	r7, r4
 8001108:	2400      	movs	r4, #0
 800110a:	42b1      	cmp	r1, r6
 800110c:	db00      	blt.n	8001110 <__aeabi_dadd+0x2d0>
 800110e:	e6ff      	b.n	8000f10 <__aeabi_dadd+0xd0>
 8001110:	4a26      	ldr	r2, [pc, #152]	; (80011ac <__aeabi_dadd+0x36c>)
 8001112:	1a76      	subs	r6, r6, r1
 8001114:	4017      	ands	r7, r2
 8001116:	e70d      	b.n	8000f34 <__aeabi_dadd+0xf4>
 8001118:	2a00      	cmp	r2, #0
 800111a:	d02f      	beq.n	800117c <__aeabi_dadd+0x33c>
 800111c:	464a      	mov	r2, r9
 800111e:	1b92      	subs	r2, r2, r6
 8001120:	4694      	mov	ip, r2
 8001122:	2e00      	cmp	r6, #0
 8001124:	d100      	bne.n	8001128 <__aeabi_dadd+0x2e8>
 8001126:	e0ad      	b.n	8001284 <__aeabi_dadd+0x444>
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <__aeabi_dadd+0x368>)
 800112a:	4591      	cmp	r9, r2
 800112c:	d100      	bne.n	8001130 <__aeabi_dadd+0x2f0>
 800112e:	e10f      	b.n	8001350 <__aeabi_dadd+0x510>
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	0412      	lsls	r2, r2, #16
 8001134:	4310      	orrs	r0, r2
 8001136:	4662      	mov	r2, ip
 8001138:	2a38      	cmp	r2, #56	; 0x38
 800113a:	dd00      	ble.n	800113e <__aeabi_dadd+0x2fe>
 800113c:	e10f      	b.n	800135e <__aeabi_dadd+0x51e>
 800113e:	2a1f      	cmp	r2, #31
 8001140:	dd00      	ble.n	8001144 <__aeabi_dadd+0x304>
 8001142:	e180      	b.n	8001446 <__aeabi_dadd+0x606>
 8001144:	4664      	mov	r4, ip
 8001146:	2220      	movs	r2, #32
 8001148:	001e      	movs	r6, r3
 800114a:	1b12      	subs	r2, r2, r4
 800114c:	4667      	mov	r7, ip
 800114e:	0004      	movs	r4, r0
 8001150:	4093      	lsls	r3, r2
 8001152:	4094      	lsls	r4, r2
 8001154:	40fe      	lsrs	r6, r7
 8001156:	1e5a      	subs	r2, r3, #1
 8001158:	4193      	sbcs	r3, r2
 800115a:	40f8      	lsrs	r0, r7
 800115c:	4334      	orrs	r4, r6
 800115e:	431c      	orrs	r4, r3
 8001160:	4480      	add	r8, r0
 8001162:	1864      	adds	r4, r4, r1
 8001164:	428c      	cmp	r4, r1
 8001166:	41bf      	sbcs	r7, r7
 8001168:	427f      	negs	r7, r7
 800116a:	464e      	mov	r6, r9
 800116c:	4447      	add	r7, r8
 800116e:	e7a6      	b.n	80010be <__aeabi_dadd+0x27e>
 8001170:	4642      	mov	r2, r8
 8001172:	430a      	orrs	r2, r1
 8001174:	0011      	movs	r1, r2
 8001176:	1e4a      	subs	r2, r1, #1
 8001178:	4191      	sbcs	r1, r2
 800117a:	e6ad      	b.n	8000ed8 <__aeabi_dadd+0x98>
 800117c:	4c0c      	ldr	r4, [pc, #48]	; (80011b0 <__aeabi_dadd+0x370>)
 800117e:	1c72      	adds	r2, r6, #1
 8001180:	4222      	tst	r2, r4
 8001182:	d000      	beq.n	8001186 <__aeabi_dadd+0x346>
 8001184:	e0a1      	b.n	80012ca <__aeabi_dadd+0x48a>
 8001186:	0002      	movs	r2, r0
 8001188:	431a      	orrs	r2, r3
 800118a:	2e00      	cmp	r6, #0
 800118c:	d000      	beq.n	8001190 <__aeabi_dadd+0x350>
 800118e:	e0fa      	b.n	8001386 <__aeabi_dadd+0x546>
 8001190:	2a00      	cmp	r2, #0
 8001192:	d100      	bne.n	8001196 <__aeabi_dadd+0x356>
 8001194:	e145      	b.n	8001422 <__aeabi_dadd+0x5e2>
 8001196:	003a      	movs	r2, r7
 8001198:	430a      	orrs	r2, r1
 800119a:	d000      	beq.n	800119e <__aeabi_dadd+0x35e>
 800119c:	e146      	b.n	800142c <__aeabi_dadd+0x5ec>
 800119e:	0742      	lsls	r2, r0, #29
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	08c0      	lsrs	r0, r0, #3
 80011a6:	e77b      	b.n	80010a0 <__aeabi_dadd+0x260>
 80011a8:	000007ff 	.word	0x000007ff
 80011ac:	ff7fffff 	.word	0xff7fffff
 80011b0:	000007fe 	.word	0x000007fe
 80011b4:	4647      	mov	r7, r8
 80011b6:	1a5c      	subs	r4, r3, r1
 80011b8:	1bc2      	subs	r2, r0, r7
 80011ba:	42a3      	cmp	r3, r4
 80011bc:	41bf      	sbcs	r7, r7
 80011be:	427f      	negs	r7, r7
 80011c0:	46b9      	mov	r9, r7
 80011c2:	0017      	movs	r7, r2
 80011c4:	464a      	mov	r2, r9
 80011c6:	1abf      	subs	r7, r7, r2
 80011c8:	023a      	lsls	r2, r7, #8
 80011ca:	d500      	bpl.n	80011ce <__aeabi_dadd+0x38e>
 80011cc:	e08d      	b.n	80012ea <__aeabi_dadd+0x4aa>
 80011ce:	0023      	movs	r3, r4
 80011d0:	433b      	orrs	r3, r7
 80011d2:	d000      	beq.n	80011d6 <__aeabi_dadd+0x396>
 80011d4:	e68a      	b.n	8000eec <__aeabi_dadd+0xac>
 80011d6:	2000      	movs	r0, #0
 80011d8:	2500      	movs	r5, #0
 80011da:	e761      	b.n	80010a0 <__aeabi_dadd+0x260>
 80011dc:	4cb4      	ldr	r4, [pc, #720]	; (80014b0 <__aeabi_dadd+0x670>)
 80011de:	45a1      	cmp	r9, r4
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x3a4>
 80011e2:	e0ad      	b.n	8001340 <__aeabi_dadd+0x500>
 80011e4:	2480      	movs	r4, #128	; 0x80
 80011e6:	0424      	lsls	r4, r4, #16
 80011e8:	4320      	orrs	r0, r4
 80011ea:	4664      	mov	r4, ip
 80011ec:	2c38      	cmp	r4, #56	; 0x38
 80011ee:	dc3d      	bgt.n	800126c <__aeabi_dadd+0x42c>
 80011f0:	4662      	mov	r2, ip
 80011f2:	2c1f      	cmp	r4, #31
 80011f4:	dd00      	ble.n	80011f8 <__aeabi_dadd+0x3b8>
 80011f6:	e0b7      	b.n	8001368 <__aeabi_dadd+0x528>
 80011f8:	2520      	movs	r5, #32
 80011fa:	001e      	movs	r6, r3
 80011fc:	1b2d      	subs	r5, r5, r4
 80011fe:	0004      	movs	r4, r0
 8001200:	40ab      	lsls	r3, r5
 8001202:	40ac      	lsls	r4, r5
 8001204:	40d6      	lsrs	r6, r2
 8001206:	40d0      	lsrs	r0, r2
 8001208:	4642      	mov	r2, r8
 800120a:	1e5d      	subs	r5, r3, #1
 800120c:	41ab      	sbcs	r3, r5
 800120e:	4334      	orrs	r4, r6
 8001210:	1a12      	subs	r2, r2, r0
 8001212:	4690      	mov	r8, r2
 8001214:	4323      	orrs	r3, r4
 8001216:	e02c      	b.n	8001272 <__aeabi_dadd+0x432>
 8001218:	0742      	lsls	r2, r0, #29
 800121a:	08db      	lsrs	r3, r3, #3
 800121c:	4313      	orrs	r3, r2
 800121e:	08c0      	lsrs	r0, r0, #3
 8001220:	e73b      	b.n	800109a <__aeabi_dadd+0x25a>
 8001222:	185c      	adds	r4, r3, r1
 8001224:	429c      	cmp	r4, r3
 8001226:	419b      	sbcs	r3, r3
 8001228:	4440      	add	r0, r8
 800122a:	425b      	negs	r3, r3
 800122c:	18c7      	adds	r7, r0, r3
 800122e:	2601      	movs	r6, #1
 8001230:	023b      	lsls	r3, r7, #8
 8001232:	d400      	bmi.n	8001236 <__aeabi_dadd+0x3f6>
 8001234:	e729      	b.n	800108a <__aeabi_dadd+0x24a>
 8001236:	2602      	movs	r6, #2
 8001238:	4a9e      	ldr	r2, [pc, #632]	; (80014b4 <__aeabi_dadd+0x674>)
 800123a:	0863      	lsrs	r3, r4, #1
 800123c:	4017      	ands	r7, r2
 800123e:	2201      	movs	r2, #1
 8001240:	4014      	ands	r4, r2
 8001242:	431c      	orrs	r4, r3
 8001244:	07fb      	lsls	r3, r7, #31
 8001246:	431c      	orrs	r4, r3
 8001248:	087f      	lsrs	r7, r7, #1
 800124a:	e673      	b.n	8000f34 <__aeabi_dadd+0xf4>
 800124c:	4644      	mov	r4, r8
 800124e:	3a20      	subs	r2, #32
 8001250:	40d4      	lsrs	r4, r2
 8001252:	4662      	mov	r2, ip
 8001254:	2a20      	cmp	r2, #32
 8001256:	d005      	beq.n	8001264 <__aeabi_dadd+0x424>
 8001258:	4667      	mov	r7, ip
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	1bd2      	subs	r2, r2, r7
 800125e:	4647      	mov	r7, r8
 8001260:	4097      	lsls	r7, r2
 8001262:	4339      	orrs	r1, r7
 8001264:	1e4a      	subs	r2, r1, #1
 8001266:	4191      	sbcs	r1, r2
 8001268:	4321      	orrs	r1, r4
 800126a:	e635      	b.n	8000ed8 <__aeabi_dadd+0x98>
 800126c:	4303      	orrs	r3, r0
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	4183      	sbcs	r3, r0
 8001272:	1acc      	subs	r4, r1, r3
 8001274:	42a1      	cmp	r1, r4
 8001276:	41bf      	sbcs	r7, r7
 8001278:	4643      	mov	r3, r8
 800127a:	427f      	negs	r7, r7
 800127c:	4655      	mov	r5, sl
 800127e:	464e      	mov	r6, r9
 8001280:	1bdf      	subs	r7, r3, r7
 8001282:	e62e      	b.n	8000ee2 <__aeabi_dadd+0xa2>
 8001284:	0002      	movs	r2, r0
 8001286:	431a      	orrs	r2, r3
 8001288:	d100      	bne.n	800128c <__aeabi_dadd+0x44c>
 800128a:	e0bd      	b.n	8001408 <__aeabi_dadd+0x5c8>
 800128c:	4662      	mov	r2, ip
 800128e:	4664      	mov	r4, ip
 8001290:	3a01      	subs	r2, #1
 8001292:	2c01      	cmp	r4, #1
 8001294:	d100      	bne.n	8001298 <__aeabi_dadd+0x458>
 8001296:	e0e5      	b.n	8001464 <__aeabi_dadd+0x624>
 8001298:	4c85      	ldr	r4, [pc, #532]	; (80014b0 <__aeabi_dadd+0x670>)
 800129a:	45a4      	cmp	ip, r4
 800129c:	d058      	beq.n	8001350 <__aeabi_dadd+0x510>
 800129e:	4694      	mov	ip, r2
 80012a0:	e749      	b.n	8001136 <__aeabi_dadd+0x2f6>
 80012a2:	4664      	mov	r4, ip
 80012a4:	2220      	movs	r2, #32
 80012a6:	1b12      	subs	r2, r2, r4
 80012a8:	4644      	mov	r4, r8
 80012aa:	4094      	lsls	r4, r2
 80012ac:	000f      	movs	r7, r1
 80012ae:	46a1      	mov	r9, r4
 80012b0:	4664      	mov	r4, ip
 80012b2:	4091      	lsls	r1, r2
 80012b4:	40e7      	lsrs	r7, r4
 80012b6:	464c      	mov	r4, r9
 80012b8:	1e4a      	subs	r2, r1, #1
 80012ba:	4191      	sbcs	r1, r2
 80012bc:	433c      	orrs	r4, r7
 80012be:	4642      	mov	r2, r8
 80012c0:	430c      	orrs	r4, r1
 80012c2:	4661      	mov	r1, ip
 80012c4:	40ca      	lsrs	r2, r1
 80012c6:	1880      	adds	r0, r0, r2
 80012c8:	e6f4      	b.n	80010b4 <__aeabi_dadd+0x274>
 80012ca:	4c79      	ldr	r4, [pc, #484]	; (80014b0 <__aeabi_dadd+0x670>)
 80012cc:	42a2      	cmp	r2, r4
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dadd+0x492>
 80012d0:	e6fd      	b.n	80010ce <__aeabi_dadd+0x28e>
 80012d2:	1859      	adds	r1, r3, r1
 80012d4:	4299      	cmp	r1, r3
 80012d6:	419b      	sbcs	r3, r3
 80012d8:	4440      	add	r0, r8
 80012da:	425f      	negs	r7, r3
 80012dc:	19c7      	adds	r7, r0, r7
 80012de:	07fc      	lsls	r4, r7, #31
 80012e0:	0849      	lsrs	r1, r1, #1
 80012e2:	0016      	movs	r6, r2
 80012e4:	430c      	orrs	r4, r1
 80012e6:	087f      	lsrs	r7, r7, #1
 80012e8:	e6cf      	b.n	800108a <__aeabi_dadd+0x24a>
 80012ea:	1acc      	subs	r4, r1, r3
 80012ec:	42a1      	cmp	r1, r4
 80012ee:	41bf      	sbcs	r7, r7
 80012f0:	4643      	mov	r3, r8
 80012f2:	427f      	negs	r7, r7
 80012f4:	1a18      	subs	r0, r3, r0
 80012f6:	4655      	mov	r5, sl
 80012f8:	1bc7      	subs	r7, r0, r7
 80012fa:	e5f7      	b.n	8000eec <__aeabi_dadd+0xac>
 80012fc:	08c9      	lsrs	r1, r1, #3
 80012fe:	077b      	lsls	r3, r7, #29
 8001300:	4655      	mov	r5, sl
 8001302:	430b      	orrs	r3, r1
 8001304:	08f8      	lsrs	r0, r7, #3
 8001306:	e6c8      	b.n	800109a <__aeabi_dadd+0x25a>
 8001308:	2c00      	cmp	r4, #0
 800130a:	d000      	beq.n	800130e <__aeabi_dadd+0x4ce>
 800130c:	e081      	b.n	8001412 <__aeabi_dadd+0x5d2>
 800130e:	4643      	mov	r3, r8
 8001310:	430b      	orrs	r3, r1
 8001312:	d115      	bne.n	8001340 <__aeabi_dadd+0x500>
 8001314:	2080      	movs	r0, #128	; 0x80
 8001316:	2500      	movs	r5, #0
 8001318:	0300      	lsls	r0, r0, #12
 800131a:	e6e3      	b.n	80010e4 <__aeabi_dadd+0x2a4>
 800131c:	1a5c      	subs	r4, r3, r1
 800131e:	42a3      	cmp	r3, r4
 8001320:	419b      	sbcs	r3, r3
 8001322:	1bc7      	subs	r7, r0, r7
 8001324:	425b      	negs	r3, r3
 8001326:	2601      	movs	r6, #1
 8001328:	1aff      	subs	r7, r7, r3
 800132a:	e5da      	b.n	8000ee2 <__aeabi_dadd+0xa2>
 800132c:	0742      	lsls	r2, r0, #29
 800132e:	08db      	lsrs	r3, r3, #3
 8001330:	4313      	orrs	r3, r2
 8001332:	08c0      	lsrs	r0, r0, #3
 8001334:	e6d2      	b.n	80010dc <__aeabi_dadd+0x29c>
 8001336:	0742      	lsls	r2, r0, #29
 8001338:	08db      	lsrs	r3, r3, #3
 800133a:	4313      	orrs	r3, r2
 800133c:	08c0      	lsrs	r0, r0, #3
 800133e:	e6ac      	b.n	800109a <__aeabi_dadd+0x25a>
 8001340:	4643      	mov	r3, r8
 8001342:	4642      	mov	r2, r8
 8001344:	08c9      	lsrs	r1, r1, #3
 8001346:	075b      	lsls	r3, r3, #29
 8001348:	4655      	mov	r5, sl
 800134a:	430b      	orrs	r3, r1
 800134c:	08d0      	lsrs	r0, r2, #3
 800134e:	e6c5      	b.n	80010dc <__aeabi_dadd+0x29c>
 8001350:	4643      	mov	r3, r8
 8001352:	4642      	mov	r2, r8
 8001354:	075b      	lsls	r3, r3, #29
 8001356:	08c9      	lsrs	r1, r1, #3
 8001358:	430b      	orrs	r3, r1
 800135a:	08d0      	lsrs	r0, r2, #3
 800135c:	e6be      	b.n	80010dc <__aeabi_dadd+0x29c>
 800135e:	4303      	orrs	r3, r0
 8001360:	001c      	movs	r4, r3
 8001362:	1e63      	subs	r3, r4, #1
 8001364:	419c      	sbcs	r4, r3
 8001366:	e6fc      	b.n	8001162 <__aeabi_dadd+0x322>
 8001368:	0002      	movs	r2, r0
 800136a:	3c20      	subs	r4, #32
 800136c:	40e2      	lsrs	r2, r4
 800136e:	0014      	movs	r4, r2
 8001370:	4662      	mov	r2, ip
 8001372:	2a20      	cmp	r2, #32
 8001374:	d003      	beq.n	800137e <__aeabi_dadd+0x53e>
 8001376:	2540      	movs	r5, #64	; 0x40
 8001378:	1aad      	subs	r5, r5, r2
 800137a:	40a8      	lsls	r0, r5
 800137c:	4303      	orrs	r3, r0
 800137e:	1e58      	subs	r0, r3, #1
 8001380:	4183      	sbcs	r3, r0
 8001382:	4323      	orrs	r3, r4
 8001384:	e775      	b.n	8001272 <__aeabi_dadd+0x432>
 8001386:	2a00      	cmp	r2, #0
 8001388:	d0e2      	beq.n	8001350 <__aeabi_dadd+0x510>
 800138a:	003a      	movs	r2, r7
 800138c:	430a      	orrs	r2, r1
 800138e:	d0cd      	beq.n	800132c <__aeabi_dadd+0x4ec>
 8001390:	0742      	lsls	r2, r0, #29
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	4313      	orrs	r3, r2
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	08c0      	lsrs	r0, r0, #3
 800139a:	0312      	lsls	r2, r2, #12
 800139c:	4210      	tst	r0, r2
 800139e:	d006      	beq.n	80013ae <__aeabi_dadd+0x56e>
 80013a0:	08fc      	lsrs	r4, r7, #3
 80013a2:	4214      	tst	r4, r2
 80013a4:	d103      	bne.n	80013ae <__aeabi_dadd+0x56e>
 80013a6:	0020      	movs	r0, r4
 80013a8:	08cb      	lsrs	r3, r1, #3
 80013aa:	077a      	lsls	r2, r7, #29
 80013ac:	4313      	orrs	r3, r2
 80013ae:	0f5a      	lsrs	r2, r3, #29
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	0752      	lsls	r2, r2, #29
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	e690      	b.n	80010dc <__aeabi_dadd+0x29c>
 80013ba:	4643      	mov	r3, r8
 80013bc:	430b      	orrs	r3, r1
 80013be:	d100      	bne.n	80013c2 <__aeabi_dadd+0x582>
 80013c0:	e709      	b.n	80011d6 <__aeabi_dadd+0x396>
 80013c2:	4643      	mov	r3, r8
 80013c4:	4642      	mov	r2, r8
 80013c6:	08c9      	lsrs	r1, r1, #3
 80013c8:	075b      	lsls	r3, r3, #29
 80013ca:	4655      	mov	r5, sl
 80013cc:	430b      	orrs	r3, r1
 80013ce:	08d0      	lsrs	r0, r2, #3
 80013d0:	e666      	b.n	80010a0 <__aeabi_dadd+0x260>
 80013d2:	1acc      	subs	r4, r1, r3
 80013d4:	42a1      	cmp	r1, r4
 80013d6:	4189      	sbcs	r1, r1
 80013d8:	1a3f      	subs	r7, r7, r0
 80013da:	4249      	negs	r1, r1
 80013dc:	4655      	mov	r5, sl
 80013de:	2601      	movs	r6, #1
 80013e0:	1a7f      	subs	r7, r7, r1
 80013e2:	e57e      	b.n	8000ee2 <__aeabi_dadd+0xa2>
 80013e4:	4642      	mov	r2, r8
 80013e6:	1a5c      	subs	r4, r3, r1
 80013e8:	1a87      	subs	r7, r0, r2
 80013ea:	42a3      	cmp	r3, r4
 80013ec:	4192      	sbcs	r2, r2
 80013ee:	4252      	negs	r2, r2
 80013f0:	1abf      	subs	r7, r7, r2
 80013f2:	023a      	lsls	r2, r7, #8
 80013f4:	d53d      	bpl.n	8001472 <__aeabi_dadd+0x632>
 80013f6:	1acc      	subs	r4, r1, r3
 80013f8:	42a1      	cmp	r1, r4
 80013fa:	4189      	sbcs	r1, r1
 80013fc:	4643      	mov	r3, r8
 80013fe:	4249      	negs	r1, r1
 8001400:	1a1f      	subs	r7, r3, r0
 8001402:	4655      	mov	r5, sl
 8001404:	1a7f      	subs	r7, r7, r1
 8001406:	e595      	b.n	8000f34 <__aeabi_dadd+0xf4>
 8001408:	077b      	lsls	r3, r7, #29
 800140a:	08c9      	lsrs	r1, r1, #3
 800140c:	430b      	orrs	r3, r1
 800140e:	08f8      	lsrs	r0, r7, #3
 8001410:	e643      	b.n	800109a <__aeabi_dadd+0x25a>
 8001412:	4644      	mov	r4, r8
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	430c      	orrs	r4, r1
 8001418:	d130      	bne.n	800147c <__aeabi_dadd+0x63c>
 800141a:	0742      	lsls	r2, r0, #29
 800141c:	4313      	orrs	r3, r2
 800141e:	08c0      	lsrs	r0, r0, #3
 8001420:	e65c      	b.n	80010dc <__aeabi_dadd+0x29c>
 8001422:	077b      	lsls	r3, r7, #29
 8001424:	08c9      	lsrs	r1, r1, #3
 8001426:	430b      	orrs	r3, r1
 8001428:	08f8      	lsrs	r0, r7, #3
 800142a:	e639      	b.n	80010a0 <__aeabi_dadd+0x260>
 800142c:	185c      	adds	r4, r3, r1
 800142e:	429c      	cmp	r4, r3
 8001430:	419b      	sbcs	r3, r3
 8001432:	4440      	add	r0, r8
 8001434:	425b      	negs	r3, r3
 8001436:	18c7      	adds	r7, r0, r3
 8001438:	023b      	lsls	r3, r7, #8
 800143a:	d400      	bmi.n	800143e <__aeabi_dadd+0x5fe>
 800143c:	e625      	b.n	800108a <__aeabi_dadd+0x24a>
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <__aeabi_dadd+0x674>)
 8001440:	2601      	movs	r6, #1
 8001442:	401f      	ands	r7, r3
 8001444:	e621      	b.n	800108a <__aeabi_dadd+0x24a>
 8001446:	0004      	movs	r4, r0
 8001448:	3a20      	subs	r2, #32
 800144a:	40d4      	lsrs	r4, r2
 800144c:	4662      	mov	r2, ip
 800144e:	2a20      	cmp	r2, #32
 8001450:	d004      	beq.n	800145c <__aeabi_dadd+0x61c>
 8001452:	2240      	movs	r2, #64	; 0x40
 8001454:	4666      	mov	r6, ip
 8001456:	1b92      	subs	r2, r2, r6
 8001458:	4090      	lsls	r0, r2
 800145a:	4303      	orrs	r3, r0
 800145c:	1e5a      	subs	r2, r3, #1
 800145e:	4193      	sbcs	r3, r2
 8001460:	431c      	orrs	r4, r3
 8001462:	e67e      	b.n	8001162 <__aeabi_dadd+0x322>
 8001464:	185c      	adds	r4, r3, r1
 8001466:	428c      	cmp	r4, r1
 8001468:	4189      	sbcs	r1, r1
 800146a:	4440      	add	r0, r8
 800146c:	4249      	negs	r1, r1
 800146e:	1847      	adds	r7, r0, r1
 8001470:	e6dd      	b.n	800122e <__aeabi_dadd+0x3ee>
 8001472:	0023      	movs	r3, r4
 8001474:	433b      	orrs	r3, r7
 8001476:	d100      	bne.n	800147a <__aeabi_dadd+0x63a>
 8001478:	e6ad      	b.n	80011d6 <__aeabi_dadd+0x396>
 800147a:	e606      	b.n	800108a <__aeabi_dadd+0x24a>
 800147c:	0744      	lsls	r4, r0, #29
 800147e:	4323      	orrs	r3, r4
 8001480:	2480      	movs	r4, #128	; 0x80
 8001482:	08c0      	lsrs	r0, r0, #3
 8001484:	0324      	lsls	r4, r4, #12
 8001486:	4220      	tst	r0, r4
 8001488:	d008      	beq.n	800149c <__aeabi_dadd+0x65c>
 800148a:	4642      	mov	r2, r8
 800148c:	08d6      	lsrs	r6, r2, #3
 800148e:	4226      	tst	r6, r4
 8001490:	d104      	bne.n	800149c <__aeabi_dadd+0x65c>
 8001492:	4655      	mov	r5, sl
 8001494:	0030      	movs	r0, r6
 8001496:	08cb      	lsrs	r3, r1, #3
 8001498:	0751      	lsls	r1, r2, #29
 800149a:	430b      	orrs	r3, r1
 800149c:	0f5a      	lsrs	r2, r3, #29
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	08db      	lsrs	r3, r3, #3
 80014a2:	0752      	lsls	r2, r2, #29
 80014a4:	4313      	orrs	r3, r2
 80014a6:	e619      	b.n	80010dc <__aeabi_dadd+0x29c>
 80014a8:	2300      	movs	r3, #0
 80014aa:	4a01      	ldr	r2, [pc, #4]	; (80014b0 <__aeabi_dadd+0x670>)
 80014ac:	001f      	movs	r7, r3
 80014ae:	e55e      	b.n	8000f6e <__aeabi_dadd+0x12e>
 80014b0:	000007ff 	.word	0x000007ff
 80014b4:	ff7fffff 	.word	0xff7fffff

080014b8 <__aeabi_ddiv>:
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	4657      	mov	r7, sl
 80014bc:	464e      	mov	r6, r9
 80014be:	4645      	mov	r5, r8
 80014c0:	46de      	mov	lr, fp
 80014c2:	b5e0      	push	{r5, r6, r7, lr}
 80014c4:	4681      	mov	r9, r0
 80014c6:	0005      	movs	r5, r0
 80014c8:	030c      	lsls	r4, r1, #12
 80014ca:	0048      	lsls	r0, r1, #1
 80014cc:	4692      	mov	sl, r2
 80014ce:	001f      	movs	r7, r3
 80014d0:	b085      	sub	sp, #20
 80014d2:	0b24      	lsrs	r4, r4, #12
 80014d4:	0d40      	lsrs	r0, r0, #21
 80014d6:	0fce      	lsrs	r6, r1, #31
 80014d8:	2800      	cmp	r0, #0
 80014da:	d100      	bne.n	80014de <__aeabi_ddiv+0x26>
 80014dc:	e156      	b.n	800178c <__aeabi_ddiv+0x2d4>
 80014de:	4bd4      	ldr	r3, [pc, #848]	; (8001830 <__aeabi_ddiv+0x378>)
 80014e0:	4298      	cmp	r0, r3
 80014e2:	d100      	bne.n	80014e6 <__aeabi_ddiv+0x2e>
 80014e4:	e172      	b.n	80017cc <__aeabi_ddiv+0x314>
 80014e6:	0f6b      	lsrs	r3, r5, #29
 80014e8:	00e4      	lsls	r4, r4, #3
 80014ea:	431c      	orrs	r4, r3
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	4323      	orrs	r3, r4
 80014f2:	4698      	mov	r8, r3
 80014f4:	4bcf      	ldr	r3, [pc, #828]	; (8001834 <__aeabi_ddiv+0x37c>)
 80014f6:	00ed      	lsls	r5, r5, #3
 80014f8:	469b      	mov	fp, r3
 80014fa:	2300      	movs	r3, #0
 80014fc:	4699      	mov	r9, r3
 80014fe:	4483      	add	fp, r0
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	033c      	lsls	r4, r7, #12
 8001504:	007b      	lsls	r3, r7, #1
 8001506:	4650      	mov	r0, sl
 8001508:	0b24      	lsrs	r4, r4, #12
 800150a:	0d5b      	lsrs	r3, r3, #21
 800150c:	0fff      	lsrs	r7, r7, #31
 800150e:	2b00      	cmp	r3, #0
 8001510:	d100      	bne.n	8001514 <__aeabi_ddiv+0x5c>
 8001512:	e11f      	b.n	8001754 <__aeabi_ddiv+0x29c>
 8001514:	4ac6      	ldr	r2, [pc, #792]	; (8001830 <__aeabi_ddiv+0x378>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d100      	bne.n	800151c <__aeabi_ddiv+0x64>
 800151a:	e162      	b.n	80017e2 <__aeabi_ddiv+0x32a>
 800151c:	49c5      	ldr	r1, [pc, #788]	; (8001834 <__aeabi_ddiv+0x37c>)
 800151e:	0f42      	lsrs	r2, r0, #29
 8001520:	468c      	mov	ip, r1
 8001522:	00e4      	lsls	r4, r4, #3
 8001524:	4659      	mov	r1, fp
 8001526:	4314      	orrs	r4, r2
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	4463      	add	r3, ip
 800152c:	0412      	lsls	r2, r2, #16
 800152e:	1acb      	subs	r3, r1, r3
 8001530:	4314      	orrs	r4, r2
 8001532:	469b      	mov	fp, r3
 8001534:	00c2      	lsls	r2, r0, #3
 8001536:	2000      	movs	r0, #0
 8001538:	0033      	movs	r3, r6
 800153a:	407b      	eors	r3, r7
 800153c:	469a      	mov	sl, r3
 800153e:	464b      	mov	r3, r9
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d827      	bhi.n	8001594 <__aeabi_ddiv+0xdc>
 8001544:	49bc      	ldr	r1, [pc, #752]	; (8001838 <__aeabi_ddiv+0x380>)
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	58cb      	ldr	r3, [r1, r3]
 800154a:	469f      	mov	pc, r3
 800154c:	46b2      	mov	sl, r6
 800154e:	9b00      	ldr	r3, [sp, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d016      	beq.n	8001582 <__aeabi_ddiv+0xca>
 8001554:	2b03      	cmp	r3, #3
 8001556:	d100      	bne.n	800155a <__aeabi_ddiv+0xa2>
 8001558:	e28e      	b.n	8001a78 <__aeabi_ddiv+0x5c0>
 800155a:	2b01      	cmp	r3, #1
 800155c:	d000      	beq.n	8001560 <__aeabi_ddiv+0xa8>
 800155e:	e0d9      	b.n	8001714 <__aeabi_ddiv+0x25c>
 8001560:	2300      	movs	r3, #0
 8001562:	2400      	movs	r4, #0
 8001564:	2500      	movs	r5, #0
 8001566:	4652      	mov	r2, sl
 8001568:	051b      	lsls	r3, r3, #20
 800156a:	4323      	orrs	r3, r4
 800156c:	07d2      	lsls	r2, r2, #31
 800156e:	4313      	orrs	r3, r2
 8001570:	0028      	movs	r0, r5
 8001572:	0019      	movs	r1, r3
 8001574:	b005      	add	sp, #20
 8001576:	bcf0      	pop	{r4, r5, r6, r7}
 8001578:	46bb      	mov	fp, r7
 800157a:	46b2      	mov	sl, r6
 800157c:	46a9      	mov	r9, r5
 800157e:	46a0      	mov	r8, r4
 8001580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001582:	2400      	movs	r4, #0
 8001584:	2500      	movs	r5, #0
 8001586:	4baa      	ldr	r3, [pc, #680]	; (8001830 <__aeabi_ddiv+0x378>)
 8001588:	e7ed      	b.n	8001566 <__aeabi_ddiv+0xae>
 800158a:	46ba      	mov	sl, r7
 800158c:	46a0      	mov	r8, r4
 800158e:	0015      	movs	r5, r2
 8001590:	9000      	str	r0, [sp, #0]
 8001592:	e7dc      	b.n	800154e <__aeabi_ddiv+0x96>
 8001594:	4544      	cmp	r4, r8
 8001596:	d200      	bcs.n	800159a <__aeabi_ddiv+0xe2>
 8001598:	e1c7      	b.n	800192a <__aeabi_ddiv+0x472>
 800159a:	d100      	bne.n	800159e <__aeabi_ddiv+0xe6>
 800159c:	e1c2      	b.n	8001924 <__aeabi_ddiv+0x46c>
 800159e:	2301      	movs	r3, #1
 80015a0:	425b      	negs	r3, r3
 80015a2:	469c      	mov	ip, r3
 80015a4:	002e      	movs	r6, r5
 80015a6:	4640      	mov	r0, r8
 80015a8:	2500      	movs	r5, #0
 80015aa:	44e3      	add	fp, ip
 80015ac:	0223      	lsls	r3, r4, #8
 80015ae:	0e14      	lsrs	r4, r2, #24
 80015b0:	431c      	orrs	r4, r3
 80015b2:	0c1b      	lsrs	r3, r3, #16
 80015b4:	4699      	mov	r9, r3
 80015b6:	0423      	lsls	r3, r4, #16
 80015b8:	0c1f      	lsrs	r7, r3, #16
 80015ba:	0212      	lsls	r2, r2, #8
 80015bc:	4649      	mov	r1, r9
 80015be:	9200      	str	r2, [sp, #0]
 80015c0:	9701      	str	r7, [sp, #4]
 80015c2:	f7fe fe2f 	bl	8000224 <__aeabi_uidivmod>
 80015c6:	0002      	movs	r2, r0
 80015c8:	437a      	muls	r2, r7
 80015ca:	040b      	lsls	r3, r1, #16
 80015cc:	0c31      	lsrs	r1, r6, #16
 80015ce:	4680      	mov	r8, r0
 80015d0:	4319      	orrs	r1, r3
 80015d2:	428a      	cmp	r2, r1
 80015d4:	d907      	bls.n	80015e6 <__aeabi_ddiv+0x12e>
 80015d6:	2301      	movs	r3, #1
 80015d8:	425b      	negs	r3, r3
 80015da:	469c      	mov	ip, r3
 80015dc:	1909      	adds	r1, r1, r4
 80015de:	44e0      	add	r8, ip
 80015e0:	428c      	cmp	r4, r1
 80015e2:	d800      	bhi.n	80015e6 <__aeabi_ddiv+0x12e>
 80015e4:	e207      	b.n	80019f6 <__aeabi_ddiv+0x53e>
 80015e6:	1a88      	subs	r0, r1, r2
 80015e8:	4649      	mov	r1, r9
 80015ea:	f7fe fe1b 	bl	8000224 <__aeabi_uidivmod>
 80015ee:	0409      	lsls	r1, r1, #16
 80015f0:	468c      	mov	ip, r1
 80015f2:	0431      	lsls	r1, r6, #16
 80015f4:	4666      	mov	r6, ip
 80015f6:	9a01      	ldr	r2, [sp, #4]
 80015f8:	0c09      	lsrs	r1, r1, #16
 80015fa:	4342      	muls	r2, r0
 80015fc:	0003      	movs	r3, r0
 80015fe:	4331      	orrs	r1, r6
 8001600:	428a      	cmp	r2, r1
 8001602:	d904      	bls.n	800160e <__aeabi_ddiv+0x156>
 8001604:	1909      	adds	r1, r1, r4
 8001606:	3b01      	subs	r3, #1
 8001608:	428c      	cmp	r4, r1
 800160a:	d800      	bhi.n	800160e <__aeabi_ddiv+0x156>
 800160c:	e1ed      	b.n	80019ea <__aeabi_ddiv+0x532>
 800160e:	1a88      	subs	r0, r1, r2
 8001610:	4642      	mov	r2, r8
 8001612:	0412      	lsls	r2, r2, #16
 8001614:	431a      	orrs	r2, r3
 8001616:	4690      	mov	r8, r2
 8001618:	4641      	mov	r1, r8
 800161a:	9b00      	ldr	r3, [sp, #0]
 800161c:	040e      	lsls	r6, r1, #16
 800161e:	0c1b      	lsrs	r3, r3, #16
 8001620:	001f      	movs	r7, r3
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	9b00      	ldr	r3, [sp, #0]
 8001626:	0c36      	lsrs	r6, r6, #16
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	0c19      	lsrs	r1, r3, #16
 800162c:	000b      	movs	r3, r1
 800162e:	4373      	muls	r3, r6
 8001630:	0c12      	lsrs	r2, r2, #16
 8001632:	437e      	muls	r6, r7
 8001634:	9103      	str	r1, [sp, #12]
 8001636:	4351      	muls	r1, r2
 8001638:	437a      	muls	r2, r7
 800163a:	0c1f      	lsrs	r7, r3, #16
 800163c:	46bc      	mov	ip, r7
 800163e:	1876      	adds	r6, r6, r1
 8001640:	4466      	add	r6, ip
 8001642:	42b1      	cmp	r1, r6
 8001644:	d903      	bls.n	800164e <__aeabi_ddiv+0x196>
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	0249      	lsls	r1, r1, #9
 800164a:	468c      	mov	ip, r1
 800164c:	4462      	add	r2, ip
 800164e:	0c31      	lsrs	r1, r6, #16
 8001650:	188a      	adds	r2, r1, r2
 8001652:	0431      	lsls	r1, r6, #16
 8001654:	041e      	lsls	r6, r3, #16
 8001656:	0c36      	lsrs	r6, r6, #16
 8001658:	198e      	adds	r6, r1, r6
 800165a:	4290      	cmp	r0, r2
 800165c:	d302      	bcc.n	8001664 <__aeabi_ddiv+0x1ac>
 800165e:	d112      	bne.n	8001686 <__aeabi_ddiv+0x1ce>
 8001660:	42b5      	cmp	r5, r6
 8001662:	d210      	bcs.n	8001686 <__aeabi_ddiv+0x1ce>
 8001664:	4643      	mov	r3, r8
 8001666:	1e59      	subs	r1, r3, #1
 8001668:	9b00      	ldr	r3, [sp, #0]
 800166a:	469c      	mov	ip, r3
 800166c:	4465      	add	r5, ip
 800166e:	001f      	movs	r7, r3
 8001670:	429d      	cmp	r5, r3
 8001672:	419b      	sbcs	r3, r3
 8001674:	425b      	negs	r3, r3
 8001676:	191b      	adds	r3, r3, r4
 8001678:	18c0      	adds	r0, r0, r3
 800167a:	4284      	cmp	r4, r0
 800167c:	d200      	bcs.n	8001680 <__aeabi_ddiv+0x1c8>
 800167e:	e1a0      	b.n	80019c2 <__aeabi_ddiv+0x50a>
 8001680:	d100      	bne.n	8001684 <__aeabi_ddiv+0x1cc>
 8001682:	e19b      	b.n	80019bc <__aeabi_ddiv+0x504>
 8001684:	4688      	mov	r8, r1
 8001686:	1bae      	subs	r6, r5, r6
 8001688:	42b5      	cmp	r5, r6
 800168a:	41ad      	sbcs	r5, r5
 800168c:	1a80      	subs	r0, r0, r2
 800168e:	426d      	negs	r5, r5
 8001690:	1b40      	subs	r0, r0, r5
 8001692:	4284      	cmp	r4, r0
 8001694:	d100      	bne.n	8001698 <__aeabi_ddiv+0x1e0>
 8001696:	e1d5      	b.n	8001a44 <__aeabi_ddiv+0x58c>
 8001698:	4649      	mov	r1, r9
 800169a:	f7fe fdc3 	bl	8000224 <__aeabi_uidivmod>
 800169e:	9a01      	ldr	r2, [sp, #4]
 80016a0:	040b      	lsls	r3, r1, #16
 80016a2:	4342      	muls	r2, r0
 80016a4:	0c31      	lsrs	r1, r6, #16
 80016a6:	0005      	movs	r5, r0
 80016a8:	4319      	orrs	r1, r3
 80016aa:	428a      	cmp	r2, r1
 80016ac:	d900      	bls.n	80016b0 <__aeabi_ddiv+0x1f8>
 80016ae:	e16c      	b.n	800198a <__aeabi_ddiv+0x4d2>
 80016b0:	1a88      	subs	r0, r1, r2
 80016b2:	4649      	mov	r1, r9
 80016b4:	f7fe fdb6 	bl	8000224 <__aeabi_uidivmod>
 80016b8:	9a01      	ldr	r2, [sp, #4]
 80016ba:	0436      	lsls	r6, r6, #16
 80016bc:	4342      	muls	r2, r0
 80016be:	0409      	lsls	r1, r1, #16
 80016c0:	0c36      	lsrs	r6, r6, #16
 80016c2:	0003      	movs	r3, r0
 80016c4:	430e      	orrs	r6, r1
 80016c6:	42b2      	cmp	r2, r6
 80016c8:	d900      	bls.n	80016cc <__aeabi_ddiv+0x214>
 80016ca:	e153      	b.n	8001974 <__aeabi_ddiv+0x4bc>
 80016cc:	9803      	ldr	r0, [sp, #12]
 80016ce:	1ab6      	subs	r6, r6, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	042d      	lsls	r5, r5, #16
 80016d4:	431d      	orrs	r5, r3
 80016d6:	9f02      	ldr	r7, [sp, #8]
 80016d8:	042b      	lsls	r3, r5, #16
 80016da:	0c1b      	lsrs	r3, r3, #16
 80016dc:	435a      	muls	r2, r3
 80016de:	437b      	muls	r3, r7
 80016e0:	469c      	mov	ip, r3
 80016e2:	0c29      	lsrs	r1, r5, #16
 80016e4:	4348      	muls	r0, r1
 80016e6:	0c13      	lsrs	r3, r2, #16
 80016e8:	4484      	add	ip, r0
 80016ea:	4463      	add	r3, ip
 80016ec:	4379      	muls	r1, r7
 80016ee:	4298      	cmp	r0, r3
 80016f0:	d903      	bls.n	80016fa <__aeabi_ddiv+0x242>
 80016f2:	2080      	movs	r0, #128	; 0x80
 80016f4:	0240      	lsls	r0, r0, #9
 80016f6:	4684      	mov	ip, r0
 80016f8:	4461      	add	r1, ip
 80016fa:	0c18      	lsrs	r0, r3, #16
 80016fc:	0412      	lsls	r2, r2, #16
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	0c12      	lsrs	r2, r2, #16
 8001702:	1841      	adds	r1, r0, r1
 8001704:	189b      	adds	r3, r3, r2
 8001706:	428e      	cmp	r6, r1
 8001708:	d200      	bcs.n	800170c <__aeabi_ddiv+0x254>
 800170a:	e0ff      	b.n	800190c <__aeabi_ddiv+0x454>
 800170c:	d100      	bne.n	8001710 <__aeabi_ddiv+0x258>
 800170e:	e0fa      	b.n	8001906 <__aeabi_ddiv+0x44e>
 8001710:	2301      	movs	r3, #1
 8001712:	431d      	orrs	r5, r3
 8001714:	4a49      	ldr	r2, [pc, #292]	; (800183c <__aeabi_ddiv+0x384>)
 8001716:	445a      	add	r2, fp
 8001718:	2a00      	cmp	r2, #0
 800171a:	dc00      	bgt.n	800171e <__aeabi_ddiv+0x266>
 800171c:	e0aa      	b.n	8001874 <__aeabi_ddiv+0x3bc>
 800171e:	076b      	lsls	r3, r5, #29
 8001720:	d000      	beq.n	8001724 <__aeabi_ddiv+0x26c>
 8001722:	e13d      	b.n	80019a0 <__aeabi_ddiv+0x4e8>
 8001724:	08ed      	lsrs	r5, r5, #3
 8001726:	4643      	mov	r3, r8
 8001728:	01db      	lsls	r3, r3, #7
 800172a:	d506      	bpl.n	800173a <__aeabi_ddiv+0x282>
 800172c:	4642      	mov	r2, r8
 800172e:	4b44      	ldr	r3, [pc, #272]	; (8001840 <__aeabi_ddiv+0x388>)
 8001730:	401a      	ands	r2, r3
 8001732:	4690      	mov	r8, r2
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	00d2      	lsls	r2, r2, #3
 8001738:	445a      	add	r2, fp
 800173a:	4b42      	ldr	r3, [pc, #264]	; (8001844 <__aeabi_ddiv+0x38c>)
 800173c:	429a      	cmp	r2, r3
 800173e:	dd00      	ble.n	8001742 <__aeabi_ddiv+0x28a>
 8001740:	e71f      	b.n	8001582 <__aeabi_ddiv+0xca>
 8001742:	4643      	mov	r3, r8
 8001744:	075b      	lsls	r3, r3, #29
 8001746:	431d      	orrs	r5, r3
 8001748:	4643      	mov	r3, r8
 800174a:	0552      	lsls	r2, r2, #21
 800174c:	025c      	lsls	r4, r3, #9
 800174e:	0b24      	lsrs	r4, r4, #12
 8001750:	0d53      	lsrs	r3, r2, #21
 8001752:	e708      	b.n	8001566 <__aeabi_ddiv+0xae>
 8001754:	4652      	mov	r2, sl
 8001756:	4322      	orrs	r2, r4
 8001758:	d100      	bne.n	800175c <__aeabi_ddiv+0x2a4>
 800175a:	e07b      	b.n	8001854 <__aeabi_ddiv+0x39c>
 800175c:	2c00      	cmp	r4, #0
 800175e:	d100      	bne.n	8001762 <__aeabi_ddiv+0x2aa>
 8001760:	e0fa      	b.n	8001958 <__aeabi_ddiv+0x4a0>
 8001762:	0020      	movs	r0, r4
 8001764:	f001 f9b4 	bl	8002ad0 <__clzsi2>
 8001768:	0002      	movs	r2, r0
 800176a:	3a0b      	subs	r2, #11
 800176c:	231d      	movs	r3, #29
 800176e:	0001      	movs	r1, r0
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	4652      	mov	r2, sl
 8001774:	3908      	subs	r1, #8
 8001776:	40da      	lsrs	r2, r3
 8001778:	408c      	lsls	r4, r1
 800177a:	4314      	orrs	r4, r2
 800177c:	4652      	mov	r2, sl
 800177e:	408a      	lsls	r2, r1
 8001780:	4b31      	ldr	r3, [pc, #196]	; (8001848 <__aeabi_ddiv+0x390>)
 8001782:	4458      	add	r0, fp
 8001784:	469b      	mov	fp, r3
 8001786:	4483      	add	fp, r0
 8001788:	2000      	movs	r0, #0
 800178a:	e6d5      	b.n	8001538 <__aeabi_ddiv+0x80>
 800178c:	464b      	mov	r3, r9
 800178e:	4323      	orrs	r3, r4
 8001790:	4698      	mov	r8, r3
 8001792:	d044      	beq.n	800181e <__aeabi_ddiv+0x366>
 8001794:	2c00      	cmp	r4, #0
 8001796:	d100      	bne.n	800179a <__aeabi_ddiv+0x2e2>
 8001798:	e0ce      	b.n	8001938 <__aeabi_ddiv+0x480>
 800179a:	0020      	movs	r0, r4
 800179c:	f001 f998 	bl	8002ad0 <__clzsi2>
 80017a0:	0001      	movs	r1, r0
 80017a2:	0002      	movs	r2, r0
 80017a4:	390b      	subs	r1, #11
 80017a6:	231d      	movs	r3, #29
 80017a8:	1a5b      	subs	r3, r3, r1
 80017aa:	4649      	mov	r1, r9
 80017ac:	0010      	movs	r0, r2
 80017ae:	40d9      	lsrs	r1, r3
 80017b0:	3808      	subs	r0, #8
 80017b2:	4084      	lsls	r4, r0
 80017b4:	000b      	movs	r3, r1
 80017b6:	464d      	mov	r5, r9
 80017b8:	4323      	orrs	r3, r4
 80017ba:	4698      	mov	r8, r3
 80017bc:	4085      	lsls	r5, r0
 80017be:	4823      	ldr	r0, [pc, #140]	; (800184c <__aeabi_ddiv+0x394>)
 80017c0:	1a83      	subs	r3, r0, r2
 80017c2:	469b      	mov	fp, r3
 80017c4:	2300      	movs	r3, #0
 80017c6:	4699      	mov	r9, r3
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	e69a      	b.n	8001502 <__aeabi_ddiv+0x4a>
 80017cc:	464b      	mov	r3, r9
 80017ce:	4323      	orrs	r3, r4
 80017d0:	4698      	mov	r8, r3
 80017d2:	d11d      	bne.n	8001810 <__aeabi_ddiv+0x358>
 80017d4:	2308      	movs	r3, #8
 80017d6:	4699      	mov	r9, r3
 80017d8:	3b06      	subs	r3, #6
 80017da:	2500      	movs	r5, #0
 80017dc:	4683      	mov	fp, r0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	e68f      	b.n	8001502 <__aeabi_ddiv+0x4a>
 80017e2:	4652      	mov	r2, sl
 80017e4:	4322      	orrs	r2, r4
 80017e6:	d109      	bne.n	80017fc <__aeabi_ddiv+0x344>
 80017e8:	2302      	movs	r3, #2
 80017ea:	4649      	mov	r1, r9
 80017ec:	4319      	orrs	r1, r3
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <__aeabi_ddiv+0x398>)
 80017f0:	4689      	mov	r9, r1
 80017f2:	469c      	mov	ip, r3
 80017f4:	2400      	movs	r4, #0
 80017f6:	2002      	movs	r0, #2
 80017f8:	44e3      	add	fp, ip
 80017fa:	e69d      	b.n	8001538 <__aeabi_ddiv+0x80>
 80017fc:	2303      	movs	r3, #3
 80017fe:	464a      	mov	r2, r9
 8001800:	431a      	orrs	r2, r3
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <__aeabi_ddiv+0x398>)
 8001804:	4691      	mov	r9, r2
 8001806:	469c      	mov	ip, r3
 8001808:	4652      	mov	r2, sl
 800180a:	2003      	movs	r0, #3
 800180c:	44e3      	add	fp, ip
 800180e:	e693      	b.n	8001538 <__aeabi_ddiv+0x80>
 8001810:	230c      	movs	r3, #12
 8001812:	4699      	mov	r9, r3
 8001814:	3b09      	subs	r3, #9
 8001816:	46a0      	mov	r8, r4
 8001818:	4683      	mov	fp, r0
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	e671      	b.n	8001502 <__aeabi_ddiv+0x4a>
 800181e:	2304      	movs	r3, #4
 8001820:	4699      	mov	r9, r3
 8001822:	2300      	movs	r3, #0
 8001824:	469b      	mov	fp, r3
 8001826:	3301      	adds	r3, #1
 8001828:	2500      	movs	r5, #0
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	e669      	b.n	8001502 <__aeabi_ddiv+0x4a>
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	000007ff 	.word	0x000007ff
 8001834:	fffffc01 	.word	0xfffffc01
 8001838:	08008eb8 	.word	0x08008eb8
 800183c:	000003ff 	.word	0x000003ff
 8001840:	feffffff 	.word	0xfeffffff
 8001844:	000007fe 	.word	0x000007fe
 8001848:	000003f3 	.word	0x000003f3
 800184c:	fffffc0d 	.word	0xfffffc0d
 8001850:	fffff801 	.word	0xfffff801
 8001854:	4649      	mov	r1, r9
 8001856:	2301      	movs	r3, #1
 8001858:	4319      	orrs	r1, r3
 800185a:	4689      	mov	r9, r1
 800185c:	2400      	movs	r4, #0
 800185e:	2001      	movs	r0, #1
 8001860:	e66a      	b.n	8001538 <__aeabi_ddiv+0x80>
 8001862:	2300      	movs	r3, #0
 8001864:	2480      	movs	r4, #128	; 0x80
 8001866:	469a      	mov	sl, r3
 8001868:	2500      	movs	r5, #0
 800186a:	4b8a      	ldr	r3, [pc, #552]	; (8001a94 <__aeabi_ddiv+0x5dc>)
 800186c:	0324      	lsls	r4, r4, #12
 800186e:	e67a      	b.n	8001566 <__aeabi_ddiv+0xae>
 8001870:	2501      	movs	r5, #1
 8001872:	426d      	negs	r5, r5
 8001874:	2301      	movs	r3, #1
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	2b38      	cmp	r3, #56	; 0x38
 800187a:	dd00      	ble.n	800187e <__aeabi_ddiv+0x3c6>
 800187c:	e670      	b.n	8001560 <__aeabi_ddiv+0xa8>
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dc00      	bgt.n	8001884 <__aeabi_ddiv+0x3cc>
 8001882:	e0bf      	b.n	8001a04 <__aeabi_ddiv+0x54c>
 8001884:	211f      	movs	r1, #31
 8001886:	4249      	negs	r1, r1
 8001888:	1a8a      	subs	r2, r1, r2
 800188a:	4641      	mov	r1, r8
 800188c:	40d1      	lsrs	r1, r2
 800188e:	000a      	movs	r2, r1
 8001890:	2b20      	cmp	r3, #32
 8001892:	d004      	beq.n	800189e <__aeabi_ddiv+0x3e6>
 8001894:	4641      	mov	r1, r8
 8001896:	4b80      	ldr	r3, [pc, #512]	; (8001a98 <__aeabi_ddiv+0x5e0>)
 8001898:	445b      	add	r3, fp
 800189a:	4099      	lsls	r1, r3
 800189c:	430d      	orrs	r5, r1
 800189e:	1e6b      	subs	r3, r5, #1
 80018a0:	419d      	sbcs	r5, r3
 80018a2:	2307      	movs	r3, #7
 80018a4:	432a      	orrs	r2, r5
 80018a6:	001d      	movs	r5, r3
 80018a8:	2400      	movs	r4, #0
 80018aa:	4015      	ands	r5, r2
 80018ac:	4213      	tst	r3, r2
 80018ae:	d100      	bne.n	80018b2 <__aeabi_ddiv+0x3fa>
 80018b0:	e0d4      	b.n	8001a5c <__aeabi_ddiv+0x5a4>
 80018b2:	210f      	movs	r1, #15
 80018b4:	2300      	movs	r3, #0
 80018b6:	4011      	ands	r1, r2
 80018b8:	2904      	cmp	r1, #4
 80018ba:	d100      	bne.n	80018be <__aeabi_ddiv+0x406>
 80018bc:	e0cb      	b.n	8001a56 <__aeabi_ddiv+0x59e>
 80018be:	1d11      	adds	r1, r2, #4
 80018c0:	4291      	cmp	r1, r2
 80018c2:	4192      	sbcs	r2, r2
 80018c4:	4252      	negs	r2, r2
 80018c6:	189b      	adds	r3, r3, r2
 80018c8:	000a      	movs	r2, r1
 80018ca:	0219      	lsls	r1, r3, #8
 80018cc:	d400      	bmi.n	80018d0 <__aeabi_ddiv+0x418>
 80018ce:	e0c2      	b.n	8001a56 <__aeabi_ddiv+0x59e>
 80018d0:	2301      	movs	r3, #1
 80018d2:	2400      	movs	r4, #0
 80018d4:	2500      	movs	r5, #0
 80018d6:	e646      	b.n	8001566 <__aeabi_ddiv+0xae>
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	4641      	mov	r1, r8
 80018dc:	031b      	lsls	r3, r3, #12
 80018de:	4219      	tst	r1, r3
 80018e0:	d008      	beq.n	80018f4 <__aeabi_ddiv+0x43c>
 80018e2:	421c      	tst	r4, r3
 80018e4:	d106      	bne.n	80018f4 <__aeabi_ddiv+0x43c>
 80018e6:	431c      	orrs	r4, r3
 80018e8:	0324      	lsls	r4, r4, #12
 80018ea:	46ba      	mov	sl, r7
 80018ec:	0015      	movs	r5, r2
 80018ee:	4b69      	ldr	r3, [pc, #420]	; (8001a94 <__aeabi_ddiv+0x5dc>)
 80018f0:	0b24      	lsrs	r4, r4, #12
 80018f2:	e638      	b.n	8001566 <__aeabi_ddiv+0xae>
 80018f4:	2480      	movs	r4, #128	; 0x80
 80018f6:	4643      	mov	r3, r8
 80018f8:	0324      	lsls	r4, r4, #12
 80018fa:	431c      	orrs	r4, r3
 80018fc:	0324      	lsls	r4, r4, #12
 80018fe:	46b2      	mov	sl, r6
 8001900:	4b64      	ldr	r3, [pc, #400]	; (8001a94 <__aeabi_ddiv+0x5dc>)
 8001902:	0b24      	lsrs	r4, r4, #12
 8001904:	e62f      	b.n	8001566 <__aeabi_ddiv+0xae>
 8001906:	2b00      	cmp	r3, #0
 8001908:	d100      	bne.n	800190c <__aeabi_ddiv+0x454>
 800190a:	e703      	b.n	8001714 <__aeabi_ddiv+0x25c>
 800190c:	19a6      	adds	r6, r4, r6
 800190e:	1e68      	subs	r0, r5, #1
 8001910:	42a6      	cmp	r6, r4
 8001912:	d200      	bcs.n	8001916 <__aeabi_ddiv+0x45e>
 8001914:	e08d      	b.n	8001a32 <__aeabi_ddiv+0x57a>
 8001916:	428e      	cmp	r6, r1
 8001918:	d200      	bcs.n	800191c <__aeabi_ddiv+0x464>
 800191a:	e0a3      	b.n	8001a64 <__aeabi_ddiv+0x5ac>
 800191c:	d100      	bne.n	8001920 <__aeabi_ddiv+0x468>
 800191e:	e0b3      	b.n	8001a88 <__aeabi_ddiv+0x5d0>
 8001920:	0005      	movs	r5, r0
 8001922:	e6f5      	b.n	8001710 <__aeabi_ddiv+0x258>
 8001924:	42aa      	cmp	r2, r5
 8001926:	d900      	bls.n	800192a <__aeabi_ddiv+0x472>
 8001928:	e639      	b.n	800159e <__aeabi_ddiv+0xe6>
 800192a:	4643      	mov	r3, r8
 800192c:	07de      	lsls	r6, r3, #31
 800192e:	0858      	lsrs	r0, r3, #1
 8001930:	086b      	lsrs	r3, r5, #1
 8001932:	431e      	orrs	r6, r3
 8001934:	07ed      	lsls	r5, r5, #31
 8001936:	e639      	b.n	80015ac <__aeabi_ddiv+0xf4>
 8001938:	4648      	mov	r0, r9
 800193a:	f001 f8c9 	bl	8002ad0 <__clzsi2>
 800193e:	0001      	movs	r1, r0
 8001940:	0002      	movs	r2, r0
 8001942:	3115      	adds	r1, #21
 8001944:	3220      	adds	r2, #32
 8001946:	291c      	cmp	r1, #28
 8001948:	dc00      	bgt.n	800194c <__aeabi_ddiv+0x494>
 800194a:	e72c      	b.n	80017a6 <__aeabi_ddiv+0x2ee>
 800194c:	464b      	mov	r3, r9
 800194e:	3808      	subs	r0, #8
 8001950:	4083      	lsls	r3, r0
 8001952:	2500      	movs	r5, #0
 8001954:	4698      	mov	r8, r3
 8001956:	e732      	b.n	80017be <__aeabi_ddiv+0x306>
 8001958:	f001 f8ba 	bl	8002ad0 <__clzsi2>
 800195c:	0003      	movs	r3, r0
 800195e:	001a      	movs	r2, r3
 8001960:	3215      	adds	r2, #21
 8001962:	3020      	adds	r0, #32
 8001964:	2a1c      	cmp	r2, #28
 8001966:	dc00      	bgt.n	800196a <__aeabi_ddiv+0x4b2>
 8001968:	e700      	b.n	800176c <__aeabi_ddiv+0x2b4>
 800196a:	4654      	mov	r4, sl
 800196c:	3b08      	subs	r3, #8
 800196e:	2200      	movs	r2, #0
 8001970:	409c      	lsls	r4, r3
 8001972:	e705      	b.n	8001780 <__aeabi_ddiv+0x2c8>
 8001974:	1936      	adds	r6, r6, r4
 8001976:	3b01      	subs	r3, #1
 8001978:	42b4      	cmp	r4, r6
 800197a:	d900      	bls.n	800197e <__aeabi_ddiv+0x4c6>
 800197c:	e6a6      	b.n	80016cc <__aeabi_ddiv+0x214>
 800197e:	42b2      	cmp	r2, r6
 8001980:	d800      	bhi.n	8001984 <__aeabi_ddiv+0x4cc>
 8001982:	e6a3      	b.n	80016cc <__aeabi_ddiv+0x214>
 8001984:	1e83      	subs	r3, r0, #2
 8001986:	1936      	adds	r6, r6, r4
 8001988:	e6a0      	b.n	80016cc <__aeabi_ddiv+0x214>
 800198a:	1909      	adds	r1, r1, r4
 800198c:	3d01      	subs	r5, #1
 800198e:	428c      	cmp	r4, r1
 8001990:	d900      	bls.n	8001994 <__aeabi_ddiv+0x4dc>
 8001992:	e68d      	b.n	80016b0 <__aeabi_ddiv+0x1f8>
 8001994:	428a      	cmp	r2, r1
 8001996:	d800      	bhi.n	800199a <__aeabi_ddiv+0x4e2>
 8001998:	e68a      	b.n	80016b0 <__aeabi_ddiv+0x1f8>
 800199a:	1e85      	subs	r5, r0, #2
 800199c:	1909      	adds	r1, r1, r4
 800199e:	e687      	b.n	80016b0 <__aeabi_ddiv+0x1f8>
 80019a0:	230f      	movs	r3, #15
 80019a2:	402b      	ands	r3, r5
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d100      	bne.n	80019aa <__aeabi_ddiv+0x4f2>
 80019a8:	e6bc      	b.n	8001724 <__aeabi_ddiv+0x26c>
 80019aa:	2305      	movs	r3, #5
 80019ac:	425b      	negs	r3, r3
 80019ae:	42ab      	cmp	r3, r5
 80019b0:	419b      	sbcs	r3, r3
 80019b2:	3504      	adds	r5, #4
 80019b4:	425b      	negs	r3, r3
 80019b6:	08ed      	lsrs	r5, r5, #3
 80019b8:	4498      	add	r8, r3
 80019ba:	e6b4      	b.n	8001726 <__aeabi_ddiv+0x26e>
 80019bc:	42af      	cmp	r7, r5
 80019be:	d900      	bls.n	80019c2 <__aeabi_ddiv+0x50a>
 80019c0:	e660      	b.n	8001684 <__aeabi_ddiv+0x1cc>
 80019c2:	4282      	cmp	r2, r0
 80019c4:	d804      	bhi.n	80019d0 <__aeabi_ddiv+0x518>
 80019c6:	d000      	beq.n	80019ca <__aeabi_ddiv+0x512>
 80019c8:	e65c      	b.n	8001684 <__aeabi_ddiv+0x1cc>
 80019ca:	42ae      	cmp	r6, r5
 80019cc:	d800      	bhi.n	80019d0 <__aeabi_ddiv+0x518>
 80019ce:	e659      	b.n	8001684 <__aeabi_ddiv+0x1cc>
 80019d0:	2302      	movs	r3, #2
 80019d2:	425b      	negs	r3, r3
 80019d4:	469c      	mov	ip, r3
 80019d6:	9b00      	ldr	r3, [sp, #0]
 80019d8:	44e0      	add	r8, ip
 80019da:	469c      	mov	ip, r3
 80019dc:	4465      	add	r5, ip
 80019de:	429d      	cmp	r5, r3
 80019e0:	419b      	sbcs	r3, r3
 80019e2:	425b      	negs	r3, r3
 80019e4:	191b      	adds	r3, r3, r4
 80019e6:	18c0      	adds	r0, r0, r3
 80019e8:	e64d      	b.n	8001686 <__aeabi_ddiv+0x1ce>
 80019ea:	428a      	cmp	r2, r1
 80019ec:	d800      	bhi.n	80019f0 <__aeabi_ddiv+0x538>
 80019ee:	e60e      	b.n	800160e <__aeabi_ddiv+0x156>
 80019f0:	1e83      	subs	r3, r0, #2
 80019f2:	1909      	adds	r1, r1, r4
 80019f4:	e60b      	b.n	800160e <__aeabi_ddiv+0x156>
 80019f6:	428a      	cmp	r2, r1
 80019f8:	d800      	bhi.n	80019fc <__aeabi_ddiv+0x544>
 80019fa:	e5f4      	b.n	80015e6 <__aeabi_ddiv+0x12e>
 80019fc:	1e83      	subs	r3, r0, #2
 80019fe:	4698      	mov	r8, r3
 8001a00:	1909      	adds	r1, r1, r4
 8001a02:	e5f0      	b.n	80015e6 <__aeabi_ddiv+0x12e>
 8001a04:	4925      	ldr	r1, [pc, #148]	; (8001a9c <__aeabi_ddiv+0x5e4>)
 8001a06:	0028      	movs	r0, r5
 8001a08:	4459      	add	r1, fp
 8001a0a:	408d      	lsls	r5, r1
 8001a0c:	4642      	mov	r2, r8
 8001a0e:	408a      	lsls	r2, r1
 8001a10:	1e69      	subs	r1, r5, #1
 8001a12:	418d      	sbcs	r5, r1
 8001a14:	4641      	mov	r1, r8
 8001a16:	40d8      	lsrs	r0, r3
 8001a18:	40d9      	lsrs	r1, r3
 8001a1a:	4302      	orrs	r2, r0
 8001a1c:	432a      	orrs	r2, r5
 8001a1e:	000b      	movs	r3, r1
 8001a20:	0751      	lsls	r1, r2, #29
 8001a22:	d100      	bne.n	8001a26 <__aeabi_ddiv+0x56e>
 8001a24:	e751      	b.n	80018ca <__aeabi_ddiv+0x412>
 8001a26:	210f      	movs	r1, #15
 8001a28:	4011      	ands	r1, r2
 8001a2a:	2904      	cmp	r1, #4
 8001a2c:	d000      	beq.n	8001a30 <__aeabi_ddiv+0x578>
 8001a2e:	e746      	b.n	80018be <__aeabi_ddiv+0x406>
 8001a30:	e74b      	b.n	80018ca <__aeabi_ddiv+0x412>
 8001a32:	0005      	movs	r5, r0
 8001a34:	428e      	cmp	r6, r1
 8001a36:	d000      	beq.n	8001a3a <__aeabi_ddiv+0x582>
 8001a38:	e66a      	b.n	8001710 <__aeabi_ddiv+0x258>
 8001a3a:	9a00      	ldr	r2, [sp, #0]
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d000      	beq.n	8001a42 <__aeabi_ddiv+0x58a>
 8001a40:	e666      	b.n	8001710 <__aeabi_ddiv+0x258>
 8001a42:	e667      	b.n	8001714 <__aeabi_ddiv+0x25c>
 8001a44:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <__aeabi_ddiv+0x5e8>)
 8001a46:	445a      	add	r2, fp
 8001a48:	2a00      	cmp	r2, #0
 8001a4a:	dc00      	bgt.n	8001a4e <__aeabi_ddiv+0x596>
 8001a4c:	e710      	b.n	8001870 <__aeabi_ddiv+0x3b8>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	2500      	movs	r5, #0
 8001a52:	4498      	add	r8, r3
 8001a54:	e667      	b.n	8001726 <__aeabi_ddiv+0x26e>
 8001a56:	075d      	lsls	r5, r3, #29
 8001a58:	025b      	lsls	r3, r3, #9
 8001a5a:	0b1c      	lsrs	r4, r3, #12
 8001a5c:	08d2      	lsrs	r2, r2, #3
 8001a5e:	2300      	movs	r3, #0
 8001a60:	4315      	orrs	r5, r2
 8001a62:	e580      	b.n	8001566 <__aeabi_ddiv+0xae>
 8001a64:	9800      	ldr	r0, [sp, #0]
 8001a66:	3d02      	subs	r5, #2
 8001a68:	0042      	lsls	r2, r0, #1
 8001a6a:	4282      	cmp	r2, r0
 8001a6c:	41bf      	sbcs	r7, r7
 8001a6e:	427f      	negs	r7, r7
 8001a70:	193c      	adds	r4, r7, r4
 8001a72:	1936      	adds	r6, r6, r4
 8001a74:	9200      	str	r2, [sp, #0]
 8001a76:	e7dd      	b.n	8001a34 <__aeabi_ddiv+0x57c>
 8001a78:	2480      	movs	r4, #128	; 0x80
 8001a7a:	4643      	mov	r3, r8
 8001a7c:	0324      	lsls	r4, r4, #12
 8001a7e:	431c      	orrs	r4, r3
 8001a80:	0324      	lsls	r4, r4, #12
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__aeabi_ddiv+0x5dc>)
 8001a84:	0b24      	lsrs	r4, r4, #12
 8001a86:	e56e      	b.n	8001566 <__aeabi_ddiv+0xae>
 8001a88:	9a00      	ldr	r2, [sp, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d3ea      	bcc.n	8001a64 <__aeabi_ddiv+0x5ac>
 8001a8e:	0005      	movs	r5, r0
 8001a90:	e7d3      	b.n	8001a3a <__aeabi_ddiv+0x582>
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	000007ff 	.word	0x000007ff
 8001a98:	0000043e 	.word	0x0000043e
 8001a9c:	0000041e 	.word	0x0000041e
 8001aa0:	000003ff 	.word	0x000003ff

08001aa4 <__eqdf2>:
 8001aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa6:	464e      	mov	r6, r9
 8001aa8:	4645      	mov	r5, r8
 8001aaa:	46de      	mov	lr, fp
 8001aac:	4657      	mov	r7, sl
 8001aae:	4690      	mov	r8, r2
 8001ab0:	b5e0      	push	{r5, r6, r7, lr}
 8001ab2:	0017      	movs	r7, r2
 8001ab4:	031a      	lsls	r2, r3, #12
 8001ab6:	0b12      	lsrs	r2, r2, #12
 8001ab8:	0005      	movs	r5, r0
 8001aba:	4684      	mov	ip, r0
 8001abc:	4819      	ldr	r0, [pc, #100]	; (8001b24 <__eqdf2+0x80>)
 8001abe:	030e      	lsls	r6, r1, #12
 8001ac0:	004c      	lsls	r4, r1, #1
 8001ac2:	4691      	mov	r9, r2
 8001ac4:	005a      	lsls	r2, r3, #1
 8001ac6:	0fdb      	lsrs	r3, r3, #31
 8001ac8:	469b      	mov	fp, r3
 8001aca:	0b36      	lsrs	r6, r6, #12
 8001acc:	0d64      	lsrs	r4, r4, #21
 8001ace:	0fc9      	lsrs	r1, r1, #31
 8001ad0:	0d52      	lsrs	r2, r2, #21
 8001ad2:	4284      	cmp	r4, r0
 8001ad4:	d019      	beq.n	8001b0a <__eqdf2+0x66>
 8001ad6:	4282      	cmp	r2, r0
 8001ad8:	d010      	beq.n	8001afc <__eqdf2+0x58>
 8001ada:	2001      	movs	r0, #1
 8001adc:	4294      	cmp	r4, r2
 8001ade:	d10e      	bne.n	8001afe <__eqdf2+0x5a>
 8001ae0:	454e      	cmp	r6, r9
 8001ae2:	d10c      	bne.n	8001afe <__eqdf2+0x5a>
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	45c4      	cmp	ip, r8
 8001ae8:	d109      	bne.n	8001afe <__eqdf2+0x5a>
 8001aea:	4559      	cmp	r1, fp
 8001aec:	d017      	beq.n	8001b1e <__eqdf2+0x7a>
 8001aee:	2c00      	cmp	r4, #0
 8001af0:	d105      	bne.n	8001afe <__eqdf2+0x5a>
 8001af2:	0030      	movs	r0, r6
 8001af4:	4328      	orrs	r0, r5
 8001af6:	1e43      	subs	r3, r0, #1
 8001af8:	4198      	sbcs	r0, r3
 8001afa:	e000      	b.n	8001afe <__eqdf2+0x5a>
 8001afc:	2001      	movs	r0, #1
 8001afe:	bcf0      	pop	{r4, r5, r6, r7}
 8001b00:	46bb      	mov	fp, r7
 8001b02:	46b2      	mov	sl, r6
 8001b04:	46a9      	mov	r9, r5
 8001b06:	46a0      	mov	r8, r4
 8001b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0a:	0033      	movs	r3, r6
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	432b      	orrs	r3, r5
 8001b10:	d1f5      	bne.n	8001afe <__eqdf2+0x5a>
 8001b12:	42a2      	cmp	r2, r4
 8001b14:	d1f3      	bne.n	8001afe <__eqdf2+0x5a>
 8001b16:	464b      	mov	r3, r9
 8001b18:	433b      	orrs	r3, r7
 8001b1a:	d1f0      	bne.n	8001afe <__eqdf2+0x5a>
 8001b1c:	e7e2      	b.n	8001ae4 <__eqdf2+0x40>
 8001b1e:	2000      	movs	r0, #0
 8001b20:	e7ed      	b.n	8001afe <__eqdf2+0x5a>
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	000007ff 	.word	0x000007ff

08001b28 <__gedf2>:
 8001b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2a:	4647      	mov	r7, r8
 8001b2c:	46ce      	mov	lr, r9
 8001b2e:	0004      	movs	r4, r0
 8001b30:	0018      	movs	r0, r3
 8001b32:	0016      	movs	r6, r2
 8001b34:	031b      	lsls	r3, r3, #12
 8001b36:	0b1b      	lsrs	r3, r3, #12
 8001b38:	4d2d      	ldr	r5, [pc, #180]	; (8001bf0 <__gedf2+0xc8>)
 8001b3a:	004a      	lsls	r2, r1, #1
 8001b3c:	4699      	mov	r9, r3
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	0043      	lsls	r3, r0, #1
 8001b42:	030f      	lsls	r7, r1, #12
 8001b44:	46a4      	mov	ip, r4
 8001b46:	46b0      	mov	r8, r6
 8001b48:	0b3f      	lsrs	r7, r7, #12
 8001b4a:	0d52      	lsrs	r2, r2, #21
 8001b4c:	0fc9      	lsrs	r1, r1, #31
 8001b4e:	0d5b      	lsrs	r3, r3, #21
 8001b50:	0fc0      	lsrs	r0, r0, #31
 8001b52:	42aa      	cmp	r2, r5
 8001b54:	d021      	beq.n	8001b9a <__gedf2+0x72>
 8001b56:	42ab      	cmp	r3, r5
 8001b58:	d013      	beq.n	8001b82 <__gedf2+0x5a>
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	d122      	bne.n	8001ba4 <__gedf2+0x7c>
 8001b5e:	433c      	orrs	r4, r7
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <__gedf2+0x42>
 8001b64:	464d      	mov	r5, r9
 8001b66:	432e      	orrs	r6, r5
 8001b68:	d022      	beq.n	8001bb0 <__gedf2+0x88>
 8001b6a:	2c00      	cmp	r4, #0
 8001b6c:	d010      	beq.n	8001b90 <__gedf2+0x68>
 8001b6e:	4281      	cmp	r1, r0
 8001b70:	d022      	beq.n	8001bb8 <__gedf2+0x90>
 8001b72:	2002      	movs	r0, #2
 8001b74:	3901      	subs	r1, #1
 8001b76:	4008      	ands	r0, r1
 8001b78:	3801      	subs	r0, #1
 8001b7a:	bcc0      	pop	{r6, r7}
 8001b7c:	46b9      	mov	r9, r7
 8001b7e:	46b0      	mov	r8, r6
 8001b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b82:	464d      	mov	r5, r9
 8001b84:	432e      	orrs	r6, r5
 8001b86:	d129      	bne.n	8001bdc <__gedf2+0xb4>
 8001b88:	2a00      	cmp	r2, #0
 8001b8a:	d1f0      	bne.n	8001b6e <__gedf2+0x46>
 8001b8c:	433c      	orrs	r4, r7
 8001b8e:	d1ee      	bne.n	8001b6e <__gedf2+0x46>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d1f2      	bne.n	8001b7a <__gedf2+0x52>
 8001b94:	2001      	movs	r0, #1
 8001b96:	4240      	negs	r0, r0
 8001b98:	e7ef      	b.n	8001b7a <__gedf2+0x52>
 8001b9a:	003d      	movs	r5, r7
 8001b9c:	4325      	orrs	r5, r4
 8001b9e:	d11d      	bne.n	8001bdc <__gedf2+0xb4>
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d0ee      	beq.n	8001b82 <__gedf2+0x5a>
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1e2      	bne.n	8001b6e <__gedf2+0x46>
 8001ba8:	464c      	mov	r4, r9
 8001baa:	4326      	orrs	r6, r4
 8001bac:	d1df      	bne.n	8001b6e <__gedf2+0x46>
 8001bae:	e7e0      	b.n	8001b72 <__gedf2+0x4a>
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	2c00      	cmp	r4, #0
 8001bb4:	d0e1      	beq.n	8001b7a <__gedf2+0x52>
 8001bb6:	e7dc      	b.n	8001b72 <__gedf2+0x4a>
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dc0a      	bgt.n	8001bd2 <__gedf2+0xaa>
 8001bbc:	dbe8      	blt.n	8001b90 <__gedf2+0x68>
 8001bbe:	454f      	cmp	r7, r9
 8001bc0:	d8d7      	bhi.n	8001b72 <__gedf2+0x4a>
 8001bc2:	d00e      	beq.n	8001be2 <__gedf2+0xba>
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	454f      	cmp	r7, r9
 8001bc8:	d2d7      	bcs.n	8001b7a <__gedf2+0x52>
 8001bca:	2900      	cmp	r1, #0
 8001bcc:	d0e2      	beq.n	8001b94 <__gedf2+0x6c>
 8001bce:	0008      	movs	r0, r1
 8001bd0:	e7d3      	b.n	8001b7a <__gedf2+0x52>
 8001bd2:	4243      	negs	r3, r0
 8001bd4:	4158      	adcs	r0, r3
 8001bd6:	0040      	lsls	r0, r0, #1
 8001bd8:	3801      	subs	r0, #1
 8001bda:	e7ce      	b.n	8001b7a <__gedf2+0x52>
 8001bdc:	2002      	movs	r0, #2
 8001bde:	4240      	negs	r0, r0
 8001be0:	e7cb      	b.n	8001b7a <__gedf2+0x52>
 8001be2:	45c4      	cmp	ip, r8
 8001be4:	d8c5      	bhi.n	8001b72 <__gedf2+0x4a>
 8001be6:	2000      	movs	r0, #0
 8001be8:	45c4      	cmp	ip, r8
 8001bea:	d2c6      	bcs.n	8001b7a <__gedf2+0x52>
 8001bec:	e7ed      	b.n	8001bca <__gedf2+0xa2>
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	000007ff 	.word	0x000007ff

08001bf4 <__ledf2>:
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	4647      	mov	r7, r8
 8001bf8:	46ce      	mov	lr, r9
 8001bfa:	0004      	movs	r4, r0
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	0016      	movs	r6, r2
 8001c00:	031b      	lsls	r3, r3, #12
 8001c02:	0b1b      	lsrs	r3, r3, #12
 8001c04:	4d2c      	ldr	r5, [pc, #176]	; (8001cb8 <__ledf2+0xc4>)
 8001c06:	004a      	lsls	r2, r1, #1
 8001c08:	4699      	mov	r9, r3
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	0043      	lsls	r3, r0, #1
 8001c0e:	030f      	lsls	r7, r1, #12
 8001c10:	46a4      	mov	ip, r4
 8001c12:	46b0      	mov	r8, r6
 8001c14:	0b3f      	lsrs	r7, r7, #12
 8001c16:	0d52      	lsrs	r2, r2, #21
 8001c18:	0fc9      	lsrs	r1, r1, #31
 8001c1a:	0d5b      	lsrs	r3, r3, #21
 8001c1c:	0fc0      	lsrs	r0, r0, #31
 8001c1e:	42aa      	cmp	r2, r5
 8001c20:	d00d      	beq.n	8001c3e <__ledf2+0x4a>
 8001c22:	42ab      	cmp	r3, r5
 8001c24:	d010      	beq.n	8001c48 <__ledf2+0x54>
 8001c26:	2a00      	cmp	r2, #0
 8001c28:	d127      	bne.n	8001c7a <__ledf2+0x86>
 8001c2a:	433c      	orrs	r4, r7
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d111      	bne.n	8001c54 <__ledf2+0x60>
 8001c30:	464d      	mov	r5, r9
 8001c32:	432e      	orrs	r6, r5
 8001c34:	d10e      	bne.n	8001c54 <__ledf2+0x60>
 8001c36:	2000      	movs	r0, #0
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d015      	beq.n	8001c68 <__ledf2+0x74>
 8001c3c:	e00e      	b.n	8001c5c <__ledf2+0x68>
 8001c3e:	003d      	movs	r5, r7
 8001c40:	4325      	orrs	r5, r4
 8001c42:	d110      	bne.n	8001c66 <__ledf2+0x72>
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d118      	bne.n	8001c7a <__ledf2+0x86>
 8001c48:	464d      	mov	r5, r9
 8001c4a:	432e      	orrs	r6, r5
 8001c4c:	d10b      	bne.n	8001c66 <__ledf2+0x72>
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d102      	bne.n	8001c58 <__ledf2+0x64>
 8001c52:	433c      	orrs	r4, r7
 8001c54:	2c00      	cmp	r4, #0
 8001c56:	d00b      	beq.n	8001c70 <__ledf2+0x7c>
 8001c58:	4281      	cmp	r1, r0
 8001c5a:	d014      	beq.n	8001c86 <__ledf2+0x92>
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	3901      	subs	r1, #1
 8001c60:	4008      	ands	r0, r1
 8001c62:	3801      	subs	r0, #1
 8001c64:	e000      	b.n	8001c68 <__ledf2+0x74>
 8001c66:	2002      	movs	r0, #2
 8001c68:	bcc0      	pop	{r6, r7}
 8001c6a:	46b9      	mov	r9, r7
 8001c6c:	46b0      	mov	r8, r6
 8001c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c70:	2800      	cmp	r0, #0
 8001c72:	d1f9      	bne.n	8001c68 <__ledf2+0x74>
 8001c74:	2001      	movs	r0, #1
 8001c76:	4240      	negs	r0, r0
 8001c78:	e7f6      	b.n	8001c68 <__ledf2+0x74>
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ec      	bne.n	8001c58 <__ledf2+0x64>
 8001c7e:	464c      	mov	r4, r9
 8001c80:	4326      	orrs	r6, r4
 8001c82:	d1e9      	bne.n	8001c58 <__ledf2+0x64>
 8001c84:	e7ea      	b.n	8001c5c <__ledf2+0x68>
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dd04      	ble.n	8001c94 <__ledf2+0xa0>
 8001c8a:	4243      	negs	r3, r0
 8001c8c:	4158      	adcs	r0, r3
 8001c8e:	0040      	lsls	r0, r0, #1
 8001c90:	3801      	subs	r0, #1
 8001c92:	e7e9      	b.n	8001c68 <__ledf2+0x74>
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dbeb      	blt.n	8001c70 <__ledf2+0x7c>
 8001c98:	454f      	cmp	r7, r9
 8001c9a:	d8df      	bhi.n	8001c5c <__ledf2+0x68>
 8001c9c:	d006      	beq.n	8001cac <__ledf2+0xb8>
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	454f      	cmp	r7, r9
 8001ca2:	d2e1      	bcs.n	8001c68 <__ledf2+0x74>
 8001ca4:	2900      	cmp	r1, #0
 8001ca6:	d0e5      	beq.n	8001c74 <__ledf2+0x80>
 8001ca8:	0008      	movs	r0, r1
 8001caa:	e7dd      	b.n	8001c68 <__ledf2+0x74>
 8001cac:	45c4      	cmp	ip, r8
 8001cae:	d8d5      	bhi.n	8001c5c <__ledf2+0x68>
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	45c4      	cmp	ip, r8
 8001cb4:	d2d8      	bcs.n	8001c68 <__ledf2+0x74>
 8001cb6:	e7f5      	b.n	8001ca4 <__ledf2+0xb0>
 8001cb8:	000007ff 	.word	0x000007ff

08001cbc <__aeabi_dmul>:
 8001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cbe:	4657      	mov	r7, sl
 8001cc0:	464e      	mov	r6, r9
 8001cc2:	4645      	mov	r5, r8
 8001cc4:	46de      	mov	lr, fp
 8001cc6:	b5e0      	push	{r5, r6, r7, lr}
 8001cc8:	4698      	mov	r8, r3
 8001cca:	030c      	lsls	r4, r1, #12
 8001ccc:	004b      	lsls	r3, r1, #1
 8001cce:	0006      	movs	r6, r0
 8001cd0:	4692      	mov	sl, r2
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	0b24      	lsrs	r4, r4, #12
 8001cd6:	0d5b      	lsrs	r3, r3, #21
 8001cd8:	0fcf      	lsrs	r7, r1, #31
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dmul+0x24>
 8001cde:	e15c      	b.n	8001f9a <__aeabi_dmul+0x2de>
 8001ce0:	4ad9      	ldr	r2, [pc, #868]	; (8002048 <__aeabi_dmul+0x38c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dmul+0x2c>
 8001ce6:	e175      	b.n	8001fd4 <__aeabi_dmul+0x318>
 8001ce8:	0f42      	lsrs	r2, r0, #29
 8001cea:	00e4      	lsls	r4, r4, #3
 8001cec:	4314      	orrs	r4, r2
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	0412      	lsls	r2, r2, #16
 8001cf2:	4314      	orrs	r4, r2
 8001cf4:	4ad5      	ldr	r2, [pc, #852]	; (800204c <__aeabi_dmul+0x390>)
 8001cf6:	00c5      	lsls	r5, r0, #3
 8001cf8:	4694      	mov	ip, r2
 8001cfa:	4463      	add	r3, ip
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	4699      	mov	r9, r3
 8001d02:	469b      	mov	fp, r3
 8001d04:	4643      	mov	r3, r8
 8001d06:	4642      	mov	r2, r8
 8001d08:	031e      	lsls	r6, r3, #12
 8001d0a:	0fd2      	lsrs	r2, r2, #31
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4650      	mov	r0, sl
 8001d10:	4690      	mov	r8, r2
 8001d12:	0b36      	lsrs	r6, r6, #12
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	d100      	bne.n	8001d1a <__aeabi_dmul+0x5e>
 8001d18:	e120      	b.n	8001f5c <__aeabi_dmul+0x2a0>
 8001d1a:	4acb      	ldr	r2, [pc, #812]	; (8002048 <__aeabi_dmul+0x38c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dmul+0x66>
 8001d20:	e162      	b.n	8001fe8 <__aeabi_dmul+0x32c>
 8001d22:	49ca      	ldr	r1, [pc, #808]	; (800204c <__aeabi_dmul+0x390>)
 8001d24:	0f42      	lsrs	r2, r0, #29
 8001d26:	468c      	mov	ip, r1
 8001d28:	9900      	ldr	r1, [sp, #0]
 8001d2a:	4463      	add	r3, ip
 8001d2c:	00f6      	lsls	r6, r6, #3
 8001d2e:	468c      	mov	ip, r1
 8001d30:	4316      	orrs	r6, r2
 8001d32:	2280      	movs	r2, #128	; 0x80
 8001d34:	449c      	add	ip, r3
 8001d36:	0412      	lsls	r2, r2, #16
 8001d38:	4663      	mov	r3, ip
 8001d3a:	4316      	orrs	r6, r2
 8001d3c:	00c2      	lsls	r2, r0, #3
 8001d3e:	2000      	movs	r0, #0
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	9900      	ldr	r1, [sp, #0]
 8001d44:	4643      	mov	r3, r8
 8001d46:	3101      	adds	r1, #1
 8001d48:	468c      	mov	ip, r1
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	407b      	eors	r3, r7
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	290f      	cmp	r1, #15
 8001d52:	d826      	bhi.n	8001da2 <__aeabi_dmul+0xe6>
 8001d54:	4bbe      	ldr	r3, [pc, #760]	; (8002050 <__aeabi_dmul+0x394>)
 8001d56:	0089      	lsls	r1, r1, #2
 8001d58:	5859      	ldr	r1, [r3, r1]
 8001d5a:	468f      	mov	pc, r1
 8001d5c:	4643      	mov	r3, r8
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	0034      	movs	r4, r6
 8001d62:	0015      	movs	r5, r2
 8001d64:	4683      	mov	fp, r0
 8001d66:	465b      	mov	r3, fp
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d016      	beq.n	8001d9a <__aeabi_dmul+0xde>
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dmul+0xb6>
 8001d70:	e203      	b.n	800217a <__aeabi_dmul+0x4be>
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d000      	beq.n	8001d78 <__aeabi_dmul+0xbc>
 8001d76:	e0cd      	b.n	8001f14 <__aeabi_dmul+0x258>
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2400      	movs	r4, #0
 8001d7c:	2500      	movs	r5, #0
 8001d7e:	9b01      	ldr	r3, [sp, #4]
 8001d80:	0512      	lsls	r2, r2, #20
 8001d82:	4322      	orrs	r2, r4
 8001d84:	07db      	lsls	r3, r3, #31
 8001d86:	431a      	orrs	r2, r3
 8001d88:	0028      	movs	r0, r5
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	b007      	add	sp, #28
 8001d8e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d90:	46bb      	mov	fp, r7
 8001d92:	46b2      	mov	sl, r6
 8001d94:	46a9      	mov	r9, r5
 8001d96:	46a0      	mov	r8, r4
 8001d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d9a:	2400      	movs	r4, #0
 8001d9c:	2500      	movs	r5, #0
 8001d9e:	4aaa      	ldr	r2, [pc, #680]	; (8002048 <__aeabi_dmul+0x38c>)
 8001da0:	e7ed      	b.n	8001d7e <__aeabi_dmul+0xc2>
 8001da2:	0c28      	lsrs	r0, r5, #16
 8001da4:	042d      	lsls	r5, r5, #16
 8001da6:	0c2d      	lsrs	r5, r5, #16
 8001da8:	002b      	movs	r3, r5
 8001daa:	0c11      	lsrs	r1, r2, #16
 8001dac:	0412      	lsls	r2, r2, #16
 8001dae:	0c12      	lsrs	r2, r2, #16
 8001db0:	4353      	muls	r3, r2
 8001db2:	4698      	mov	r8, r3
 8001db4:	0013      	movs	r3, r2
 8001db6:	002f      	movs	r7, r5
 8001db8:	4343      	muls	r3, r0
 8001dba:	4699      	mov	r9, r3
 8001dbc:	434f      	muls	r7, r1
 8001dbe:	444f      	add	r7, r9
 8001dc0:	46bb      	mov	fp, r7
 8001dc2:	4647      	mov	r7, r8
 8001dc4:	000b      	movs	r3, r1
 8001dc6:	0c3f      	lsrs	r7, r7, #16
 8001dc8:	46ba      	mov	sl, r7
 8001dca:	4343      	muls	r3, r0
 8001dcc:	44da      	add	sl, fp
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	45d1      	cmp	r9, sl
 8001dd2:	d904      	bls.n	8001dde <__aeabi_dmul+0x122>
 8001dd4:	2780      	movs	r7, #128	; 0x80
 8001dd6:	027f      	lsls	r7, r7, #9
 8001dd8:	46b9      	mov	r9, r7
 8001dda:	444b      	add	r3, r9
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	4653      	mov	r3, sl
 8001de0:	0c1b      	lsrs	r3, r3, #16
 8001de2:	469b      	mov	fp, r3
 8001de4:	4653      	mov	r3, sl
 8001de6:	041f      	lsls	r7, r3, #16
 8001de8:	4643      	mov	r3, r8
 8001dea:	041b      	lsls	r3, r3, #16
 8001dec:	0c1b      	lsrs	r3, r3, #16
 8001dee:	4698      	mov	r8, r3
 8001df0:	003b      	movs	r3, r7
 8001df2:	4443      	add	r3, r8
 8001df4:	9304      	str	r3, [sp, #16]
 8001df6:	0c33      	lsrs	r3, r6, #16
 8001df8:	0436      	lsls	r6, r6, #16
 8001dfa:	0c36      	lsrs	r6, r6, #16
 8001dfc:	4698      	mov	r8, r3
 8001dfe:	0033      	movs	r3, r6
 8001e00:	4343      	muls	r3, r0
 8001e02:	4699      	mov	r9, r3
 8001e04:	4643      	mov	r3, r8
 8001e06:	4343      	muls	r3, r0
 8001e08:	002f      	movs	r7, r5
 8001e0a:	469a      	mov	sl, r3
 8001e0c:	4643      	mov	r3, r8
 8001e0e:	4377      	muls	r7, r6
 8001e10:	435d      	muls	r5, r3
 8001e12:	0c38      	lsrs	r0, r7, #16
 8001e14:	444d      	add	r5, r9
 8001e16:	1945      	adds	r5, r0, r5
 8001e18:	45a9      	cmp	r9, r5
 8001e1a:	d903      	bls.n	8001e24 <__aeabi_dmul+0x168>
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	025b      	lsls	r3, r3, #9
 8001e20:	4699      	mov	r9, r3
 8001e22:	44ca      	add	sl, r9
 8001e24:	043f      	lsls	r7, r7, #16
 8001e26:	0c28      	lsrs	r0, r5, #16
 8001e28:	0c3f      	lsrs	r7, r7, #16
 8001e2a:	042d      	lsls	r5, r5, #16
 8001e2c:	19ed      	adds	r5, r5, r7
 8001e2e:	0c27      	lsrs	r7, r4, #16
 8001e30:	0424      	lsls	r4, r4, #16
 8001e32:	0c24      	lsrs	r4, r4, #16
 8001e34:	0003      	movs	r3, r0
 8001e36:	0020      	movs	r0, r4
 8001e38:	4350      	muls	r0, r2
 8001e3a:	437a      	muls	r2, r7
 8001e3c:	4691      	mov	r9, r2
 8001e3e:	003a      	movs	r2, r7
 8001e40:	4453      	add	r3, sl
 8001e42:	9305      	str	r3, [sp, #20]
 8001e44:	0c03      	lsrs	r3, r0, #16
 8001e46:	469a      	mov	sl, r3
 8001e48:	434a      	muls	r2, r1
 8001e4a:	4361      	muls	r1, r4
 8001e4c:	4449      	add	r1, r9
 8001e4e:	4451      	add	r1, sl
 8001e50:	44ab      	add	fp, r5
 8001e52:	4589      	cmp	r9, r1
 8001e54:	d903      	bls.n	8001e5e <__aeabi_dmul+0x1a2>
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	025b      	lsls	r3, r3, #9
 8001e5a:	4699      	mov	r9, r3
 8001e5c:	444a      	add	r2, r9
 8001e5e:	0400      	lsls	r0, r0, #16
 8001e60:	0c0b      	lsrs	r3, r1, #16
 8001e62:	0c00      	lsrs	r0, r0, #16
 8001e64:	0409      	lsls	r1, r1, #16
 8001e66:	1809      	adds	r1, r1, r0
 8001e68:	0020      	movs	r0, r4
 8001e6a:	4699      	mov	r9, r3
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	4370      	muls	r0, r6
 8001e70:	435c      	muls	r4, r3
 8001e72:	437e      	muls	r6, r7
 8001e74:	435f      	muls	r7, r3
 8001e76:	0c03      	lsrs	r3, r0, #16
 8001e78:	4698      	mov	r8, r3
 8001e7a:	19a4      	adds	r4, r4, r6
 8001e7c:	4444      	add	r4, r8
 8001e7e:	444a      	add	r2, r9
 8001e80:	9703      	str	r7, [sp, #12]
 8001e82:	42a6      	cmp	r6, r4
 8001e84:	d904      	bls.n	8001e90 <__aeabi_dmul+0x1d4>
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	025b      	lsls	r3, r3, #9
 8001e8a:	4698      	mov	r8, r3
 8001e8c:	4447      	add	r7, r8
 8001e8e:	9703      	str	r7, [sp, #12]
 8001e90:	0423      	lsls	r3, r4, #16
 8001e92:	9e02      	ldr	r6, [sp, #8]
 8001e94:	469a      	mov	sl, r3
 8001e96:	9b05      	ldr	r3, [sp, #20]
 8001e98:	445e      	add	r6, fp
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	42ae      	cmp	r6, r5
 8001e9e:	41ad      	sbcs	r5, r5
 8001ea0:	1876      	adds	r6, r6, r1
 8001ea2:	428e      	cmp	r6, r1
 8001ea4:	4189      	sbcs	r1, r1
 8001ea6:	0400      	lsls	r0, r0, #16
 8001ea8:	0c00      	lsrs	r0, r0, #16
 8001eaa:	4450      	add	r0, sl
 8001eac:	4440      	add	r0, r8
 8001eae:	426d      	negs	r5, r5
 8001eb0:	1947      	adds	r7, r0, r5
 8001eb2:	46b8      	mov	r8, r7
 8001eb4:	4693      	mov	fp, r2
 8001eb6:	4249      	negs	r1, r1
 8001eb8:	4689      	mov	r9, r1
 8001eba:	44c3      	add	fp, r8
 8001ebc:	44d9      	add	r9, fp
 8001ebe:	4298      	cmp	r0, r3
 8001ec0:	4180      	sbcs	r0, r0
 8001ec2:	45a8      	cmp	r8, r5
 8001ec4:	41ad      	sbcs	r5, r5
 8001ec6:	4593      	cmp	fp, r2
 8001ec8:	4192      	sbcs	r2, r2
 8001eca:	4589      	cmp	r9, r1
 8001ecc:	4189      	sbcs	r1, r1
 8001ece:	426d      	negs	r5, r5
 8001ed0:	4240      	negs	r0, r0
 8001ed2:	4328      	orrs	r0, r5
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	4252      	negs	r2, r2
 8001ed8:	4249      	negs	r1, r1
 8001eda:	430a      	orrs	r2, r1
 8001edc:	9b03      	ldr	r3, [sp, #12]
 8001ede:	1900      	adds	r0, r0, r4
 8001ee0:	1880      	adds	r0, r0, r2
 8001ee2:	18c7      	adds	r7, r0, r3
 8001ee4:	464b      	mov	r3, r9
 8001ee6:	0ddc      	lsrs	r4, r3, #23
 8001ee8:	9b04      	ldr	r3, [sp, #16]
 8001eea:	0275      	lsls	r5, r6, #9
 8001eec:	431d      	orrs	r5, r3
 8001eee:	1e6a      	subs	r2, r5, #1
 8001ef0:	4195      	sbcs	r5, r2
 8001ef2:	464b      	mov	r3, r9
 8001ef4:	0df6      	lsrs	r6, r6, #23
 8001ef6:	027f      	lsls	r7, r7, #9
 8001ef8:	4335      	orrs	r5, r6
 8001efa:	025a      	lsls	r2, r3, #9
 8001efc:	433c      	orrs	r4, r7
 8001efe:	4315      	orrs	r5, r2
 8001f00:	01fb      	lsls	r3, r7, #7
 8001f02:	d400      	bmi.n	8001f06 <__aeabi_dmul+0x24a>
 8001f04:	e11c      	b.n	8002140 <__aeabi_dmul+0x484>
 8001f06:	2101      	movs	r1, #1
 8001f08:	086a      	lsrs	r2, r5, #1
 8001f0a:	400d      	ands	r5, r1
 8001f0c:	4315      	orrs	r5, r2
 8001f0e:	07e2      	lsls	r2, r4, #31
 8001f10:	4315      	orrs	r5, r2
 8001f12:	0864      	lsrs	r4, r4, #1
 8001f14:	494f      	ldr	r1, [pc, #316]	; (8002054 <__aeabi_dmul+0x398>)
 8001f16:	4461      	add	r1, ip
 8001f18:	2900      	cmp	r1, #0
 8001f1a:	dc00      	bgt.n	8001f1e <__aeabi_dmul+0x262>
 8001f1c:	e0b0      	b.n	8002080 <__aeabi_dmul+0x3c4>
 8001f1e:	076b      	lsls	r3, r5, #29
 8001f20:	d009      	beq.n	8001f36 <__aeabi_dmul+0x27a>
 8001f22:	220f      	movs	r2, #15
 8001f24:	402a      	ands	r2, r5
 8001f26:	2a04      	cmp	r2, #4
 8001f28:	d005      	beq.n	8001f36 <__aeabi_dmul+0x27a>
 8001f2a:	1d2a      	adds	r2, r5, #4
 8001f2c:	42aa      	cmp	r2, r5
 8001f2e:	41ad      	sbcs	r5, r5
 8001f30:	426d      	negs	r5, r5
 8001f32:	1964      	adds	r4, r4, r5
 8001f34:	0015      	movs	r5, r2
 8001f36:	01e3      	lsls	r3, r4, #7
 8001f38:	d504      	bpl.n	8001f44 <__aeabi_dmul+0x288>
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	4a46      	ldr	r2, [pc, #280]	; (8002058 <__aeabi_dmul+0x39c>)
 8001f3e:	00c9      	lsls	r1, r1, #3
 8001f40:	4014      	ands	r4, r2
 8001f42:	4461      	add	r1, ip
 8001f44:	4a45      	ldr	r2, [pc, #276]	; (800205c <__aeabi_dmul+0x3a0>)
 8001f46:	4291      	cmp	r1, r2
 8001f48:	dd00      	ble.n	8001f4c <__aeabi_dmul+0x290>
 8001f4a:	e726      	b.n	8001d9a <__aeabi_dmul+0xde>
 8001f4c:	0762      	lsls	r2, r4, #29
 8001f4e:	08ed      	lsrs	r5, r5, #3
 8001f50:	0264      	lsls	r4, r4, #9
 8001f52:	0549      	lsls	r1, r1, #21
 8001f54:	4315      	orrs	r5, r2
 8001f56:	0b24      	lsrs	r4, r4, #12
 8001f58:	0d4a      	lsrs	r2, r1, #21
 8001f5a:	e710      	b.n	8001d7e <__aeabi_dmul+0xc2>
 8001f5c:	4652      	mov	r2, sl
 8001f5e:	4332      	orrs	r2, r6
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dmul+0x2a8>
 8001f62:	e07f      	b.n	8002064 <__aeabi_dmul+0x3a8>
 8001f64:	2e00      	cmp	r6, #0
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dmul+0x2ae>
 8001f68:	e0dc      	b.n	8002124 <__aeabi_dmul+0x468>
 8001f6a:	0030      	movs	r0, r6
 8001f6c:	f000 fdb0 	bl	8002ad0 <__clzsi2>
 8001f70:	0002      	movs	r2, r0
 8001f72:	3a0b      	subs	r2, #11
 8001f74:	231d      	movs	r3, #29
 8001f76:	0001      	movs	r1, r0
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	4652      	mov	r2, sl
 8001f7c:	3908      	subs	r1, #8
 8001f7e:	40da      	lsrs	r2, r3
 8001f80:	408e      	lsls	r6, r1
 8001f82:	4316      	orrs	r6, r2
 8001f84:	4652      	mov	r2, sl
 8001f86:	408a      	lsls	r2, r1
 8001f88:	9b00      	ldr	r3, [sp, #0]
 8001f8a:	4935      	ldr	r1, [pc, #212]	; (8002060 <__aeabi_dmul+0x3a4>)
 8001f8c:	1a18      	subs	r0, r3, r0
 8001f8e:	0003      	movs	r3, r0
 8001f90:	468c      	mov	ip, r1
 8001f92:	4463      	add	r3, ip
 8001f94:	2000      	movs	r0, #0
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	e6d3      	b.n	8001d42 <__aeabi_dmul+0x86>
 8001f9a:	0025      	movs	r5, r4
 8001f9c:	4305      	orrs	r5, r0
 8001f9e:	d04a      	beq.n	8002036 <__aeabi_dmul+0x37a>
 8001fa0:	2c00      	cmp	r4, #0
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_dmul+0x2ea>
 8001fa4:	e0b0      	b.n	8002108 <__aeabi_dmul+0x44c>
 8001fa6:	0020      	movs	r0, r4
 8001fa8:	f000 fd92 	bl	8002ad0 <__clzsi2>
 8001fac:	0001      	movs	r1, r0
 8001fae:	0002      	movs	r2, r0
 8001fb0:	390b      	subs	r1, #11
 8001fb2:	231d      	movs	r3, #29
 8001fb4:	0010      	movs	r0, r2
 8001fb6:	1a5b      	subs	r3, r3, r1
 8001fb8:	0031      	movs	r1, r6
 8001fba:	0035      	movs	r5, r6
 8001fbc:	3808      	subs	r0, #8
 8001fbe:	4084      	lsls	r4, r0
 8001fc0:	40d9      	lsrs	r1, r3
 8001fc2:	4085      	lsls	r5, r0
 8001fc4:	430c      	orrs	r4, r1
 8001fc6:	4826      	ldr	r0, [pc, #152]	; (8002060 <__aeabi_dmul+0x3a4>)
 8001fc8:	1a83      	subs	r3, r0, r2
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	4699      	mov	r9, r3
 8001fd0:	469b      	mov	fp, r3
 8001fd2:	e697      	b.n	8001d04 <__aeabi_dmul+0x48>
 8001fd4:	0005      	movs	r5, r0
 8001fd6:	4325      	orrs	r5, r4
 8001fd8:	d126      	bne.n	8002028 <__aeabi_dmul+0x36c>
 8001fda:	2208      	movs	r2, #8
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	2400      	movs	r4, #0
 8001fe2:	4691      	mov	r9, r2
 8001fe4:	469b      	mov	fp, r3
 8001fe6:	e68d      	b.n	8001d04 <__aeabi_dmul+0x48>
 8001fe8:	4652      	mov	r2, sl
 8001fea:	9b00      	ldr	r3, [sp, #0]
 8001fec:	4332      	orrs	r2, r6
 8001fee:	d110      	bne.n	8002012 <__aeabi_dmul+0x356>
 8001ff0:	4915      	ldr	r1, [pc, #84]	; (8002048 <__aeabi_dmul+0x38c>)
 8001ff2:	2600      	movs	r6, #0
 8001ff4:	468c      	mov	ip, r1
 8001ff6:	4463      	add	r3, ip
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	4319      	orrs	r1, r3
 8002000:	4689      	mov	r9, r1
 8002002:	2002      	movs	r0, #2
 8002004:	e69d      	b.n	8001d42 <__aeabi_dmul+0x86>
 8002006:	465b      	mov	r3, fp
 8002008:	9701      	str	r7, [sp, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d000      	beq.n	8002010 <__aeabi_dmul+0x354>
 800200e:	e6ad      	b.n	8001d6c <__aeabi_dmul+0xb0>
 8002010:	e6c3      	b.n	8001d9a <__aeabi_dmul+0xde>
 8002012:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <__aeabi_dmul+0x38c>)
 8002014:	2003      	movs	r0, #3
 8002016:	4694      	mov	ip, r2
 8002018:	4463      	add	r3, ip
 800201a:	464a      	mov	r2, r9
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2303      	movs	r3, #3
 8002020:	431a      	orrs	r2, r3
 8002022:	4691      	mov	r9, r2
 8002024:	4652      	mov	r2, sl
 8002026:	e68c      	b.n	8001d42 <__aeabi_dmul+0x86>
 8002028:	220c      	movs	r2, #12
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2303      	movs	r3, #3
 800202e:	0005      	movs	r5, r0
 8002030:	4691      	mov	r9, r2
 8002032:	469b      	mov	fp, r3
 8002034:	e666      	b.n	8001d04 <__aeabi_dmul+0x48>
 8002036:	2304      	movs	r3, #4
 8002038:	4699      	mov	r9, r3
 800203a:	2300      	movs	r3, #0
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	2400      	movs	r4, #0
 8002042:	469b      	mov	fp, r3
 8002044:	e65e      	b.n	8001d04 <__aeabi_dmul+0x48>
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	000007ff 	.word	0x000007ff
 800204c:	fffffc01 	.word	0xfffffc01
 8002050:	08008ef8 	.word	0x08008ef8
 8002054:	000003ff 	.word	0x000003ff
 8002058:	feffffff 	.word	0xfeffffff
 800205c:	000007fe 	.word	0x000007fe
 8002060:	fffffc0d 	.word	0xfffffc0d
 8002064:	4649      	mov	r1, r9
 8002066:	2301      	movs	r3, #1
 8002068:	4319      	orrs	r1, r3
 800206a:	4689      	mov	r9, r1
 800206c:	2600      	movs	r6, #0
 800206e:	2001      	movs	r0, #1
 8002070:	e667      	b.n	8001d42 <__aeabi_dmul+0x86>
 8002072:	2300      	movs	r3, #0
 8002074:	2480      	movs	r4, #128	; 0x80
 8002076:	2500      	movs	r5, #0
 8002078:	4a43      	ldr	r2, [pc, #268]	; (8002188 <__aeabi_dmul+0x4cc>)
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	0324      	lsls	r4, r4, #12
 800207e:	e67e      	b.n	8001d7e <__aeabi_dmul+0xc2>
 8002080:	2001      	movs	r0, #1
 8002082:	1a40      	subs	r0, r0, r1
 8002084:	2838      	cmp	r0, #56	; 0x38
 8002086:	dd00      	ble.n	800208a <__aeabi_dmul+0x3ce>
 8002088:	e676      	b.n	8001d78 <__aeabi_dmul+0xbc>
 800208a:	281f      	cmp	r0, #31
 800208c:	dd5b      	ble.n	8002146 <__aeabi_dmul+0x48a>
 800208e:	221f      	movs	r2, #31
 8002090:	0023      	movs	r3, r4
 8002092:	4252      	negs	r2, r2
 8002094:	1a51      	subs	r1, r2, r1
 8002096:	40cb      	lsrs	r3, r1
 8002098:	0019      	movs	r1, r3
 800209a:	2820      	cmp	r0, #32
 800209c:	d003      	beq.n	80020a6 <__aeabi_dmul+0x3ea>
 800209e:	4a3b      	ldr	r2, [pc, #236]	; (800218c <__aeabi_dmul+0x4d0>)
 80020a0:	4462      	add	r2, ip
 80020a2:	4094      	lsls	r4, r2
 80020a4:	4325      	orrs	r5, r4
 80020a6:	1e6a      	subs	r2, r5, #1
 80020a8:	4195      	sbcs	r5, r2
 80020aa:	002a      	movs	r2, r5
 80020ac:	430a      	orrs	r2, r1
 80020ae:	2107      	movs	r1, #7
 80020b0:	000d      	movs	r5, r1
 80020b2:	2400      	movs	r4, #0
 80020b4:	4015      	ands	r5, r2
 80020b6:	4211      	tst	r1, r2
 80020b8:	d05b      	beq.n	8002172 <__aeabi_dmul+0x4b6>
 80020ba:	210f      	movs	r1, #15
 80020bc:	2400      	movs	r4, #0
 80020be:	4011      	ands	r1, r2
 80020c0:	2904      	cmp	r1, #4
 80020c2:	d053      	beq.n	800216c <__aeabi_dmul+0x4b0>
 80020c4:	1d11      	adds	r1, r2, #4
 80020c6:	4291      	cmp	r1, r2
 80020c8:	4192      	sbcs	r2, r2
 80020ca:	4252      	negs	r2, r2
 80020cc:	18a4      	adds	r4, r4, r2
 80020ce:	000a      	movs	r2, r1
 80020d0:	0223      	lsls	r3, r4, #8
 80020d2:	d54b      	bpl.n	800216c <__aeabi_dmul+0x4b0>
 80020d4:	2201      	movs	r2, #1
 80020d6:	2400      	movs	r4, #0
 80020d8:	2500      	movs	r5, #0
 80020da:	e650      	b.n	8001d7e <__aeabi_dmul+0xc2>
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	031b      	lsls	r3, r3, #12
 80020e0:	421c      	tst	r4, r3
 80020e2:	d009      	beq.n	80020f8 <__aeabi_dmul+0x43c>
 80020e4:	421e      	tst	r6, r3
 80020e6:	d107      	bne.n	80020f8 <__aeabi_dmul+0x43c>
 80020e8:	4333      	orrs	r3, r6
 80020ea:	031c      	lsls	r4, r3, #12
 80020ec:	4643      	mov	r3, r8
 80020ee:	0015      	movs	r5, r2
 80020f0:	0b24      	lsrs	r4, r4, #12
 80020f2:	4a25      	ldr	r2, [pc, #148]	; (8002188 <__aeabi_dmul+0x4cc>)
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	e642      	b.n	8001d7e <__aeabi_dmul+0xc2>
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	0312      	lsls	r2, r2, #12
 80020fc:	4314      	orrs	r4, r2
 80020fe:	0324      	lsls	r4, r4, #12
 8002100:	4a21      	ldr	r2, [pc, #132]	; (8002188 <__aeabi_dmul+0x4cc>)
 8002102:	0b24      	lsrs	r4, r4, #12
 8002104:	9701      	str	r7, [sp, #4]
 8002106:	e63a      	b.n	8001d7e <__aeabi_dmul+0xc2>
 8002108:	f000 fce2 	bl	8002ad0 <__clzsi2>
 800210c:	0001      	movs	r1, r0
 800210e:	0002      	movs	r2, r0
 8002110:	3115      	adds	r1, #21
 8002112:	3220      	adds	r2, #32
 8002114:	291c      	cmp	r1, #28
 8002116:	dc00      	bgt.n	800211a <__aeabi_dmul+0x45e>
 8002118:	e74b      	b.n	8001fb2 <__aeabi_dmul+0x2f6>
 800211a:	0034      	movs	r4, r6
 800211c:	3808      	subs	r0, #8
 800211e:	2500      	movs	r5, #0
 8002120:	4084      	lsls	r4, r0
 8002122:	e750      	b.n	8001fc6 <__aeabi_dmul+0x30a>
 8002124:	f000 fcd4 	bl	8002ad0 <__clzsi2>
 8002128:	0003      	movs	r3, r0
 800212a:	001a      	movs	r2, r3
 800212c:	3215      	adds	r2, #21
 800212e:	3020      	adds	r0, #32
 8002130:	2a1c      	cmp	r2, #28
 8002132:	dc00      	bgt.n	8002136 <__aeabi_dmul+0x47a>
 8002134:	e71e      	b.n	8001f74 <__aeabi_dmul+0x2b8>
 8002136:	4656      	mov	r6, sl
 8002138:	3b08      	subs	r3, #8
 800213a:	2200      	movs	r2, #0
 800213c:	409e      	lsls	r6, r3
 800213e:	e723      	b.n	8001f88 <__aeabi_dmul+0x2cc>
 8002140:	9b00      	ldr	r3, [sp, #0]
 8002142:	469c      	mov	ip, r3
 8002144:	e6e6      	b.n	8001f14 <__aeabi_dmul+0x258>
 8002146:	4912      	ldr	r1, [pc, #72]	; (8002190 <__aeabi_dmul+0x4d4>)
 8002148:	0022      	movs	r2, r4
 800214a:	4461      	add	r1, ip
 800214c:	002e      	movs	r6, r5
 800214e:	408d      	lsls	r5, r1
 8002150:	408a      	lsls	r2, r1
 8002152:	40c6      	lsrs	r6, r0
 8002154:	1e69      	subs	r1, r5, #1
 8002156:	418d      	sbcs	r5, r1
 8002158:	4332      	orrs	r2, r6
 800215a:	432a      	orrs	r2, r5
 800215c:	40c4      	lsrs	r4, r0
 800215e:	0753      	lsls	r3, r2, #29
 8002160:	d0b6      	beq.n	80020d0 <__aeabi_dmul+0x414>
 8002162:	210f      	movs	r1, #15
 8002164:	4011      	ands	r1, r2
 8002166:	2904      	cmp	r1, #4
 8002168:	d1ac      	bne.n	80020c4 <__aeabi_dmul+0x408>
 800216a:	e7b1      	b.n	80020d0 <__aeabi_dmul+0x414>
 800216c:	0765      	lsls	r5, r4, #29
 800216e:	0264      	lsls	r4, r4, #9
 8002170:	0b24      	lsrs	r4, r4, #12
 8002172:	08d2      	lsrs	r2, r2, #3
 8002174:	4315      	orrs	r5, r2
 8002176:	2200      	movs	r2, #0
 8002178:	e601      	b.n	8001d7e <__aeabi_dmul+0xc2>
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	0312      	lsls	r2, r2, #12
 800217e:	4314      	orrs	r4, r2
 8002180:	0324      	lsls	r4, r4, #12
 8002182:	4a01      	ldr	r2, [pc, #4]	; (8002188 <__aeabi_dmul+0x4cc>)
 8002184:	0b24      	lsrs	r4, r4, #12
 8002186:	e5fa      	b.n	8001d7e <__aeabi_dmul+0xc2>
 8002188:	000007ff 	.word	0x000007ff
 800218c:	0000043e 	.word	0x0000043e
 8002190:	0000041e 	.word	0x0000041e

08002194 <__aeabi_dsub>:
 8002194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002196:	4657      	mov	r7, sl
 8002198:	464e      	mov	r6, r9
 800219a:	4645      	mov	r5, r8
 800219c:	46de      	mov	lr, fp
 800219e:	b5e0      	push	{r5, r6, r7, lr}
 80021a0:	001e      	movs	r6, r3
 80021a2:	0017      	movs	r7, r2
 80021a4:	004a      	lsls	r2, r1, #1
 80021a6:	030b      	lsls	r3, r1, #12
 80021a8:	0d52      	lsrs	r2, r2, #21
 80021aa:	0a5b      	lsrs	r3, r3, #9
 80021ac:	4690      	mov	r8, r2
 80021ae:	0f42      	lsrs	r2, r0, #29
 80021b0:	431a      	orrs	r2, r3
 80021b2:	0fcd      	lsrs	r5, r1, #31
 80021b4:	4ccd      	ldr	r4, [pc, #820]	; (80024ec <__aeabi_dsub+0x358>)
 80021b6:	0331      	lsls	r1, r6, #12
 80021b8:	00c3      	lsls	r3, r0, #3
 80021ba:	4694      	mov	ip, r2
 80021bc:	0070      	lsls	r0, r6, #1
 80021be:	0f7a      	lsrs	r2, r7, #29
 80021c0:	0a49      	lsrs	r1, r1, #9
 80021c2:	00ff      	lsls	r7, r7, #3
 80021c4:	469a      	mov	sl, r3
 80021c6:	46b9      	mov	r9, r7
 80021c8:	0d40      	lsrs	r0, r0, #21
 80021ca:	0ff6      	lsrs	r6, r6, #31
 80021cc:	4311      	orrs	r1, r2
 80021ce:	42a0      	cmp	r0, r4
 80021d0:	d100      	bne.n	80021d4 <__aeabi_dsub+0x40>
 80021d2:	e0b1      	b.n	8002338 <__aeabi_dsub+0x1a4>
 80021d4:	2201      	movs	r2, #1
 80021d6:	4056      	eors	r6, r2
 80021d8:	46b3      	mov	fp, r6
 80021da:	42b5      	cmp	r5, r6
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dsub+0x4c>
 80021de:	e088      	b.n	80022f2 <__aeabi_dsub+0x15e>
 80021e0:	4642      	mov	r2, r8
 80021e2:	1a12      	subs	r2, r2, r0
 80021e4:	2a00      	cmp	r2, #0
 80021e6:	dc00      	bgt.n	80021ea <__aeabi_dsub+0x56>
 80021e8:	e0ae      	b.n	8002348 <__aeabi_dsub+0x1b4>
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x5c>
 80021ee:	e0c1      	b.n	8002374 <__aeabi_dsub+0x1e0>
 80021f0:	48be      	ldr	r0, [pc, #760]	; (80024ec <__aeabi_dsub+0x358>)
 80021f2:	4580      	cmp	r8, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x64>
 80021f6:	e151      	b.n	800249c <__aeabi_dsub+0x308>
 80021f8:	2080      	movs	r0, #128	; 0x80
 80021fa:	0400      	lsls	r0, r0, #16
 80021fc:	4301      	orrs	r1, r0
 80021fe:	2a38      	cmp	r2, #56	; 0x38
 8002200:	dd00      	ble.n	8002204 <__aeabi_dsub+0x70>
 8002202:	e17b      	b.n	80024fc <__aeabi_dsub+0x368>
 8002204:	2a1f      	cmp	r2, #31
 8002206:	dd00      	ble.n	800220a <__aeabi_dsub+0x76>
 8002208:	e1ee      	b.n	80025e8 <__aeabi_dsub+0x454>
 800220a:	2020      	movs	r0, #32
 800220c:	003e      	movs	r6, r7
 800220e:	1a80      	subs	r0, r0, r2
 8002210:	000c      	movs	r4, r1
 8002212:	40d6      	lsrs	r6, r2
 8002214:	40d1      	lsrs	r1, r2
 8002216:	4087      	lsls	r7, r0
 8002218:	4662      	mov	r2, ip
 800221a:	4084      	lsls	r4, r0
 800221c:	1a52      	subs	r2, r2, r1
 800221e:	1e78      	subs	r0, r7, #1
 8002220:	4187      	sbcs	r7, r0
 8002222:	4694      	mov	ip, r2
 8002224:	4334      	orrs	r4, r6
 8002226:	4327      	orrs	r7, r4
 8002228:	1bdc      	subs	r4, r3, r7
 800222a:	42a3      	cmp	r3, r4
 800222c:	419b      	sbcs	r3, r3
 800222e:	4662      	mov	r2, ip
 8002230:	425b      	negs	r3, r3
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	4699      	mov	r9, r3
 8002236:	464b      	mov	r3, r9
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	d400      	bmi.n	800223e <__aeabi_dsub+0xaa>
 800223c:	e118      	b.n	8002470 <__aeabi_dsub+0x2dc>
 800223e:	464b      	mov	r3, r9
 8002240:	0258      	lsls	r0, r3, #9
 8002242:	0a43      	lsrs	r3, r0, #9
 8002244:	4699      	mov	r9, r3
 8002246:	464b      	mov	r3, r9
 8002248:	2b00      	cmp	r3, #0
 800224a:	d100      	bne.n	800224e <__aeabi_dsub+0xba>
 800224c:	e137      	b.n	80024be <__aeabi_dsub+0x32a>
 800224e:	4648      	mov	r0, r9
 8002250:	f000 fc3e 	bl	8002ad0 <__clzsi2>
 8002254:	0001      	movs	r1, r0
 8002256:	3908      	subs	r1, #8
 8002258:	2320      	movs	r3, #32
 800225a:	0022      	movs	r2, r4
 800225c:	4648      	mov	r0, r9
 800225e:	1a5b      	subs	r3, r3, r1
 8002260:	40da      	lsrs	r2, r3
 8002262:	4088      	lsls	r0, r1
 8002264:	408c      	lsls	r4, r1
 8002266:	4643      	mov	r3, r8
 8002268:	4310      	orrs	r0, r2
 800226a:	4588      	cmp	r8, r1
 800226c:	dd00      	ble.n	8002270 <__aeabi_dsub+0xdc>
 800226e:	e136      	b.n	80024de <__aeabi_dsub+0x34a>
 8002270:	1ac9      	subs	r1, r1, r3
 8002272:	1c4b      	adds	r3, r1, #1
 8002274:	2b1f      	cmp	r3, #31
 8002276:	dd00      	ble.n	800227a <__aeabi_dsub+0xe6>
 8002278:	e0ea      	b.n	8002450 <__aeabi_dsub+0x2bc>
 800227a:	2220      	movs	r2, #32
 800227c:	0026      	movs	r6, r4
 800227e:	1ad2      	subs	r2, r2, r3
 8002280:	0001      	movs	r1, r0
 8002282:	4094      	lsls	r4, r2
 8002284:	40de      	lsrs	r6, r3
 8002286:	40d8      	lsrs	r0, r3
 8002288:	2300      	movs	r3, #0
 800228a:	4091      	lsls	r1, r2
 800228c:	1e62      	subs	r2, r4, #1
 800228e:	4194      	sbcs	r4, r2
 8002290:	4681      	mov	r9, r0
 8002292:	4698      	mov	r8, r3
 8002294:	4331      	orrs	r1, r6
 8002296:	430c      	orrs	r4, r1
 8002298:	0763      	lsls	r3, r4, #29
 800229a:	d009      	beq.n	80022b0 <__aeabi_dsub+0x11c>
 800229c:	230f      	movs	r3, #15
 800229e:	4023      	ands	r3, r4
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d005      	beq.n	80022b0 <__aeabi_dsub+0x11c>
 80022a4:	1d23      	adds	r3, r4, #4
 80022a6:	42a3      	cmp	r3, r4
 80022a8:	41a4      	sbcs	r4, r4
 80022aa:	4264      	negs	r4, r4
 80022ac:	44a1      	add	r9, r4
 80022ae:	001c      	movs	r4, r3
 80022b0:	464b      	mov	r3, r9
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	d400      	bmi.n	80022b8 <__aeabi_dsub+0x124>
 80022b6:	e0de      	b.n	8002476 <__aeabi_dsub+0x2e2>
 80022b8:	4641      	mov	r1, r8
 80022ba:	4b8c      	ldr	r3, [pc, #560]	; (80024ec <__aeabi_dsub+0x358>)
 80022bc:	3101      	adds	r1, #1
 80022be:	4299      	cmp	r1, r3
 80022c0:	d100      	bne.n	80022c4 <__aeabi_dsub+0x130>
 80022c2:	e0e7      	b.n	8002494 <__aeabi_dsub+0x300>
 80022c4:	464b      	mov	r3, r9
 80022c6:	488a      	ldr	r0, [pc, #552]	; (80024f0 <__aeabi_dsub+0x35c>)
 80022c8:	08e4      	lsrs	r4, r4, #3
 80022ca:	4003      	ands	r3, r0
 80022cc:	0018      	movs	r0, r3
 80022ce:	0549      	lsls	r1, r1, #21
 80022d0:	075b      	lsls	r3, r3, #29
 80022d2:	0240      	lsls	r0, r0, #9
 80022d4:	4323      	orrs	r3, r4
 80022d6:	0d4a      	lsrs	r2, r1, #21
 80022d8:	0b04      	lsrs	r4, r0, #12
 80022da:	0512      	lsls	r2, r2, #20
 80022dc:	07ed      	lsls	r5, r5, #31
 80022de:	4322      	orrs	r2, r4
 80022e0:	432a      	orrs	r2, r5
 80022e2:	0018      	movs	r0, r3
 80022e4:	0011      	movs	r1, r2
 80022e6:	bcf0      	pop	{r4, r5, r6, r7}
 80022e8:	46bb      	mov	fp, r7
 80022ea:	46b2      	mov	sl, r6
 80022ec:	46a9      	mov	r9, r5
 80022ee:	46a0      	mov	r8, r4
 80022f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022f2:	4642      	mov	r2, r8
 80022f4:	1a12      	subs	r2, r2, r0
 80022f6:	2a00      	cmp	r2, #0
 80022f8:	dd52      	ble.n	80023a0 <__aeabi_dsub+0x20c>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x16c>
 80022fe:	e09c      	b.n	800243a <__aeabi_dsub+0x2a6>
 8002300:	45a0      	cmp	r8, r4
 8002302:	d100      	bne.n	8002306 <__aeabi_dsub+0x172>
 8002304:	e0ca      	b.n	800249c <__aeabi_dsub+0x308>
 8002306:	2080      	movs	r0, #128	; 0x80
 8002308:	0400      	lsls	r0, r0, #16
 800230a:	4301      	orrs	r1, r0
 800230c:	2a38      	cmp	r2, #56	; 0x38
 800230e:	dd00      	ble.n	8002312 <__aeabi_dsub+0x17e>
 8002310:	e149      	b.n	80025a6 <__aeabi_dsub+0x412>
 8002312:	2a1f      	cmp	r2, #31
 8002314:	dc00      	bgt.n	8002318 <__aeabi_dsub+0x184>
 8002316:	e197      	b.n	8002648 <__aeabi_dsub+0x4b4>
 8002318:	0010      	movs	r0, r2
 800231a:	000e      	movs	r6, r1
 800231c:	3820      	subs	r0, #32
 800231e:	40c6      	lsrs	r6, r0
 8002320:	2a20      	cmp	r2, #32
 8002322:	d004      	beq.n	800232e <__aeabi_dsub+0x19a>
 8002324:	2040      	movs	r0, #64	; 0x40
 8002326:	1a82      	subs	r2, r0, r2
 8002328:	4091      	lsls	r1, r2
 800232a:	430f      	orrs	r7, r1
 800232c:	46b9      	mov	r9, r7
 800232e:	464c      	mov	r4, r9
 8002330:	1e62      	subs	r2, r4, #1
 8002332:	4194      	sbcs	r4, r2
 8002334:	4334      	orrs	r4, r6
 8002336:	e13a      	b.n	80025ae <__aeabi_dsub+0x41a>
 8002338:	000a      	movs	r2, r1
 800233a:	433a      	orrs	r2, r7
 800233c:	d028      	beq.n	8002390 <__aeabi_dsub+0x1fc>
 800233e:	46b3      	mov	fp, r6
 8002340:	42b5      	cmp	r5, r6
 8002342:	d02b      	beq.n	800239c <__aeabi_dsub+0x208>
 8002344:	4a6b      	ldr	r2, [pc, #428]	; (80024f4 <__aeabi_dsub+0x360>)
 8002346:	4442      	add	r2, r8
 8002348:	2a00      	cmp	r2, #0
 800234a:	d05d      	beq.n	8002408 <__aeabi_dsub+0x274>
 800234c:	4642      	mov	r2, r8
 800234e:	4644      	mov	r4, r8
 8002350:	1a82      	subs	r2, r0, r2
 8002352:	2c00      	cmp	r4, #0
 8002354:	d000      	beq.n	8002358 <__aeabi_dsub+0x1c4>
 8002356:	e0f5      	b.n	8002544 <__aeabi_dsub+0x3b0>
 8002358:	4665      	mov	r5, ip
 800235a:	431d      	orrs	r5, r3
 800235c:	d100      	bne.n	8002360 <__aeabi_dsub+0x1cc>
 800235e:	e19c      	b.n	800269a <__aeabi_dsub+0x506>
 8002360:	1e55      	subs	r5, r2, #1
 8002362:	2a01      	cmp	r2, #1
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x1d4>
 8002366:	e1fb      	b.n	8002760 <__aeabi_dsub+0x5cc>
 8002368:	4c60      	ldr	r4, [pc, #384]	; (80024ec <__aeabi_dsub+0x358>)
 800236a:	42a2      	cmp	r2, r4
 800236c:	d100      	bne.n	8002370 <__aeabi_dsub+0x1dc>
 800236e:	e1bd      	b.n	80026ec <__aeabi_dsub+0x558>
 8002370:	002a      	movs	r2, r5
 8002372:	e0f0      	b.n	8002556 <__aeabi_dsub+0x3c2>
 8002374:	0008      	movs	r0, r1
 8002376:	4338      	orrs	r0, r7
 8002378:	d100      	bne.n	800237c <__aeabi_dsub+0x1e8>
 800237a:	e0c3      	b.n	8002504 <__aeabi_dsub+0x370>
 800237c:	1e50      	subs	r0, r2, #1
 800237e:	2a01      	cmp	r2, #1
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x1f0>
 8002382:	e1a8      	b.n	80026d6 <__aeabi_dsub+0x542>
 8002384:	4c59      	ldr	r4, [pc, #356]	; (80024ec <__aeabi_dsub+0x358>)
 8002386:	42a2      	cmp	r2, r4
 8002388:	d100      	bne.n	800238c <__aeabi_dsub+0x1f8>
 800238a:	e087      	b.n	800249c <__aeabi_dsub+0x308>
 800238c:	0002      	movs	r2, r0
 800238e:	e736      	b.n	80021fe <__aeabi_dsub+0x6a>
 8002390:	2201      	movs	r2, #1
 8002392:	4056      	eors	r6, r2
 8002394:	46b3      	mov	fp, r6
 8002396:	42b5      	cmp	r5, r6
 8002398:	d000      	beq.n	800239c <__aeabi_dsub+0x208>
 800239a:	e721      	b.n	80021e0 <__aeabi_dsub+0x4c>
 800239c:	4a55      	ldr	r2, [pc, #340]	; (80024f4 <__aeabi_dsub+0x360>)
 800239e:	4442      	add	r2, r8
 80023a0:	2a00      	cmp	r2, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x212>
 80023a4:	e0b5      	b.n	8002512 <__aeabi_dsub+0x37e>
 80023a6:	4642      	mov	r2, r8
 80023a8:	4644      	mov	r4, r8
 80023aa:	1a82      	subs	r2, r0, r2
 80023ac:	2c00      	cmp	r4, #0
 80023ae:	d100      	bne.n	80023b2 <__aeabi_dsub+0x21e>
 80023b0:	e138      	b.n	8002624 <__aeabi_dsub+0x490>
 80023b2:	4e4e      	ldr	r6, [pc, #312]	; (80024ec <__aeabi_dsub+0x358>)
 80023b4:	42b0      	cmp	r0, r6
 80023b6:	d100      	bne.n	80023ba <__aeabi_dsub+0x226>
 80023b8:	e1de      	b.n	8002778 <__aeabi_dsub+0x5e4>
 80023ba:	2680      	movs	r6, #128	; 0x80
 80023bc:	4664      	mov	r4, ip
 80023be:	0436      	lsls	r6, r6, #16
 80023c0:	4334      	orrs	r4, r6
 80023c2:	46a4      	mov	ip, r4
 80023c4:	2a38      	cmp	r2, #56	; 0x38
 80023c6:	dd00      	ble.n	80023ca <__aeabi_dsub+0x236>
 80023c8:	e196      	b.n	80026f8 <__aeabi_dsub+0x564>
 80023ca:	2a1f      	cmp	r2, #31
 80023cc:	dd00      	ble.n	80023d0 <__aeabi_dsub+0x23c>
 80023ce:	e224      	b.n	800281a <__aeabi_dsub+0x686>
 80023d0:	2620      	movs	r6, #32
 80023d2:	1ab4      	subs	r4, r6, r2
 80023d4:	46a2      	mov	sl, r4
 80023d6:	4664      	mov	r4, ip
 80023d8:	4656      	mov	r6, sl
 80023da:	40b4      	lsls	r4, r6
 80023dc:	46a1      	mov	r9, r4
 80023de:	001c      	movs	r4, r3
 80023e0:	464e      	mov	r6, r9
 80023e2:	40d4      	lsrs	r4, r2
 80023e4:	4326      	orrs	r6, r4
 80023e6:	0034      	movs	r4, r6
 80023e8:	4656      	mov	r6, sl
 80023ea:	40b3      	lsls	r3, r6
 80023ec:	1e5e      	subs	r6, r3, #1
 80023ee:	41b3      	sbcs	r3, r6
 80023f0:	431c      	orrs	r4, r3
 80023f2:	4663      	mov	r3, ip
 80023f4:	40d3      	lsrs	r3, r2
 80023f6:	18c9      	adds	r1, r1, r3
 80023f8:	19e4      	adds	r4, r4, r7
 80023fa:	42bc      	cmp	r4, r7
 80023fc:	41bf      	sbcs	r7, r7
 80023fe:	427f      	negs	r7, r7
 8002400:	46b9      	mov	r9, r7
 8002402:	4680      	mov	r8, r0
 8002404:	4489      	add	r9, r1
 8002406:	e0d8      	b.n	80025ba <__aeabi_dsub+0x426>
 8002408:	4640      	mov	r0, r8
 800240a:	4c3b      	ldr	r4, [pc, #236]	; (80024f8 <__aeabi_dsub+0x364>)
 800240c:	3001      	adds	r0, #1
 800240e:	4220      	tst	r0, r4
 8002410:	d000      	beq.n	8002414 <__aeabi_dsub+0x280>
 8002412:	e0b4      	b.n	800257e <__aeabi_dsub+0x3ea>
 8002414:	4640      	mov	r0, r8
 8002416:	2800      	cmp	r0, #0
 8002418:	d000      	beq.n	800241c <__aeabi_dsub+0x288>
 800241a:	e144      	b.n	80026a6 <__aeabi_dsub+0x512>
 800241c:	4660      	mov	r0, ip
 800241e:	4318      	orrs	r0, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x290>
 8002422:	e190      	b.n	8002746 <__aeabi_dsub+0x5b2>
 8002424:	0008      	movs	r0, r1
 8002426:	4338      	orrs	r0, r7
 8002428:	d000      	beq.n	800242c <__aeabi_dsub+0x298>
 800242a:	e1aa      	b.n	8002782 <__aeabi_dsub+0x5ee>
 800242c:	4661      	mov	r1, ip
 800242e:	08db      	lsrs	r3, r3, #3
 8002430:	0749      	lsls	r1, r1, #29
 8002432:	430b      	orrs	r3, r1
 8002434:	4661      	mov	r1, ip
 8002436:	08cc      	lsrs	r4, r1, #3
 8002438:	e027      	b.n	800248a <__aeabi_dsub+0x2f6>
 800243a:	0008      	movs	r0, r1
 800243c:	4338      	orrs	r0, r7
 800243e:	d061      	beq.n	8002504 <__aeabi_dsub+0x370>
 8002440:	1e50      	subs	r0, r2, #1
 8002442:	2a01      	cmp	r2, #1
 8002444:	d100      	bne.n	8002448 <__aeabi_dsub+0x2b4>
 8002446:	e139      	b.n	80026bc <__aeabi_dsub+0x528>
 8002448:	42a2      	cmp	r2, r4
 800244a:	d027      	beq.n	800249c <__aeabi_dsub+0x308>
 800244c:	0002      	movs	r2, r0
 800244e:	e75d      	b.n	800230c <__aeabi_dsub+0x178>
 8002450:	0002      	movs	r2, r0
 8002452:	391f      	subs	r1, #31
 8002454:	40ca      	lsrs	r2, r1
 8002456:	0011      	movs	r1, r2
 8002458:	2b20      	cmp	r3, #32
 800245a:	d003      	beq.n	8002464 <__aeabi_dsub+0x2d0>
 800245c:	2240      	movs	r2, #64	; 0x40
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	4098      	lsls	r0, r3
 8002462:	4304      	orrs	r4, r0
 8002464:	1e63      	subs	r3, r4, #1
 8002466:	419c      	sbcs	r4, r3
 8002468:	2300      	movs	r3, #0
 800246a:	4699      	mov	r9, r3
 800246c:	4698      	mov	r8, r3
 800246e:	430c      	orrs	r4, r1
 8002470:	0763      	lsls	r3, r4, #29
 8002472:	d000      	beq.n	8002476 <__aeabi_dsub+0x2e2>
 8002474:	e712      	b.n	800229c <__aeabi_dsub+0x108>
 8002476:	464b      	mov	r3, r9
 8002478:	464a      	mov	r2, r9
 800247a:	08e4      	lsrs	r4, r4, #3
 800247c:	075b      	lsls	r3, r3, #29
 800247e:	4323      	orrs	r3, r4
 8002480:	08d4      	lsrs	r4, r2, #3
 8002482:	4642      	mov	r2, r8
 8002484:	4919      	ldr	r1, [pc, #100]	; (80024ec <__aeabi_dsub+0x358>)
 8002486:	428a      	cmp	r2, r1
 8002488:	d00e      	beq.n	80024a8 <__aeabi_dsub+0x314>
 800248a:	0324      	lsls	r4, r4, #12
 800248c:	0552      	lsls	r2, r2, #21
 800248e:	0b24      	lsrs	r4, r4, #12
 8002490:	0d52      	lsrs	r2, r2, #21
 8002492:	e722      	b.n	80022da <__aeabi_dsub+0x146>
 8002494:	000a      	movs	r2, r1
 8002496:	2400      	movs	r4, #0
 8002498:	2300      	movs	r3, #0
 800249a:	e71e      	b.n	80022da <__aeabi_dsub+0x146>
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	4662      	mov	r2, ip
 80024a0:	0752      	lsls	r2, r2, #29
 80024a2:	4313      	orrs	r3, r2
 80024a4:	4662      	mov	r2, ip
 80024a6:	08d4      	lsrs	r4, r2, #3
 80024a8:	001a      	movs	r2, r3
 80024aa:	4322      	orrs	r2, r4
 80024ac:	d100      	bne.n	80024b0 <__aeabi_dsub+0x31c>
 80024ae:	e1fc      	b.n	80028aa <__aeabi_dsub+0x716>
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	0312      	lsls	r2, r2, #12
 80024b4:	4314      	orrs	r4, r2
 80024b6:	0324      	lsls	r4, r4, #12
 80024b8:	4a0c      	ldr	r2, [pc, #48]	; (80024ec <__aeabi_dsub+0x358>)
 80024ba:	0b24      	lsrs	r4, r4, #12
 80024bc:	e70d      	b.n	80022da <__aeabi_dsub+0x146>
 80024be:	0020      	movs	r0, r4
 80024c0:	f000 fb06 	bl	8002ad0 <__clzsi2>
 80024c4:	0001      	movs	r1, r0
 80024c6:	3118      	adds	r1, #24
 80024c8:	291f      	cmp	r1, #31
 80024ca:	dc00      	bgt.n	80024ce <__aeabi_dsub+0x33a>
 80024cc:	e6c4      	b.n	8002258 <__aeabi_dsub+0xc4>
 80024ce:	3808      	subs	r0, #8
 80024d0:	4084      	lsls	r4, r0
 80024d2:	4643      	mov	r3, r8
 80024d4:	0020      	movs	r0, r4
 80024d6:	2400      	movs	r4, #0
 80024d8:	4588      	cmp	r8, r1
 80024da:	dc00      	bgt.n	80024de <__aeabi_dsub+0x34a>
 80024dc:	e6c8      	b.n	8002270 <__aeabi_dsub+0xdc>
 80024de:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <__aeabi_dsub+0x35c>)
 80024e0:	1a5b      	subs	r3, r3, r1
 80024e2:	4010      	ands	r0, r2
 80024e4:	4698      	mov	r8, r3
 80024e6:	4681      	mov	r9, r0
 80024e8:	e6d6      	b.n	8002298 <__aeabi_dsub+0x104>
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	000007ff 	.word	0x000007ff
 80024f0:	ff7fffff 	.word	0xff7fffff
 80024f4:	fffff801 	.word	0xfffff801
 80024f8:	000007fe 	.word	0x000007fe
 80024fc:	430f      	orrs	r7, r1
 80024fe:	1e7a      	subs	r2, r7, #1
 8002500:	4197      	sbcs	r7, r2
 8002502:	e691      	b.n	8002228 <__aeabi_dsub+0x94>
 8002504:	4661      	mov	r1, ip
 8002506:	08db      	lsrs	r3, r3, #3
 8002508:	0749      	lsls	r1, r1, #29
 800250a:	430b      	orrs	r3, r1
 800250c:	4661      	mov	r1, ip
 800250e:	08cc      	lsrs	r4, r1, #3
 8002510:	e7b8      	b.n	8002484 <__aeabi_dsub+0x2f0>
 8002512:	4640      	mov	r0, r8
 8002514:	4cd3      	ldr	r4, [pc, #844]	; (8002864 <__aeabi_dsub+0x6d0>)
 8002516:	3001      	adds	r0, #1
 8002518:	4220      	tst	r0, r4
 800251a:	d000      	beq.n	800251e <__aeabi_dsub+0x38a>
 800251c:	e0a2      	b.n	8002664 <__aeabi_dsub+0x4d0>
 800251e:	4640      	mov	r0, r8
 8002520:	2800      	cmp	r0, #0
 8002522:	d000      	beq.n	8002526 <__aeabi_dsub+0x392>
 8002524:	e101      	b.n	800272a <__aeabi_dsub+0x596>
 8002526:	4660      	mov	r0, ip
 8002528:	4318      	orrs	r0, r3
 800252a:	d100      	bne.n	800252e <__aeabi_dsub+0x39a>
 800252c:	e15e      	b.n	80027ec <__aeabi_dsub+0x658>
 800252e:	0008      	movs	r0, r1
 8002530:	4338      	orrs	r0, r7
 8002532:	d000      	beq.n	8002536 <__aeabi_dsub+0x3a2>
 8002534:	e15f      	b.n	80027f6 <__aeabi_dsub+0x662>
 8002536:	4661      	mov	r1, ip
 8002538:	08db      	lsrs	r3, r3, #3
 800253a:	0749      	lsls	r1, r1, #29
 800253c:	430b      	orrs	r3, r1
 800253e:	4661      	mov	r1, ip
 8002540:	08cc      	lsrs	r4, r1, #3
 8002542:	e7a2      	b.n	800248a <__aeabi_dsub+0x2f6>
 8002544:	4dc8      	ldr	r5, [pc, #800]	; (8002868 <__aeabi_dsub+0x6d4>)
 8002546:	42a8      	cmp	r0, r5
 8002548:	d100      	bne.n	800254c <__aeabi_dsub+0x3b8>
 800254a:	e0cf      	b.n	80026ec <__aeabi_dsub+0x558>
 800254c:	2580      	movs	r5, #128	; 0x80
 800254e:	4664      	mov	r4, ip
 8002550:	042d      	lsls	r5, r5, #16
 8002552:	432c      	orrs	r4, r5
 8002554:	46a4      	mov	ip, r4
 8002556:	2a38      	cmp	r2, #56	; 0x38
 8002558:	dc56      	bgt.n	8002608 <__aeabi_dsub+0x474>
 800255a:	2a1f      	cmp	r2, #31
 800255c:	dd00      	ble.n	8002560 <__aeabi_dsub+0x3cc>
 800255e:	e0d1      	b.n	8002704 <__aeabi_dsub+0x570>
 8002560:	2520      	movs	r5, #32
 8002562:	001e      	movs	r6, r3
 8002564:	1aad      	subs	r5, r5, r2
 8002566:	4664      	mov	r4, ip
 8002568:	40ab      	lsls	r3, r5
 800256a:	40ac      	lsls	r4, r5
 800256c:	40d6      	lsrs	r6, r2
 800256e:	1e5d      	subs	r5, r3, #1
 8002570:	41ab      	sbcs	r3, r5
 8002572:	4334      	orrs	r4, r6
 8002574:	4323      	orrs	r3, r4
 8002576:	4664      	mov	r4, ip
 8002578:	40d4      	lsrs	r4, r2
 800257a:	1b09      	subs	r1, r1, r4
 800257c:	e049      	b.n	8002612 <__aeabi_dsub+0x47e>
 800257e:	4660      	mov	r0, ip
 8002580:	1bdc      	subs	r4, r3, r7
 8002582:	1a46      	subs	r6, r0, r1
 8002584:	42a3      	cmp	r3, r4
 8002586:	4180      	sbcs	r0, r0
 8002588:	4240      	negs	r0, r0
 800258a:	4681      	mov	r9, r0
 800258c:	0030      	movs	r0, r6
 800258e:	464e      	mov	r6, r9
 8002590:	1b80      	subs	r0, r0, r6
 8002592:	4681      	mov	r9, r0
 8002594:	0200      	lsls	r0, r0, #8
 8002596:	d476      	bmi.n	8002686 <__aeabi_dsub+0x4f2>
 8002598:	464b      	mov	r3, r9
 800259a:	4323      	orrs	r3, r4
 800259c:	d000      	beq.n	80025a0 <__aeabi_dsub+0x40c>
 800259e:	e652      	b.n	8002246 <__aeabi_dsub+0xb2>
 80025a0:	2400      	movs	r4, #0
 80025a2:	2500      	movs	r5, #0
 80025a4:	e771      	b.n	800248a <__aeabi_dsub+0x2f6>
 80025a6:	4339      	orrs	r1, r7
 80025a8:	000c      	movs	r4, r1
 80025aa:	1e62      	subs	r2, r4, #1
 80025ac:	4194      	sbcs	r4, r2
 80025ae:	18e4      	adds	r4, r4, r3
 80025b0:	429c      	cmp	r4, r3
 80025b2:	419b      	sbcs	r3, r3
 80025b4:	425b      	negs	r3, r3
 80025b6:	4463      	add	r3, ip
 80025b8:	4699      	mov	r9, r3
 80025ba:	464b      	mov	r3, r9
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	d400      	bmi.n	80025c2 <__aeabi_dsub+0x42e>
 80025c0:	e756      	b.n	8002470 <__aeabi_dsub+0x2dc>
 80025c2:	2301      	movs	r3, #1
 80025c4:	469c      	mov	ip, r3
 80025c6:	4ba8      	ldr	r3, [pc, #672]	; (8002868 <__aeabi_dsub+0x6d4>)
 80025c8:	44e0      	add	r8, ip
 80025ca:	4598      	cmp	r8, r3
 80025cc:	d038      	beq.n	8002640 <__aeabi_dsub+0x4ac>
 80025ce:	464b      	mov	r3, r9
 80025d0:	48a6      	ldr	r0, [pc, #664]	; (800286c <__aeabi_dsub+0x6d8>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	4003      	ands	r3, r0
 80025d6:	0018      	movs	r0, r3
 80025d8:	0863      	lsrs	r3, r4, #1
 80025da:	4014      	ands	r4, r2
 80025dc:	431c      	orrs	r4, r3
 80025de:	07c3      	lsls	r3, r0, #31
 80025e0:	431c      	orrs	r4, r3
 80025e2:	0843      	lsrs	r3, r0, #1
 80025e4:	4699      	mov	r9, r3
 80025e6:	e657      	b.n	8002298 <__aeabi_dsub+0x104>
 80025e8:	0010      	movs	r0, r2
 80025ea:	000e      	movs	r6, r1
 80025ec:	3820      	subs	r0, #32
 80025ee:	40c6      	lsrs	r6, r0
 80025f0:	2a20      	cmp	r2, #32
 80025f2:	d004      	beq.n	80025fe <__aeabi_dsub+0x46a>
 80025f4:	2040      	movs	r0, #64	; 0x40
 80025f6:	1a82      	subs	r2, r0, r2
 80025f8:	4091      	lsls	r1, r2
 80025fa:	430f      	orrs	r7, r1
 80025fc:	46b9      	mov	r9, r7
 80025fe:	464f      	mov	r7, r9
 8002600:	1e7a      	subs	r2, r7, #1
 8002602:	4197      	sbcs	r7, r2
 8002604:	4337      	orrs	r7, r6
 8002606:	e60f      	b.n	8002228 <__aeabi_dsub+0x94>
 8002608:	4662      	mov	r2, ip
 800260a:	431a      	orrs	r2, r3
 800260c:	0013      	movs	r3, r2
 800260e:	1e5a      	subs	r2, r3, #1
 8002610:	4193      	sbcs	r3, r2
 8002612:	1afc      	subs	r4, r7, r3
 8002614:	42a7      	cmp	r7, r4
 8002616:	41bf      	sbcs	r7, r7
 8002618:	427f      	negs	r7, r7
 800261a:	1bcb      	subs	r3, r1, r7
 800261c:	4699      	mov	r9, r3
 800261e:	465d      	mov	r5, fp
 8002620:	4680      	mov	r8, r0
 8002622:	e608      	b.n	8002236 <__aeabi_dsub+0xa2>
 8002624:	4666      	mov	r6, ip
 8002626:	431e      	orrs	r6, r3
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x498>
 800262a:	e0be      	b.n	80027aa <__aeabi_dsub+0x616>
 800262c:	1e56      	subs	r6, r2, #1
 800262e:	2a01      	cmp	r2, #1
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x4a0>
 8002632:	e109      	b.n	8002848 <__aeabi_dsub+0x6b4>
 8002634:	4c8c      	ldr	r4, [pc, #560]	; (8002868 <__aeabi_dsub+0x6d4>)
 8002636:	42a2      	cmp	r2, r4
 8002638:	d100      	bne.n	800263c <__aeabi_dsub+0x4a8>
 800263a:	e119      	b.n	8002870 <__aeabi_dsub+0x6dc>
 800263c:	0032      	movs	r2, r6
 800263e:	e6c1      	b.n	80023c4 <__aeabi_dsub+0x230>
 8002640:	4642      	mov	r2, r8
 8002642:	2400      	movs	r4, #0
 8002644:	2300      	movs	r3, #0
 8002646:	e648      	b.n	80022da <__aeabi_dsub+0x146>
 8002648:	2020      	movs	r0, #32
 800264a:	000c      	movs	r4, r1
 800264c:	1a80      	subs	r0, r0, r2
 800264e:	003e      	movs	r6, r7
 8002650:	4087      	lsls	r7, r0
 8002652:	4084      	lsls	r4, r0
 8002654:	40d6      	lsrs	r6, r2
 8002656:	1e78      	subs	r0, r7, #1
 8002658:	4187      	sbcs	r7, r0
 800265a:	40d1      	lsrs	r1, r2
 800265c:	4334      	orrs	r4, r6
 800265e:	433c      	orrs	r4, r7
 8002660:	448c      	add	ip, r1
 8002662:	e7a4      	b.n	80025ae <__aeabi_dsub+0x41a>
 8002664:	4a80      	ldr	r2, [pc, #512]	; (8002868 <__aeabi_dsub+0x6d4>)
 8002666:	4290      	cmp	r0, r2
 8002668:	d100      	bne.n	800266c <__aeabi_dsub+0x4d8>
 800266a:	e0e9      	b.n	8002840 <__aeabi_dsub+0x6ac>
 800266c:	19df      	adds	r7, r3, r7
 800266e:	429f      	cmp	r7, r3
 8002670:	419b      	sbcs	r3, r3
 8002672:	4461      	add	r1, ip
 8002674:	425b      	negs	r3, r3
 8002676:	18c9      	adds	r1, r1, r3
 8002678:	07cc      	lsls	r4, r1, #31
 800267a:	087f      	lsrs	r7, r7, #1
 800267c:	084b      	lsrs	r3, r1, #1
 800267e:	4699      	mov	r9, r3
 8002680:	4680      	mov	r8, r0
 8002682:	433c      	orrs	r4, r7
 8002684:	e6f4      	b.n	8002470 <__aeabi_dsub+0x2dc>
 8002686:	1afc      	subs	r4, r7, r3
 8002688:	42a7      	cmp	r7, r4
 800268a:	41bf      	sbcs	r7, r7
 800268c:	4663      	mov	r3, ip
 800268e:	427f      	negs	r7, r7
 8002690:	1ac9      	subs	r1, r1, r3
 8002692:	1bcb      	subs	r3, r1, r7
 8002694:	4699      	mov	r9, r3
 8002696:	465d      	mov	r5, fp
 8002698:	e5d5      	b.n	8002246 <__aeabi_dsub+0xb2>
 800269a:	08ff      	lsrs	r7, r7, #3
 800269c:	074b      	lsls	r3, r1, #29
 800269e:	465d      	mov	r5, fp
 80026a0:	433b      	orrs	r3, r7
 80026a2:	08cc      	lsrs	r4, r1, #3
 80026a4:	e6ee      	b.n	8002484 <__aeabi_dsub+0x2f0>
 80026a6:	4662      	mov	r2, ip
 80026a8:	431a      	orrs	r2, r3
 80026aa:	d000      	beq.n	80026ae <__aeabi_dsub+0x51a>
 80026ac:	e082      	b.n	80027b4 <__aeabi_dsub+0x620>
 80026ae:	000b      	movs	r3, r1
 80026b0:	433b      	orrs	r3, r7
 80026b2:	d11b      	bne.n	80026ec <__aeabi_dsub+0x558>
 80026b4:	2480      	movs	r4, #128	; 0x80
 80026b6:	2500      	movs	r5, #0
 80026b8:	0324      	lsls	r4, r4, #12
 80026ba:	e6f9      	b.n	80024b0 <__aeabi_dsub+0x31c>
 80026bc:	19dc      	adds	r4, r3, r7
 80026be:	429c      	cmp	r4, r3
 80026c0:	419b      	sbcs	r3, r3
 80026c2:	4461      	add	r1, ip
 80026c4:	4689      	mov	r9, r1
 80026c6:	425b      	negs	r3, r3
 80026c8:	4499      	add	r9, r3
 80026ca:	464b      	mov	r3, r9
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	d444      	bmi.n	800275a <__aeabi_dsub+0x5c6>
 80026d0:	2301      	movs	r3, #1
 80026d2:	4698      	mov	r8, r3
 80026d4:	e6cc      	b.n	8002470 <__aeabi_dsub+0x2dc>
 80026d6:	1bdc      	subs	r4, r3, r7
 80026d8:	4662      	mov	r2, ip
 80026da:	42a3      	cmp	r3, r4
 80026dc:	419b      	sbcs	r3, r3
 80026de:	1a51      	subs	r1, r2, r1
 80026e0:	425b      	negs	r3, r3
 80026e2:	1acb      	subs	r3, r1, r3
 80026e4:	4699      	mov	r9, r3
 80026e6:	2301      	movs	r3, #1
 80026e8:	4698      	mov	r8, r3
 80026ea:	e5a4      	b.n	8002236 <__aeabi_dsub+0xa2>
 80026ec:	08ff      	lsrs	r7, r7, #3
 80026ee:	074b      	lsls	r3, r1, #29
 80026f0:	465d      	mov	r5, fp
 80026f2:	433b      	orrs	r3, r7
 80026f4:	08cc      	lsrs	r4, r1, #3
 80026f6:	e6d7      	b.n	80024a8 <__aeabi_dsub+0x314>
 80026f8:	4662      	mov	r2, ip
 80026fa:	431a      	orrs	r2, r3
 80026fc:	0014      	movs	r4, r2
 80026fe:	1e63      	subs	r3, r4, #1
 8002700:	419c      	sbcs	r4, r3
 8002702:	e679      	b.n	80023f8 <__aeabi_dsub+0x264>
 8002704:	0015      	movs	r5, r2
 8002706:	4664      	mov	r4, ip
 8002708:	3d20      	subs	r5, #32
 800270a:	40ec      	lsrs	r4, r5
 800270c:	46a0      	mov	r8, r4
 800270e:	2a20      	cmp	r2, #32
 8002710:	d005      	beq.n	800271e <__aeabi_dsub+0x58a>
 8002712:	2540      	movs	r5, #64	; 0x40
 8002714:	4664      	mov	r4, ip
 8002716:	1aaa      	subs	r2, r5, r2
 8002718:	4094      	lsls	r4, r2
 800271a:	4323      	orrs	r3, r4
 800271c:	469a      	mov	sl, r3
 800271e:	4654      	mov	r4, sl
 8002720:	1e63      	subs	r3, r4, #1
 8002722:	419c      	sbcs	r4, r3
 8002724:	4643      	mov	r3, r8
 8002726:	4323      	orrs	r3, r4
 8002728:	e773      	b.n	8002612 <__aeabi_dsub+0x47e>
 800272a:	4662      	mov	r2, ip
 800272c:	431a      	orrs	r2, r3
 800272e:	d023      	beq.n	8002778 <__aeabi_dsub+0x5e4>
 8002730:	000a      	movs	r2, r1
 8002732:	433a      	orrs	r2, r7
 8002734:	d000      	beq.n	8002738 <__aeabi_dsub+0x5a4>
 8002736:	e0a0      	b.n	800287a <__aeabi_dsub+0x6e6>
 8002738:	4662      	mov	r2, ip
 800273a:	08db      	lsrs	r3, r3, #3
 800273c:	0752      	lsls	r2, r2, #29
 800273e:	4313      	orrs	r3, r2
 8002740:	4662      	mov	r2, ip
 8002742:	08d4      	lsrs	r4, r2, #3
 8002744:	e6b0      	b.n	80024a8 <__aeabi_dsub+0x314>
 8002746:	000b      	movs	r3, r1
 8002748:	433b      	orrs	r3, r7
 800274a:	d100      	bne.n	800274e <__aeabi_dsub+0x5ba>
 800274c:	e728      	b.n	80025a0 <__aeabi_dsub+0x40c>
 800274e:	08ff      	lsrs	r7, r7, #3
 8002750:	074b      	lsls	r3, r1, #29
 8002752:	465d      	mov	r5, fp
 8002754:	433b      	orrs	r3, r7
 8002756:	08cc      	lsrs	r4, r1, #3
 8002758:	e697      	b.n	800248a <__aeabi_dsub+0x2f6>
 800275a:	2302      	movs	r3, #2
 800275c:	4698      	mov	r8, r3
 800275e:	e736      	b.n	80025ce <__aeabi_dsub+0x43a>
 8002760:	1afc      	subs	r4, r7, r3
 8002762:	42a7      	cmp	r7, r4
 8002764:	41bf      	sbcs	r7, r7
 8002766:	4663      	mov	r3, ip
 8002768:	427f      	negs	r7, r7
 800276a:	1ac9      	subs	r1, r1, r3
 800276c:	1bcb      	subs	r3, r1, r7
 800276e:	4699      	mov	r9, r3
 8002770:	2301      	movs	r3, #1
 8002772:	465d      	mov	r5, fp
 8002774:	4698      	mov	r8, r3
 8002776:	e55e      	b.n	8002236 <__aeabi_dsub+0xa2>
 8002778:	074b      	lsls	r3, r1, #29
 800277a:	08ff      	lsrs	r7, r7, #3
 800277c:	433b      	orrs	r3, r7
 800277e:	08cc      	lsrs	r4, r1, #3
 8002780:	e692      	b.n	80024a8 <__aeabi_dsub+0x314>
 8002782:	1bdc      	subs	r4, r3, r7
 8002784:	4660      	mov	r0, ip
 8002786:	42a3      	cmp	r3, r4
 8002788:	41b6      	sbcs	r6, r6
 800278a:	1a40      	subs	r0, r0, r1
 800278c:	4276      	negs	r6, r6
 800278e:	1b80      	subs	r0, r0, r6
 8002790:	4681      	mov	r9, r0
 8002792:	0200      	lsls	r0, r0, #8
 8002794:	d560      	bpl.n	8002858 <__aeabi_dsub+0x6c4>
 8002796:	1afc      	subs	r4, r7, r3
 8002798:	42a7      	cmp	r7, r4
 800279a:	41bf      	sbcs	r7, r7
 800279c:	4663      	mov	r3, ip
 800279e:	427f      	negs	r7, r7
 80027a0:	1ac9      	subs	r1, r1, r3
 80027a2:	1bcb      	subs	r3, r1, r7
 80027a4:	4699      	mov	r9, r3
 80027a6:	465d      	mov	r5, fp
 80027a8:	e576      	b.n	8002298 <__aeabi_dsub+0x104>
 80027aa:	08ff      	lsrs	r7, r7, #3
 80027ac:	074b      	lsls	r3, r1, #29
 80027ae:	433b      	orrs	r3, r7
 80027b0:	08cc      	lsrs	r4, r1, #3
 80027b2:	e667      	b.n	8002484 <__aeabi_dsub+0x2f0>
 80027b4:	000a      	movs	r2, r1
 80027b6:	08db      	lsrs	r3, r3, #3
 80027b8:	433a      	orrs	r2, r7
 80027ba:	d100      	bne.n	80027be <__aeabi_dsub+0x62a>
 80027bc:	e66f      	b.n	800249e <__aeabi_dsub+0x30a>
 80027be:	4662      	mov	r2, ip
 80027c0:	0752      	lsls	r2, r2, #29
 80027c2:	4313      	orrs	r3, r2
 80027c4:	4662      	mov	r2, ip
 80027c6:	08d4      	lsrs	r4, r2, #3
 80027c8:	2280      	movs	r2, #128	; 0x80
 80027ca:	0312      	lsls	r2, r2, #12
 80027cc:	4214      	tst	r4, r2
 80027ce:	d007      	beq.n	80027e0 <__aeabi_dsub+0x64c>
 80027d0:	08c8      	lsrs	r0, r1, #3
 80027d2:	4210      	tst	r0, r2
 80027d4:	d104      	bne.n	80027e0 <__aeabi_dsub+0x64c>
 80027d6:	465d      	mov	r5, fp
 80027d8:	0004      	movs	r4, r0
 80027da:	08fb      	lsrs	r3, r7, #3
 80027dc:	0749      	lsls	r1, r1, #29
 80027de:	430b      	orrs	r3, r1
 80027e0:	0f5a      	lsrs	r2, r3, #29
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	08db      	lsrs	r3, r3, #3
 80027e6:	0752      	lsls	r2, r2, #29
 80027e8:	4313      	orrs	r3, r2
 80027ea:	e65d      	b.n	80024a8 <__aeabi_dsub+0x314>
 80027ec:	074b      	lsls	r3, r1, #29
 80027ee:	08ff      	lsrs	r7, r7, #3
 80027f0:	433b      	orrs	r3, r7
 80027f2:	08cc      	lsrs	r4, r1, #3
 80027f4:	e649      	b.n	800248a <__aeabi_dsub+0x2f6>
 80027f6:	19dc      	adds	r4, r3, r7
 80027f8:	429c      	cmp	r4, r3
 80027fa:	419b      	sbcs	r3, r3
 80027fc:	4461      	add	r1, ip
 80027fe:	4689      	mov	r9, r1
 8002800:	425b      	negs	r3, r3
 8002802:	4499      	add	r9, r3
 8002804:	464b      	mov	r3, r9
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	d400      	bmi.n	800280c <__aeabi_dsub+0x678>
 800280a:	e631      	b.n	8002470 <__aeabi_dsub+0x2dc>
 800280c:	464a      	mov	r2, r9
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <__aeabi_dsub+0x6d8>)
 8002810:	401a      	ands	r2, r3
 8002812:	2301      	movs	r3, #1
 8002814:	4691      	mov	r9, r2
 8002816:	4698      	mov	r8, r3
 8002818:	e62a      	b.n	8002470 <__aeabi_dsub+0x2dc>
 800281a:	0016      	movs	r6, r2
 800281c:	4664      	mov	r4, ip
 800281e:	3e20      	subs	r6, #32
 8002820:	40f4      	lsrs	r4, r6
 8002822:	46a0      	mov	r8, r4
 8002824:	2a20      	cmp	r2, #32
 8002826:	d005      	beq.n	8002834 <__aeabi_dsub+0x6a0>
 8002828:	2640      	movs	r6, #64	; 0x40
 800282a:	4664      	mov	r4, ip
 800282c:	1ab2      	subs	r2, r6, r2
 800282e:	4094      	lsls	r4, r2
 8002830:	4323      	orrs	r3, r4
 8002832:	469a      	mov	sl, r3
 8002834:	4654      	mov	r4, sl
 8002836:	1e63      	subs	r3, r4, #1
 8002838:	419c      	sbcs	r4, r3
 800283a:	4643      	mov	r3, r8
 800283c:	431c      	orrs	r4, r3
 800283e:	e5db      	b.n	80023f8 <__aeabi_dsub+0x264>
 8002840:	0002      	movs	r2, r0
 8002842:	2400      	movs	r4, #0
 8002844:	2300      	movs	r3, #0
 8002846:	e548      	b.n	80022da <__aeabi_dsub+0x146>
 8002848:	19dc      	adds	r4, r3, r7
 800284a:	42bc      	cmp	r4, r7
 800284c:	41bf      	sbcs	r7, r7
 800284e:	4461      	add	r1, ip
 8002850:	4689      	mov	r9, r1
 8002852:	427f      	negs	r7, r7
 8002854:	44b9      	add	r9, r7
 8002856:	e738      	b.n	80026ca <__aeabi_dsub+0x536>
 8002858:	464b      	mov	r3, r9
 800285a:	4323      	orrs	r3, r4
 800285c:	d100      	bne.n	8002860 <__aeabi_dsub+0x6cc>
 800285e:	e69f      	b.n	80025a0 <__aeabi_dsub+0x40c>
 8002860:	e606      	b.n	8002470 <__aeabi_dsub+0x2dc>
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	000007fe 	.word	0x000007fe
 8002868:	000007ff 	.word	0x000007ff
 800286c:	ff7fffff 	.word	0xff7fffff
 8002870:	08ff      	lsrs	r7, r7, #3
 8002872:	074b      	lsls	r3, r1, #29
 8002874:	433b      	orrs	r3, r7
 8002876:	08cc      	lsrs	r4, r1, #3
 8002878:	e616      	b.n	80024a8 <__aeabi_dsub+0x314>
 800287a:	4662      	mov	r2, ip
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	0752      	lsls	r2, r2, #29
 8002880:	4313      	orrs	r3, r2
 8002882:	4662      	mov	r2, ip
 8002884:	08d4      	lsrs	r4, r2, #3
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	0312      	lsls	r2, r2, #12
 800288a:	4214      	tst	r4, r2
 800288c:	d007      	beq.n	800289e <__aeabi_dsub+0x70a>
 800288e:	08c8      	lsrs	r0, r1, #3
 8002890:	4210      	tst	r0, r2
 8002892:	d104      	bne.n	800289e <__aeabi_dsub+0x70a>
 8002894:	465d      	mov	r5, fp
 8002896:	0004      	movs	r4, r0
 8002898:	08fb      	lsrs	r3, r7, #3
 800289a:	0749      	lsls	r1, r1, #29
 800289c:	430b      	orrs	r3, r1
 800289e:	0f5a      	lsrs	r2, r3, #29
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	0752      	lsls	r2, r2, #29
 80028a4:	08db      	lsrs	r3, r3, #3
 80028a6:	4313      	orrs	r3, r2
 80028a8:	e5fe      	b.n	80024a8 <__aeabi_dsub+0x314>
 80028aa:	2300      	movs	r3, #0
 80028ac:	4a01      	ldr	r2, [pc, #4]	; (80028b4 <__aeabi_dsub+0x720>)
 80028ae:	001c      	movs	r4, r3
 80028b0:	e513      	b.n	80022da <__aeabi_dsub+0x146>
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	000007ff 	.word	0x000007ff

080028b8 <__aeabi_dcmpun>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	0005      	movs	r5, r0
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <__aeabi_dcmpun+0x38>)
 80028be:	031c      	lsls	r4, r3, #12
 80028c0:	0016      	movs	r6, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	030a      	lsls	r2, r1, #12
 80028c6:	0049      	lsls	r1, r1, #1
 80028c8:	0b12      	lsrs	r2, r2, #12
 80028ca:	0d49      	lsrs	r1, r1, #21
 80028cc:	0b24      	lsrs	r4, r4, #12
 80028ce:	0d5b      	lsrs	r3, r3, #21
 80028d0:	4281      	cmp	r1, r0
 80028d2:	d008      	beq.n	80028e6 <__aeabi_dcmpun+0x2e>
 80028d4:	4a06      	ldr	r2, [pc, #24]	; (80028f0 <__aeabi_dcmpun+0x38>)
 80028d6:	2000      	movs	r0, #0
 80028d8:	4293      	cmp	r3, r2
 80028da:	d103      	bne.n	80028e4 <__aeabi_dcmpun+0x2c>
 80028dc:	0020      	movs	r0, r4
 80028de:	4330      	orrs	r0, r6
 80028e0:	1e43      	subs	r3, r0, #1
 80028e2:	4198      	sbcs	r0, r3
 80028e4:	bd70      	pop	{r4, r5, r6, pc}
 80028e6:	2001      	movs	r0, #1
 80028e8:	432a      	orrs	r2, r5
 80028ea:	d1fb      	bne.n	80028e4 <__aeabi_dcmpun+0x2c>
 80028ec:	e7f2      	b.n	80028d4 <__aeabi_dcmpun+0x1c>
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	000007ff 	.word	0x000007ff

080028f4 <__aeabi_d2iz>:
 80028f4:	000a      	movs	r2, r1
 80028f6:	b530      	push	{r4, r5, lr}
 80028f8:	4c13      	ldr	r4, [pc, #76]	; (8002948 <__aeabi_d2iz+0x54>)
 80028fa:	0053      	lsls	r3, r2, #1
 80028fc:	0309      	lsls	r1, r1, #12
 80028fe:	0005      	movs	r5, r0
 8002900:	0b09      	lsrs	r1, r1, #12
 8002902:	2000      	movs	r0, #0
 8002904:	0d5b      	lsrs	r3, r3, #21
 8002906:	0fd2      	lsrs	r2, r2, #31
 8002908:	42a3      	cmp	r3, r4
 800290a:	dd04      	ble.n	8002916 <__aeabi_d2iz+0x22>
 800290c:	480f      	ldr	r0, [pc, #60]	; (800294c <__aeabi_d2iz+0x58>)
 800290e:	4283      	cmp	r3, r0
 8002910:	dd02      	ble.n	8002918 <__aeabi_d2iz+0x24>
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <__aeabi_d2iz+0x5c>)
 8002914:	18d0      	adds	r0, r2, r3
 8002916:	bd30      	pop	{r4, r5, pc}
 8002918:	2080      	movs	r0, #128	; 0x80
 800291a:	0340      	lsls	r0, r0, #13
 800291c:	4301      	orrs	r1, r0
 800291e:	480d      	ldr	r0, [pc, #52]	; (8002954 <__aeabi_d2iz+0x60>)
 8002920:	1ac0      	subs	r0, r0, r3
 8002922:	281f      	cmp	r0, #31
 8002924:	dd08      	ble.n	8002938 <__aeabi_d2iz+0x44>
 8002926:	480c      	ldr	r0, [pc, #48]	; (8002958 <__aeabi_d2iz+0x64>)
 8002928:	1ac3      	subs	r3, r0, r3
 800292a:	40d9      	lsrs	r1, r3
 800292c:	000b      	movs	r3, r1
 800292e:	4258      	negs	r0, r3
 8002930:	2a00      	cmp	r2, #0
 8002932:	d1f0      	bne.n	8002916 <__aeabi_d2iz+0x22>
 8002934:	0018      	movs	r0, r3
 8002936:	e7ee      	b.n	8002916 <__aeabi_d2iz+0x22>
 8002938:	4c08      	ldr	r4, [pc, #32]	; (800295c <__aeabi_d2iz+0x68>)
 800293a:	40c5      	lsrs	r5, r0
 800293c:	46a4      	mov	ip, r4
 800293e:	4463      	add	r3, ip
 8002940:	4099      	lsls	r1, r3
 8002942:	000b      	movs	r3, r1
 8002944:	432b      	orrs	r3, r5
 8002946:	e7f2      	b.n	800292e <__aeabi_d2iz+0x3a>
 8002948:	000003fe 	.word	0x000003fe
 800294c:	0000041d 	.word	0x0000041d
 8002950:	7fffffff 	.word	0x7fffffff
 8002954:	00000433 	.word	0x00000433
 8002958:	00000413 	.word	0x00000413
 800295c:	fffffbed 	.word	0xfffffbed

08002960 <__aeabi_i2d>:
 8002960:	b570      	push	{r4, r5, r6, lr}
 8002962:	2800      	cmp	r0, #0
 8002964:	d016      	beq.n	8002994 <__aeabi_i2d+0x34>
 8002966:	17c3      	asrs	r3, r0, #31
 8002968:	18c5      	adds	r5, r0, r3
 800296a:	405d      	eors	r5, r3
 800296c:	0fc4      	lsrs	r4, r0, #31
 800296e:	0028      	movs	r0, r5
 8002970:	f000 f8ae 	bl	8002ad0 <__clzsi2>
 8002974:	4a11      	ldr	r2, [pc, #68]	; (80029bc <__aeabi_i2d+0x5c>)
 8002976:	1a12      	subs	r2, r2, r0
 8002978:	280a      	cmp	r0, #10
 800297a:	dc16      	bgt.n	80029aa <__aeabi_i2d+0x4a>
 800297c:	0003      	movs	r3, r0
 800297e:	002e      	movs	r6, r5
 8002980:	3315      	adds	r3, #21
 8002982:	409e      	lsls	r6, r3
 8002984:	230b      	movs	r3, #11
 8002986:	1a18      	subs	r0, r3, r0
 8002988:	40c5      	lsrs	r5, r0
 800298a:	0552      	lsls	r2, r2, #21
 800298c:	032d      	lsls	r5, r5, #12
 800298e:	0b2d      	lsrs	r5, r5, #12
 8002990:	0d53      	lsrs	r3, r2, #21
 8002992:	e003      	b.n	800299c <__aeabi_i2d+0x3c>
 8002994:	2400      	movs	r4, #0
 8002996:	2300      	movs	r3, #0
 8002998:	2500      	movs	r5, #0
 800299a:	2600      	movs	r6, #0
 800299c:	051b      	lsls	r3, r3, #20
 800299e:	432b      	orrs	r3, r5
 80029a0:	07e4      	lsls	r4, r4, #31
 80029a2:	4323      	orrs	r3, r4
 80029a4:	0030      	movs	r0, r6
 80029a6:	0019      	movs	r1, r3
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
 80029aa:	380b      	subs	r0, #11
 80029ac:	4085      	lsls	r5, r0
 80029ae:	0552      	lsls	r2, r2, #21
 80029b0:	032d      	lsls	r5, r5, #12
 80029b2:	2600      	movs	r6, #0
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d53      	lsrs	r3, r2, #21
 80029b8:	e7f0      	b.n	800299c <__aeabi_i2d+0x3c>
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	0000041e 	.word	0x0000041e

080029c0 <__aeabi_d2f>:
 80029c0:	0002      	movs	r2, r0
 80029c2:	004b      	lsls	r3, r1, #1
 80029c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c6:	0d5b      	lsrs	r3, r3, #21
 80029c8:	030c      	lsls	r4, r1, #12
 80029ca:	4e3d      	ldr	r6, [pc, #244]	; (8002ac0 <__aeabi_d2f+0x100>)
 80029cc:	0a64      	lsrs	r4, r4, #9
 80029ce:	0f40      	lsrs	r0, r0, #29
 80029d0:	1c5f      	adds	r7, r3, #1
 80029d2:	0fc9      	lsrs	r1, r1, #31
 80029d4:	4304      	orrs	r4, r0
 80029d6:	00d5      	lsls	r5, r2, #3
 80029d8:	4237      	tst	r7, r6
 80029da:	d00a      	beq.n	80029f2 <__aeabi_d2f+0x32>
 80029dc:	4839      	ldr	r0, [pc, #228]	; (8002ac4 <__aeabi_d2f+0x104>)
 80029de:	181e      	adds	r6, r3, r0
 80029e0:	2efe      	cmp	r6, #254	; 0xfe
 80029e2:	dd16      	ble.n	8002a12 <__aeabi_d2f+0x52>
 80029e4:	20ff      	movs	r0, #255	; 0xff
 80029e6:	2400      	movs	r4, #0
 80029e8:	05c0      	lsls	r0, r0, #23
 80029ea:	4320      	orrs	r0, r4
 80029ec:	07c9      	lsls	r1, r1, #31
 80029ee:	4308      	orrs	r0, r1
 80029f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <__aeabi_d2f+0x44>
 80029f6:	432c      	orrs	r4, r5
 80029f8:	d026      	beq.n	8002a48 <__aeabi_d2f+0x88>
 80029fa:	2205      	movs	r2, #5
 80029fc:	0192      	lsls	r2, r2, #6
 80029fe:	0a54      	lsrs	r4, r2, #9
 8002a00:	b2d8      	uxtb	r0, r3
 8002a02:	e7f1      	b.n	80029e8 <__aeabi_d2f+0x28>
 8002a04:	4325      	orrs	r5, r4
 8002a06:	d0ed      	beq.n	80029e4 <__aeabi_d2f+0x24>
 8002a08:	2080      	movs	r0, #128	; 0x80
 8002a0a:	03c0      	lsls	r0, r0, #15
 8002a0c:	4304      	orrs	r4, r0
 8002a0e:	20ff      	movs	r0, #255	; 0xff
 8002a10:	e7ea      	b.n	80029e8 <__aeabi_d2f+0x28>
 8002a12:	2e00      	cmp	r6, #0
 8002a14:	dd1b      	ble.n	8002a4e <__aeabi_d2f+0x8e>
 8002a16:	0192      	lsls	r2, r2, #6
 8002a18:	1e53      	subs	r3, r2, #1
 8002a1a:	419a      	sbcs	r2, r3
 8002a1c:	00e4      	lsls	r4, r4, #3
 8002a1e:	0f6d      	lsrs	r5, r5, #29
 8002a20:	4322      	orrs	r2, r4
 8002a22:	432a      	orrs	r2, r5
 8002a24:	0753      	lsls	r3, r2, #29
 8002a26:	d048      	beq.n	8002aba <__aeabi_d2f+0xfa>
 8002a28:	230f      	movs	r3, #15
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d000      	beq.n	8002a32 <__aeabi_d2f+0x72>
 8002a30:	3204      	adds	r2, #4
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	04db      	lsls	r3, r3, #19
 8002a36:	4013      	ands	r3, r2
 8002a38:	d03f      	beq.n	8002aba <__aeabi_d2f+0xfa>
 8002a3a:	1c70      	adds	r0, r6, #1
 8002a3c:	2efe      	cmp	r6, #254	; 0xfe
 8002a3e:	d0d1      	beq.n	80029e4 <__aeabi_d2f+0x24>
 8002a40:	0192      	lsls	r2, r2, #6
 8002a42:	0a54      	lsrs	r4, r2, #9
 8002a44:	b2c0      	uxtb	r0, r0
 8002a46:	e7cf      	b.n	80029e8 <__aeabi_d2f+0x28>
 8002a48:	2000      	movs	r0, #0
 8002a4a:	2400      	movs	r4, #0
 8002a4c:	e7cc      	b.n	80029e8 <__aeabi_d2f+0x28>
 8002a4e:	0032      	movs	r2, r6
 8002a50:	3217      	adds	r2, #23
 8002a52:	db22      	blt.n	8002a9a <__aeabi_d2f+0xda>
 8002a54:	2080      	movs	r0, #128	; 0x80
 8002a56:	0400      	lsls	r0, r0, #16
 8002a58:	4320      	orrs	r0, r4
 8002a5a:	241e      	movs	r4, #30
 8002a5c:	1ba4      	subs	r4, r4, r6
 8002a5e:	2c1f      	cmp	r4, #31
 8002a60:	dd1d      	ble.n	8002a9e <__aeabi_d2f+0xde>
 8002a62:	2202      	movs	r2, #2
 8002a64:	4252      	negs	r2, r2
 8002a66:	1b96      	subs	r6, r2, r6
 8002a68:	0002      	movs	r2, r0
 8002a6a:	40f2      	lsrs	r2, r6
 8002a6c:	0016      	movs	r6, r2
 8002a6e:	2c20      	cmp	r4, #32
 8002a70:	d004      	beq.n	8002a7c <__aeabi_d2f+0xbc>
 8002a72:	4a15      	ldr	r2, [pc, #84]	; (8002ac8 <__aeabi_d2f+0x108>)
 8002a74:	4694      	mov	ip, r2
 8002a76:	4463      	add	r3, ip
 8002a78:	4098      	lsls	r0, r3
 8002a7a:	4305      	orrs	r5, r0
 8002a7c:	002a      	movs	r2, r5
 8002a7e:	1e53      	subs	r3, r2, #1
 8002a80:	419a      	sbcs	r2, r3
 8002a82:	4332      	orrs	r2, r6
 8002a84:	2600      	movs	r6, #0
 8002a86:	0753      	lsls	r3, r2, #29
 8002a88:	d1ce      	bne.n	8002a28 <__aeabi_d2f+0x68>
 8002a8a:	2480      	movs	r4, #128	; 0x80
 8002a8c:	0013      	movs	r3, r2
 8002a8e:	04e4      	lsls	r4, r4, #19
 8002a90:	2001      	movs	r0, #1
 8002a92:	4023      	ands	r3, r4
 8002a94:	4222      	tst	r2, r4
 8002a96:	d1d3      	bne.n	8002a40 <__aeabi_d2f+0x80>
 8002a98:	e7b0      	b.n	80029fc <__aeabi_d2f+0x3c>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e7ad      	b.n	80029fa <__aeabi_d2f+0x3a>
 8002a9e:	4a0b      	ldr	r2, [pc, #44]	; (8002acc <__aeabi_d2f+0x10c>)
 8002aa0:	4694      	mov	ip, r2
 8002aa2:	002a      	movs	r2, r5
 8002aa4:	40e2      	lsrs	r2, r4
 8002aa6:	0014      	movs	r4, r2
 8002aa8:	002a      	movs	r2, r5
 8002aaa:	4463      	add	r3, ip
 8002aac:	409a      	lsls	r2, r3
 8002aae:	4098      	lsls	r0, r3
 8002ab0:	1e55      	subs	r5, r2, #1
 8002ab2:	41aa      	sbcs	r2, r5
 8002ab4:	4302      	orrs	r2, r0
 8002ab6:	4322      	orrs	r2, r4
 8002ab8:	e7e4      	b.n	8002a84 <__aeabi_d2f+0xc4>
 8002aba:	0033      	movs	r3, r6
 8002abc:	e79e      	b.n	80029fc <__aeabi_d2f+0x3c>
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	000007fe 	.word	0x000007fe
 8002ac4:	fffffc80 	.word	0xfffffc80
 8002ac8:	fffffca2 	.word	0xfffffca2
 8002acc:	fffffc82 	.word	0xfffffc82

08002ad0 <__clzsi2>:
 8002ad0:	211c      	movs	r1, #28
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	4298      	cmp	r0, r3
 8002ad8:	d301      	bcc.n	8002ade <__clzsi2+0xe>
 8002ada:	0c00      	lsrs	r0, r0, #16
 8002adc:	3910      	subs	r1, #16
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	4298      	cmp	r0, r3
 8002ae2:	d301      	bcc.n	8002ae8 <__clzsi2+0x18>
 8002ae4:	0a00      	lsrs	r0, r0, #8
 8002ae6:	3908      	subs	r1, #8
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	4298      	cmp	r0, r3
 8002aec:	d301      	bcc.n	8002af2 <__clzsi2+0x22>
 8002aee:	0900      	lsrs	r0, r0, #4
 8002af0:	3904      	subs	r1, #4
 8002af2:	a202      	add	r2, pc, #8	; (adr r2, 8002afc <__clzsi2+0x2c>)
 8002af4:	5c10      	ldrb	r0, [r2, r0]
 8002af6:	1840      	adds	r0, r0, r1
 8002af8:	4770      	bx	lr
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	02020304 	.word	0x02020304
 8002b00:	01010101 	.word	0x01010101
	...

08002b0c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <SystemInit+0x74>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <SystemInit+0x74>)
 8002b16:	2101      	movs	r1, #1
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
#if defined(STM32F051)  
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <SystemInit+0x74>)
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <SystemInit+0x74>)
 8002b22:	4918      	ldr	r1, [pc, #96]	; (8002b84 <SystemInit+0x78>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002b28:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <SystemInit+0x74>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <SystemInit+0x74>)
 8002b2e:	4916      	ldr	r1, [pc, #88]	; (8002b88 <SystemInit+0x7c>)
 8002b30:	400a      	ands	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <SystemInit+0x74>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <SystemInit+0x74>)
 8002b3a:	4914      	ldr	r1, [pc, #80]	; (8002b8c <SystemInit+0x80>)
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <SystemInit+0x74>)
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <SystemInit+0x74>)
 8002b46:	4912      	ldr	r1, [pc, #72]	; (8002b90 <SystemInit+0x84>)
 8002b48:	400a      	ands	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <SystemInit+0x74>)
 8002b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <SystemInit+0x74>)
 8002b52:	210f      	movs	r1, #15
 8002b54:	438a      	bics	r2, r1
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <SystemInit+0x74>)
 8002b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <SystemInit+0x74>)
 8002b5e:	490d      	ldr	r1, [pc, #52]	; (8002b94 <SystemInit+0x88>)
 8002b60:	400a      	ands	r2, r1
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <SystemInit+0x74>)
 8002b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <SystemInit+0x74>)
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	438a      	bics	r2, r1
 8002b6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <SystemInit+0x74>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8002b76:	f000 f885 	bl	8002c84 <SetSysClock>
}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	08ffb80c 	.word	0x08ffb80c
 8002b88:	fef6ffff 	.word	0xfef6ffff
 8002b8c:	fffbffff 	.word	0xfffbffff
 8002b90:	ffc0ffff 	.word	0xffc0ffff
 8002b94:	fffffeac 	.word	0xfffffeac

08002b98 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	2300      	movs	r3, #0
 8002bac:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002bae:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <SystemCoreClockUpdate+0xdc>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d011      	beq.n	8002be2 <SystemCoreClockUpdate+0x4a>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d83f      	bhi.n	8002c44 <SystemCoreClockUpdate+0xac>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <SystemCoreClockUpdate+0x3a>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d004      	beq.n	8002bda <SystemCoreClockUpdate+0x42>
 8002bd0:	e038      	b.n	8002c44 <SystemCoreClockUpdate+0xac>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8002bd2:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <SystemCoreClockUpdate+0xe0>)
 8002bd4:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <SystemCoreClockUpdate+0xe4>)
 8002bd6:	601a      	str	r2, [r3, #0]
      break;
 8002bd8:	e038      	b.n	8002c4c <SystemCoreClockUpdate+0xb4>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8002bda:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <SystemCoreClockUpdate+0xe0>)
 8002bdc:	4a27      	ldr	r2, [pc, #156]	; (8002c7c <SystemCoreClockUpdate+0xe4>)
 8002bde:	601a      	str	r2, [r3, #0]
      break;
 8002be0:	e034      	b.n	8002c4c <SystemCoreClockUpdate+0xb4>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8002be2:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <SystemCoreClockUpdate+0xdc>)
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	23f0      	movs	r3, #240	; 0xf0
 8002be8:	039b      	lsls	r3, r3, #14
 8002bea:	4013      	ands	r3, r2
 8002bec:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002bee:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <SystemCoreClockUpdate+0xdc>)
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	23c0      	movs	r3, #192	; 0xc0
 8002bf4:	025b      	lsls	r3, r3, #9
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	0c9b      	lsrs	r3, r3, #18
 8002bfe:	3302      	adds	r3, #2
 8002c00:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10c      	bne.n	8002c22 <SystemCoreClockUpdate+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	000a      	movs	r2, r1
 8002c0c:	0152      	lsls	r2, r2, #5
 8002c0e:	1a52      	subs	r2, r2, r1
 8002c10:	0193      	lsls	r3, r2, #6
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	185b      	adds	r3, r3, r1
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	001a      	movs	r2, r3
 8002c1c:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <SystemCoreClockUpdate+0xe0>)
 8002c1e:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 8002c20:	e014      	b.n	8002c4c <SystemCoreClockUpdate+0xb4>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8002c22:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <SystemCoreClockUpdate+0xdc>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	220f      	movs	r2, #15
 8002c28:	4013      	ands	r3, r2
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8002c2e:	6839      	ldr	r1, [r7, #0]
 8002c30:	4812      	ldr	r0, [pc, #72]	; (8002c7c <SystemCoreClockUpdate+0xe4>)
 8002c32:	f7fd fa71 	bl	8000118 <__udivsi3>
 8002c36:	0003      	movs	r3, r0
 8002c38:	001a      	movs	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	435a      	muls	r2, r3
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <SystemCoreClockUpdate+0xe0>)
 8002c40:	601a      	str	r2, [r3, #0]
      break;
 8002c42:	e003      	b.n	8002c4c <SystemCoreClockUpdate+0xb4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <SystemCoreClockUpdate+0xe0>)
 8002c46:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <SystemCoreClockUpdate+0xe4>)
 8002c48:	601a      	str	r2, [r3, #0]
      break;
 8002c4a:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <SystemCoreClockUpdate+0xdc>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	220f      	movs	r2, #15
 8002c54:	4013      	ands	r3, r2
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <SystemCoreClockUpdate+0xe8>)
 8002c58:	5cd3      	ldrb	r3, [r2, r3]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <SystemCoreClockUpdate+0xe0>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	40da      	lsrs	r2, r3
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <SystemCoreClockUpdate+0xe0>)
 8002c68:	601a      	str	r2, [r3, #0]
}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b004      	add	sp, #16
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	40021000 	.word	0x40021000
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	007a1200 	.word	0x007a1200
 8002c80:	20000004 	.word	0x20000004

08002c84 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002c92:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <SetSysClock+0xd4>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <SetSysClock+0xd4>)
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	0249      	lsls	r1, r1, #9
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <SetSysClock+0xd4>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	029b      	lsls	r3, r3, #10
 8002ca8:	4013      	ands	r3, r2
 8002caa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <SetSysClock+0x3e>
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	23a0      	movs	r3, #160	; 0xa0
 8002cbc:	01db      	lsls	r3, r3, #7
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d1ee      	bne.n	8002ca0 <SetSysClock+0x1c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002cc2:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <SetSysClock+0xd4>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	029b      	lsls	r3, r3, #10
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d002      	beq.n	8002cd4 <SetSysClock+0x50>
  {
    HSEStatus = (uint32_t)0x01;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	e001      	b.n	8002cd8 <SetSysClock+0x54>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d138      	bne.n	8002d50 <SetSysClock+0xcc>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8002cde:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <SetSysClock+0xd8>)
 8002ce0:	2211      	movs	r2, #17
 8002ce2:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002ce4:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <SetSysClock+0xd4>)
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <SetSysClock+0xd4>)
 8002ce8:	6852      	ldr	r2, [r2, #4]
 8002cea:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8002cec:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <SetSysClock+0xd4>)
 8002cee:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <SetSysClock+0xd4>)
 8002cf0:	6852      	ldr	r2, [r2, #4]
 8002cf2:	605a      	str	r2, [r3, #4]

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <SetSysClock+0xd4>)
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <SetSysClock+0xd4>)
 8002cfa:	4919      	ldr	r1, [pc, #100]	; (8002d60 <SetSysClock+0xdc>)
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 8002d00:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <SetSysClock+0xd4>)
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <SetSysClock+0xd4>)
 8002d06:	2188      	movs	r1, #136	; 0x88
 8002d08:	0349      	lsls	r1, r1, #13
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <SetSysClock+0xd4>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <SetSysClock+0xd4>)
 8002d14:	2180      	movs	r1, #128	; 0x80
 8002d16:	0449      	lsls	r1, r1, #17
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <SetSysClock+0xd4>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	049b      	lsls	r3, r3, #18
 8002d26:	4013      	ands	r3, r2
 8002d28:	d0f9      	beq.n	8002d1e <SetSysClock+0x9a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <SetSysClock+0xd4>)
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <SetSysClock+0xd4>)
 8002d30:	2103      	movs	r1, #3
 8002d32:	438a      	bics	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <SetSysClock+0xd4>)
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <SetSysClock+0xd4>)
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <SetSysClock+0xd4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	220c      	movs	r2, #12
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d1f9      	bne.n	8002d44 <SetSysClock+0xc0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b002      	add	sp, #8
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40022000 	.word	0x40022000
 8002d60:	ffc07fff 	.word	0xffc07fff

08002d64 <ADC_DeInit>:
  * @brief  Deinitializes ADC1 peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <ADC_DeInit+0x30>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10b      	bne.n	8002d8c <ADC_DeInit+0x28>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	2101      	movs	r1, #1
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 fe22 	bl	80039c4 <RCC_APB2PeriphResetCmd>

    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	2100      	movs	r1, #0
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 fe1c 	bl	80039c4 <RCC_APB2PeriphResetCmd>
  }
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40012400 	.word	0x40012400

08002d98 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_EXTERNAL_TRIG_CONV(ADC_InitStruct->ADC_ExternalTrigConv));
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_SCAN_DIRECTION(ADC_InitStruct->ADC_ScanDirection)); 

  /* Get the ADCx CFGR value */
  tmpreg = ADCx->CFGR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Clear SCANDIR, RES[1:0], ALIGN, EXTSEL[2:0], EXTEN[1:0] and CONT bits */
  tmpreg &= CFGR1_CLEAR_MASK;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <ADC_Init+0x54>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	791b      	ldrb	r3, [r3, #4]
 8002dbc:	035b      	lsls	r3, r3, #13
 8002dbe:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8002dc4:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691b      	ldr	r3, [r3, #16]
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8002dd0:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx CFGR */
  ADCx->CFGR1 = tmpreg;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	60da      	str	r2, [r3, #12]
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b004      	add	sp, #16
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	ffffd203 	.word	0xffffd203

08002df0 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]

   /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_TRGO;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_ScanDirection member */
  ADC_InitStruct->ADC_ScanDirection = ADC_ScanDirection_Upward;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	615a      	str	r2, [r3, #20]
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b002      	add	sp, #8
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	000a      	movs	r2, r1
 8002e2e:	1cfb      	adds	r3, r7, #3
 8002e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002e32:	1cfb      	adds	r3, r7, #3
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <ADC_Cmd+0x24>
  {
    /* Set the ADEN bit to Enable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADEN;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	609a      	str	r2, [r3, #8]
  else
  {
    /* Set the ADDIS to Disable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADDIS;
  }
}
 8002e46:	e005      	b.n	8002e54 <ADC_Cmd+0x30>
    ADCx->CR |= (uint32_t)ADC_CR_ADDIS;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <ADC_ChannelConfig>:
  *            @arg ADC_SampleTime_71_5Cycles: Sample time equal to 71.5 cycles
  *            @arg ADC_SampleTime_239_5Cycles: Sample time equal to 239.5 cycles
  * @retval None
  */
void ADC_ChannelConfig(ADC_TypeDef* ADCx, uint32_t ADC_Channel, uint32_t ADC_SampleTime)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Configure the ADC Channel */
  ADCx->CHSELR |= (uint32_t)ADC_Channel;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28

  /* Clear the Sampling time Selection bits */
  tmpreg &= ~ADC_SMPR1_SMPR;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	4393      	bics	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Set the ADC Sampling Time register */
  tmpreg |= (uint32_t)ADC_SampleTime;
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  /* Configure the ADC Sample time register */
  ADCx->SMPR = tmpreg ;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	615a      	str	r2, [r3, #20]
}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b006      	add	sp, #24
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <ADC_GetCalibrationFactor>:
  *         reset configuration (ADEN must be equal to 0).
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval ADC Calibration factor 
  */
uint32_t ADC_GetCalibrationFactor(ADC_TypeDef* ADCx)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0, calibrationcounter = 0, calibrationstatus = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Set the ADC calibartion */
  ADCx->CR |= (uint32_t)ADC_CR_ADCAL;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	0612      	lsls	r2, r2, #24
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
  
  /* Wait until no ADC calibration is completed */
  do
  {
    calibrationstatus = ADCx->CR & ADC_CR_ADCAL;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	0fdb      	lsrs	r3, r3, #31
 8002ebe:	07db      	lsls	r3, r3, #31
 8002ec0:	60fb      	str	r3, [r7, #12]
    calibrationcounter++;  
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	613b      	str	r3, [r7, #16]
  } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	23f0      	movs	r3, #240	; 0xf0
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d002      	beq.n	8002ed8 <ADC_GetCalibrationFactor+0x42>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ef      	bne.n	8002eb8 <ADC_GetCalibrationFactor+0x22>
    
  if((uint32_t)(ADCx->CR & ADC_CR_ADCAL) == RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	db03      	blt.n	8002ee8 <ADC_GetCalibrationFactor+0x52>
  {
    /*Get the calibration factor from the ADC data register */
    tmpreg = ADCx->DR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	e001      	b.n	8002eec <ADC_GetCalibrationFactor+0x56>
  }
  else
  {
    /* Error factor */
    tmpreg = 0x00000000;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
  }
  return tmpreg;
 8002eec:	697b      	ldr	r3, [r7, #20]
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b006      	add	sp, #24
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <ADC_StartOfConversion>:
  *         assertion of EOSEQ because the sequence is automatic relaunched
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_StartOfConversion(ADC_TypeDef* ADCx)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  ADCx->CR |= (uint32_t)ADC_CR_ADSTART;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2204      	movs	r2, #4
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	609a      	str	r2, [r3, #8]
}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b002      	add	sp, #8
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	000a      	movs	r2, r1
 8002f1c:	1cfb      	adds	r3, r7, #3
 8002f1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002f20:	1cfb      	adds	r3, r7, #3
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d006      	beq.n	8002f36 <ADC_DMACmd+0x24>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DMAEN;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DMAEN);
  }
}
 8002f34:	e006      	b.n	8002f44 <ADC_DMACmd+0x32>
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DMAEN);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4393      	bics	r3, r2
 8002f3e:	001a      	movs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <ADC_DMARequestModeConfig>:
  *            @arg ADC_DMAMode_OneShot: DMA One Shot Mode 
  *            @arg ADC_DMAMode_Circular: DMA Circular Mode  
  *  @retval None
  */
void ADC_DMARequestModeConfig(ADC_TypeDef* ADCx, uint32_t ADC_DMARequestMode)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_DMACFG;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	4393      	bics	r3, r2
 8002f5e:	001a      	movs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
  ADCx->CFGR1 |= (uint32_t)ADC_DMARequestMode;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60da      	str	r2, [r3, #12]
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_ADSTP: ADC stop flag
  *            @arg ADC_FLAG_ADCAL: ADC Calibration flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002f82:	230f      	movs	r3, #15
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  if((uint32_t)(ADC_FLAG & 0x01000000))
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	045b      	lsls	r3, r3, #17
 8002f94:	4013      	ands	r3, r2
 8002f96:	d005      	beq.n	8002fa4 <ADC_GetFlagStatus+0x2c>
  {
    tmpreg = ADCx->CR & 0xFEFFFFFF;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <ADC_GetFlagStatus+0x5c>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	e002      	b.n	8002faa <ADC_GetFlagStatus+0x32>
  }
  else
  {
    tmpreg = ADCx->ISR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60bb      	str	r3, [r7, #8]
  }
  
  /* Check the status of the specified ADC flag */
  if ((tmpreg & ADC_FLAG) != (uint32_t)RESET)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <ADC_GetFlagStatus+0x44>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8002fb2:	230f      	movs	r3, #15
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
 8002fba:	e003      	b.n	8002fc4 <ADC_GetFlagStatus+0x4c>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8002fbc:	230f      	movs	r3, #15
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8002fc4:	230f      	movs	r3, #15
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	781b      	ldrb	r3, [r3, #0]
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b004      	add	sp, #16
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	feffffff 	.word	0xfeffffff

08002fd8 <DMA_DeInit>:
  *         x can be 1 to 7 for DMA1 to select the DMA Channel.
  * @note   Channel 6 and 7 are available only for STM32F072 devices.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a4f      	ldr	r2, [pc, #316]	; (8003124 <DMA_DeInit+0x14c>)
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	60da      	str	r2, [r3, #12]

  if (DMAy_Channelx == DMA1_Channel1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a48      	ldr	r2, [pc, #288]	; (8003128 <DMA_DeInit+0x150>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d106      	bne.n	800301a <DMA_DeInit+0x42>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 800300c:	4b47      	ldr	r3, [pc, #284]	; (800312c <DMA_DeInit+0x154>)
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4b46      	ldr	r3, [pc, #280]	; (800312c <DMA_DeInit+0x154>)
 8003012:	210f      	movs	r1, #15
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
    }
  }
}
 8003018:	e07f      	b.n	800311a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA1_Channel2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a44      	ldr	r2, [pc, #272]	; (8003130 <DMA_DeInit+0x158>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d106      	bne.n	8003030 <DMA_DeInit+0x58>
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8003022:	4b42      	ldr	r3, [pc, #264]	; (800312c <DMA_DeInit+0x154>)
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	4b41      	ldr	r3, [pc, #260]	; (800312c <DMA_DeInit+0x154>)
 8003028:	21f0      	movs	r1, #240	; 0xf0
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
}
 800302e:	e074      	b.n	800311a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA1_Channel3)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a40      	ldr	r2, [pc, #256]	; (8003134 <DMA_DeInit+0x15c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d107      	bne.n	8003048 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8003038:	4b3c      	ldr	r3, [pc, #240]	; (800312c <DMA_DeInit+0x154>)
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	4b3b      	ldr	r3, [pc, #236]	; (800312c <DMA_DeInit+0x154>)
 800303e:	21f0      	movs	r1, #240	; 0xf0
 8003040:	0109      	lsls	r1, r1, #4
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
}
 8003046:	e068      	b.n	800311a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA1_Channel4)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a3b      	ldr	r2, [pc, #236]	; (8003138 <DMA_DeInit+0x160>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d107      	bne.n	8003060 <DMA_DeInit+0x88>
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8003050:	4b36      	ldr	r3, [pc, #216]	; (800312c <DMA_DeInit+0x154>)
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	4b35      	ldr	r3, [pc, #212]	; (800312c <DMA_DeInit+0x154>)
 8003056:	21f0      	movs	r1, #240	; 0xf0
 8003058:	0209      	lsls	r1, r1, #8
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
}
 800305e:	e05c      	b.n	800311a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA1_Channel5)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a36      	ldr	r2, [pc, #216]	; (800313c <DMA_DeInit+0x164>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d107      	bne.n	8003078 <DMA_DeInit+0xa0>
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8003068:	4b30      	ldr	r3, [pc, #192]	; (800312c <DMA_DeInit+0x154>)
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	4b2f      	ldr	r3, [pc, #188]	; (800312c <DMA_DeInit+0x154>)
 800306e:	21f0      	movs	r1, #240	; 0xf0
 8003070:	0309      	lsls	r1, r1, #12
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
}
 8003076:	e050      	b.n	800311a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA1_Channel6)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a31      	ldr	r2, [pc, #196]	; (8003140 <DMA_DeInit+0x168>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d107      	bne.n	8003090 <DMA_DeInit+0xb8>
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8003080:	4b2a      	ldr	r3, [pc, #168]	; (800312c <DMA_DeInit+0x154>)
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	4b29      	ldr	r3, [pc, #164]	; (800312c <DMA_DeInit+0x154>)
 8003086:	21f0      	movs	r1, #240	; 0xf0
 8003088:	0409      	lsls	r1, r1, #16
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]
}
 800308e:	e044      	b.n	800311a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA1_Channel7)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <DMA_DeInit+0x16c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d107      	bne.n	80030a8 <DMA_DeInit+0xd0>
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8003098:	4b24      	ldr	r3, [pc, #144]	; (800312c <DMA_DeInit+0x154>)
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	4b23      	ldr	r3, [pc, #140]	; (800312c <DMA_DeInit+0x154>)
 800309e:	21f0      	movs	r1, #240	; 0xf0
 80030a0:	0509      	lsls	r1, r1, #20
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
}
 80030a6:	e038      	b.n	800311a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA2_Channel1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a27      	ldr	r2, [pc, #156]	; (8003148 <DMA_DeInit+0x170>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d106      	bne.n	80030be <DMA_DeInit+0xe6>
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 80030b0:	4b26      	ldr	r3, [pc, #152]	; (800314c <DMA_DeInit+0x174>)
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4b25      	ldr	r3, [pc, #148]	; (800314c <DMA_DeInit+0x174>)
 80030b6:	210f      	movs	r1, #15
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
}
 80030bc:	e02d      	b.n	800311a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA2_Channel2)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a23      	ldr	r2, [pc, #140]	; (8003150 <DMA_DeInit+0x178>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d106      	bne.n	80030d4 <DMA_DeInit+0xfc>
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 80030c6:	4b21      	ldr	r3, [pc, #132]	; (800314c <DMA_DeInit+0x174>)
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	4b20      	ldr	r3, [pc, #128]	; (800314c <DMA_DeInit+0x174>)
 80030cc:	21f0      	movs	r1, #240	; 0xf0
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
}
 80030d2:	e022      	b.n	800311a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA2_Channel3)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <DMA_DeInit+0x17c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d107      	bne.n	80030ec <DMA_DeInit+0x114>
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <DMA_DeInit+0x174>)
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	4b1a      	ldr	r3, [pc, #104]	; (800314c <DMA_DeInit+0x174>)
 80030e2:	21f0      	movs	r1, #240	; 0xf0
 80030e4:	0109      	lsls	r1, r1, #4
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
}
 80030ea:	e016      	b.n	800311a <DMA_DeInit+0x142>
  else if (DMAy_Channelx == DMA2_Channel4)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a1a      	ldr	r2, [pc, #104]	; (8003158 <DMA_DeInit+0x180>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d107      	bne.n	8003104 <DMA_DeInit+0x12c>
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 80030f4:	4b15      	ldr	r3, [pc, #84]	; (800314c <DMA_DeInit+0x174>)
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <DMA_DeInit+0x174>)
 80030fa:	21f0      	movs	r1, #240	; 0xf0
 80030fc:	0209      	lsls	r1, r1, #8
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
}
 8003102:	e00a      	b.n	800311a <DMA_DeInit+0x142>
    if (DMAy_Channelx == DMA2_Channel5)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a15      	ldr	r2, [pc, #84]	; (800315c <DMA_DeInit+0x184>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d106      	bne.n	800311a <DMA_DeInit+0x142>
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <DMA_DeInit+0x174>)
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4b0e      	ldr	r3, [pc, #56]	; (800314c <DMA_DeInit+0x174>)
 8003112:	21f0      	movs	r1, #240	; 0xf0
 8003114:	0309      	lsls	r1, r1, #12
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b002      	add	sp, #8
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	0000fffe 	.word	0x0000fffe
 8003128:	40020008 	.word	0x40020008
 800312c:	40020000 	.word	0x40020000
 8003130:	4002001c 	.word	0x4002001c
 8003134:	40020030 	.word	0x40020030
 8003138:	40020044 	.word	0x40020044
 800313c:	40020058 	.word	0x40020058
 8003140:	4002006c 	.word	0x4002006c
 8003144:	40020080 	.word	0x40020080
 8003148:	40020408 	.word	0x40020408
 800314c:	40020400 	.word	0x40020400
 8003150:	4002041c 	.word	0x4002041c
 8003154:	40020430 	.word	0x40020430
 8003158:	40020444 	.word	0x40020444
 800315c:	40020458 	.word	0x40020458

08003160 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <DMA_Init+0x78>)
 8003178:	4013      	ands	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800318a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003196:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80031a2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	60da      	str	r2, [r3, #12]
}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b004      	add	sp, #16
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	ffff800f 	.word	0xffff800f

080031dc <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	000a      	movs	r2, r1
 80031e6:	1cfb      	adds	r3, r7, #3
 80031e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80031ea:	1cfb      	adds	r3, r7, #3
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <DMA_Cmd+0x24>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2201      	movs	r2, #1
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
  }
}
 80031fe:	e005      	b.n	800320c <DMA_Cmd+0x30>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a03      	ldr	r2, [pc, #12]	; (8003214 <DMA_Cmd+0x38>)
 8003206:	401a      	ands	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	601a      	str	r2, [r3, #0]
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}
 8003214:	0000fffe 	.word	0x0000fffe

08003218 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure that 
  *         contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8003224:	4b33      	ldr	r3, [pc, #204]	; (80032f4 <EXTI_Init+0xdc>)
 8003226:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	799b      	ldrb	r3, [r3, #6]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d04f      	beq.n	80032d0 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8003230:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <EXTI_Init+0xdc>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	43d9      	mvns	r1, r3
 800323a:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <EXTI_Init+0xdc>)
 800323c:	400a      	ands	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8003240:	4b2c      	ldr	r3, [pc, #176]	; (80032f4 <EXTI_Init+0xdc>)
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	43d9      	mvns	r1, r3
 800324a:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <EXTI_Init+0xdc>)
 800324c:	400a      	ands	r2, r1
 800324e:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	791b      	ldrb	r3, [r3, #4]
 8003254:	001a      	movs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	189b      	adds	r3, r3, r2
 800325a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800326a:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <EXTI_Init+0xdc>)
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	43d9      	mvns	r1, r3
 8003274:	4b1f      	ldr	r3, [pc, #124]	; (80032f4 <EXTI_Init+0xdc>)
 8003276:	400a      	ands	r2, r1
 8003278:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800327a:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <EXTI_Init+0xdc>)
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	43d9      	mvns	r1, r3
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <EXTI_Init+0xdc>)
 8003286:	400a      	ands	r2, r1
 8003288:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	795b      	ldrb	r3, [r3, #5]
 800328e:	2b10      	cmp	r3, #16
 8003290:	d10e      	bne.n	80032b0 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <EXTI_Init+0xdc>)
 8003294:	6899      	ldr	r1, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <EXTI_Init+0xdc>)
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80032a0:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <EXTI_Init+0xdc>)
 80032a2:	68d9      	ldr	r1, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <EXTI_Init+0xdc>)
 80032aa:	430a      	orrs	r2, r1
 80032ac:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80032ae:	e01d      	b.n	80032ec <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <EXTI_Init+0xdc>)
 80032b2:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	795b      	ldrb	r3, [r3, #5]
 80032b8:	001a      	movs	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	189b      	adds	r3, r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
}
 80032ce:	e00d      	b.n	80032ec <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	791b      	ldrb	r3, [r3, #4]
 80032d4:	001a      	movs	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	189b      	adds	r3, r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	43d9      	mvns	r1, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	400a      	ands	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b004      	add	sp, #16
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40010400 	.word	0x40010400

080032f8 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be (0..27).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
   FlagStatus bitstatus = RESET;
 8003300:	210f      	movs	r1, #15
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <EXTI_GetFlagStatus+0x38>)
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4013      	ands	r3, r2
 8003310:	d003      	beq.n	800331a <EXTI_GetFlagStatus+0x22>
  {
    bitstatus = SET;
 8003312:	187b      	adds	r3, r7, r1
 8003314:	2201      	movs	r2, #1
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e003      	b.n	8003322 <EXTI_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800331a:	230f      	movs	r3, #15
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003322:	230f      	movs	r3, #15
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	781b      	ldrb	r3, [r3, #0]
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b004      	add	sp, #16
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40010400 	.word	0x40010400

08003334 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <EXTI_ClearITPendingBit+0x18>)
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	615a      	str	r2, [r3, #20]
}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b002      	add	sp, #8
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	40010400 	.word	0x40010400

08003350 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e07c      	b.n	8003466 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800336c:	2201      	movs	r2, #1
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	409a      	lsls	r2, r3
 8003372:	0013      	movs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4013      	ands	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	429a      	cmp	r2, r3
 8003386:	d16b      	bne.n	8003460 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	791b      	ldrb	r3, [r3, #4]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d003      	beq.n	8003398 <GPIO_Init+0x48>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	791b      	ldrb	r3, [r3, #4]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d134      	bne.n	8003402 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	0052      	lsls	r2, r2, #1
 80033a0:	2103      	movs	r1, #3
 80033a2:	4091      	lsls	r1, r2
 80033a4:	000a      	movs	r2, r1
 80033a6:	43d2      	mvns	r2, r2
 80033a8:	401a      	ands	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	795b      	ldrb	r3, [r3, #5]
 80033b6:	0019      	movs	r1, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4099      	lsls	r1, r3
 80033be:	000b      	movs	r3, r1
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	889b      	ldrh	r3, [r3, #4]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	b292      	uxth	r2, r2
 80033d0:	0011      	movs	r1, r2
 80033d2:	2201      	movs	r2, #1
 80033d4:	408a      	lsls	r2, r1
 80033d6:	b292      	uxth	r2, r2
 80033d8:	43d2      	mvns	r2, r2
 80033da:	b292      	uxth	r2, r2
 80033dc:	4013      	ands	r3, r2
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	889b      	ldrh	r3, [r3, #4]
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	799b      	ldrb	r3, [r3, #6]
 80033ee:	0019      	movs	r1, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	4099      	lsls	r1, r3
 80033f6:	000b      	movs	r3, r1
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	4313      	orrs	r3, r2
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	0052      	lsls	r2, r2, #1
 800340a:	2103      	movs	r1, #3
 800340c:	4091      	lsls	r1, r2
 800340e:	000a      	movs	r2, r1
 8003410:	43d2      	mvns	r2, r2
 8003412:	401a      	ands	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	791b      	ldrb	r3, [r3, #4]
 8003420:	0019      	movs	r1, r3
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4099      	lsls	r1, r3
 8003428:	000b      	movs	r3, r1
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	b292      	uxth	r2, r2
 8003438:	0052      	lsls	r2, r2, #1
 800343a:	2103      	movs	r1, #3
 800343c:	4091      	lsls	r1, r2
 800343e:	000a      	movs	r2, r1
 8003440:	43d2      	mvns	r2, r2
 8003442:	401a      	ands	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	79db      	ldrb	r3, [r3, #7]
 8003450:	0019      	movs	r1, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4099      	lsls	r1, r3
 8003458:	000b      	movs	r3, r1
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b0f      	cmp	r3, #15
 800346a:	d800      	bhi.n	800346e <GPIO_Init+0x11e>
 800346c:	e77e      	b.n	800336c <GPIO_Init+0x1c>
    }
  }
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b006      	add	sp, #24
 8003476:	bd80      	pop	{r7, pc}

08003478 <GPIO_ReadInputDataBit>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.  
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	000a      	movs	r2, r1
 8003482:	1cbb      	adds	r3, r7, #2
 8003484:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
 8003486:	210f      	movs	r1, #15
 8003488:	187b      	adds	r3, r7, r1
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8a1b      	ldrh	r3, [r3, #16]
 8003492:	b29b      	uxth	r3, r3
 8003494:	1cba      	adds	r2, r7, #2
 8003496:	8812      	ldrh	r2, [r2, #0]
 8003498:	4013      	ands	r3, r2
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <GPIO_ReadInputDataBit+0x30>
  {
    bitstatus = (uint8_t)Bit_SET;
 80034a0:	187b      	adds	r3, r7, r1
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e003      	b.n	80034b0 <GPIO_ReadInputDataBit+0x38>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80034a8:	230f      	movs	r3, #15
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80034b0:	230f      	movs	r3, #15
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	781b      	ldrb	r3, [r3, #0]
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b004      	add	sp, #16
 80034bc:	bd80      	pop	{r7, pc}

080034be <GPIO_SetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	000a      	movs	r2, r1
 80034c8:	1cbb      	adds	r3, r7, #2
 80034ca:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 80034cc:	1cbb      	adds	r3, r7, #2
 80034ce:	881a      	ldrh	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	619a      	str	r2, [r3, #24]
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}

080034dc <GPIO_ResetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	000a      	movs	r2, r1
 80034e6:	1cbb      	adds	r3, r7, #2
 80034e8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	1cba      	adds	r2, r7, #2
 80034ee:	8812      	ldrh	r2, [r2, #0]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b002      	add	sp, #8
 80034f8:	bd80      	pop	{r7, pc}

080034fa <GPIO_PinAFConfig>:
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	0008      	movs	r0, r1
 8003504:	0011      	movs	r1, r2
 8003506:	1cbb      	adds	r3, r7, #2
 8003508:	1c02      	adds	r2, r0, #0
 800350a:	801a      	strh	r2, [r3, #0]
 800350c:	1c7b      	adds	r3, r7, #1
 800350e:	1c0a      	adds	r2, r1, #0
 8003510:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800351a:	1c7b      	adds	r3, r7, #1
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	1cbb      	adds	r3, r7, #2
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	2107      	movs	r1, #7
 8003524:	400b      	ands	r3, r1
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	409a      	lsls	r2, r3
 800352a:	0013      	movs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800352e:	1cbb      	adds	r3, r7, #2
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	08db      	lsrs	r3, r3, #3
 8003534:	b29b      	uxth	r3, r3
 8003536:	001a      	movs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3208      	adds	r2, #8
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	58d3      	ldr	r3, [r2, r3]
 8003540:	1cba      	adds	r2, r7, #2
 8003542:	8812      	ldrh	r2, [r2, #0]
 8003544:	2107      	movs	r1, #7
 8003546:	400a      	ands	r2, r1
 8003548:	0092      	lsls	r2, r2, #2
 800354a:	210f      	movs	r1, #15
 800354c:	4091      	lsls	r1, r2
 800354e:	000a      	movs	r2, r1
 8003550:	43d2      	mvns	r2, r2
 8003552:	1cb9      	adds	r1, r7, #2
 8003554:	8809      	ldrh	r1, [r1, #0]
 8003556:	08c9      	lsrs	r1, r1, #3
 8003558:	b289      	uxth	r1, r1
 800355a:	0008      	movs	r0, r1
 800355c:	401a      	ands	r2, r3
 800355e:	0011      	movs	r1, r2
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	0002      	movs	r2, r0
 8003564:	3208      	adds	r2, #8
 8003566:	0092      	lsls	r2, r2, #2
 8003568:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800356a:	1cbb      	adds	r3, r7, #2
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	08db      	lsrs	r3, r3, #3
 8003570:	b29b      	uxth	r3, r3
 8003572:	001a      	movs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3208      	adds	r2, #8
 8003578:	0092      	lsls	r2, r2, #2
 800357a:	58d3      	ldr	r3, [r2, r3]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8003582:	1cbb      	adds	r3, r7, #2
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	08db      	lsrs	r3, r3, #3
 8003588:	b29b      	uxth	r3, r3
 800358a:	001a      	movs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3208      	adds	r2, #8
 8003590:	0092      	lsls	r2, r2, #2
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	50d1      	str	r1, [r2, r3]
}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	46bd      	mov	sp, r7
 800359a:	b004      	add	sp, #16
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	789b      	ldrb	r3, [r3, #2]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d039      	beq.n	8003628 <NVIC_Init+0x88>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80035b4:	4a24      	ldr	r2, [pc, #144]	; (8003648 <NVIC_Init+0xa8>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	33c0      	adds	r3, #192	; 0xc0
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	589b      	ldr	r3, [r3, r2]
 80035c4:	60fb      	str	r3, [r7, #12]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	001a      	movs	r2, r3
 80035cc:	2303      	movs	r3, #3
 80035ce:	4013      	ands	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	22ff      	movs	r2, #255	; 0xff
 80035d4:	409a      	lsls	r2, r3
 80035d6:	0013      	movs	r3, r2
 80035d8:	43da      	mvns	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	019b      	lsls	r3, r3, #6
 80035e6:	22ff      	movs	r2, #255	; 0xff
 80035e8:	401a      	ands	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	0019      	movs	r1, r3
 80035f0:	2303      	movs	r3, #3
 80035f2:	400b      	ands	r3, r1
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	409a      	lsls	r2, r3
 80035f8:	0013      	movs	r3, r2
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8003600:	4911      	ldr	r1, [pc, #68]	; (8003648 <NVIC_Init+0xa8>)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	b2db      	uxtb	r3, r3
 800360a:	33c0      	adds	r3, #192	; 0xc0
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	505a      	str	r2, [r3, r1]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	001a      	movs	r2, r3
 8003618:	231f      	movs	r3, #31
 800361a:	401a      	ands	r2, r3
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <NVIC_Init+0xa8>)
 800361e:	2101      	movs	r1, #1
 8003620:	4091      	lsls	r1, r2
 8003622:	000a      	movs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003626:	e00a      	b.n	800363e <NVIC_Init+0x9e>
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	001a      	movs	r2, r3
 800362e:	231f      	movs	r3, #31
 8003630:	4013      	ands	r3, r2
 8003632:	4905      	ldr	r1, [pc, #20]	; (8003648 <NVIC_Init+0xa8>)
 8003634:	2201      	movs	r2, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	0013      	movs	r3, r2
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	508b      	str	r3, [r1, r2]
}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	46bd      	mov	sp, r7
 8003642:	b004      	add	sp, #16
 8003644:	bd80      	pop	{r7, pc}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	e000e100 	.word	0xe000e100

0800364c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	2300      	movs	r3, #0
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800366c:	4baf      	ldr	r3, [pc, #700]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	220c      	movs	r2, #12
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b0c      	cmp	r3, #12
 800367a:	d048      	beq.n	800370e <RCC_GetClocksFreq+0xc2>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d849      	bhi.n	8003716 <RCC_GetClocksFreq+0xca>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d011      	beq.n	80036ac <RCC_GetClocksFreq+0x60>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b08      	cmp	r3, #8
 800368c:	d843      	bhi.n	8003716 <RCC_GetClocksFreq+0xca>
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <RCC_GetClocksFreq+0x50>
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b04      	cmp	r3, #4
 8003698:	d004      	beq.n	80036a4 <RCC_GetClocksFreq+0x58>
 800369a:	e03c      	b.n	8003716 <RCC_GetClocksFreq+0xca>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4aa4      	ldr	r2, [pc, #656]	; (8003930 <RCC_GetClocksFreq+0x2e4>)
 80036a0:	601a      	str	r2, [r3, #0]
      break;
 80036a2:	e03c      	b.n	800371e <RCC_GetClocksFreq+0xd2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4aa2      	ldr	r2, [pc, #648]	; (8003930 <RCC_GetClocksFreq+0x2e4>)
 80036a8:	601a      	str	r2, [r3, #0]
      break;
 80036aa:	e038      	b.n	800371e <RCC_GetClocksFreq+0xd2>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80036ac:	4b9f      	ldr	r3, [pc, #636]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	23f0      	movs	r3, #240	; 0xf0
 80036b2:	039b      	lsls	r3, r3, #14
 80036b4:	4013      	ands	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80036b8:	4b9c      	ldr	r3, [pc, #624]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	23c0      	movs	r3, #192	; 0xc0
 80036be:	025b      	lsls	r3, r3, #9
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
      pllmull = ( pllmull >> 18) + 2;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	0c9b      	lsrs	r3, r3, #18
 80036c8:	3302      	adds	r3, #2
 80036ca:	617b      	str	r3, [r7, #20]
      
      if (pllsource == 0x00)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <RCC_GetClocksFreq+0x9c>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80036d2:	6979      	ldr	r1, [r7, #20]
 80036d4:	000a      	movs	r2, r1
 80036d6:	0152      	lsls	r2, r2, #5
 80036d8:	1a52      	subs	r2, r2, r1
 80036da:	0193      	lsls	r3, r2, #6
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	185b      	adds	r3, r3, r1
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	e00e      	b.n	8003706 <RCC_GetClocksFreq+0xba>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80036e8:	4b90      	ldr	r3, [pc, #576]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	220f      	movs	r2, #15
 80036ee:	4013      	ands	r3, r2
 80036f0:	3301      	adds	r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80036f4:	68f9      	ldr	r1, [r7, #12]
 80036f6:	488e      	ldr	r0, [pc, #568]	; (8003930 <RCC_GetClocksFreq+0x2e4>)
 80036f8:	f7fc fd0e 	bl	8000118 <__udivsi3>
 80036fc:	0003      	movs	r3, r0
 80036fe:	001a      	movs	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	4353      	muls	r3, r2
 8003704:	61fb      	str	r3, [r7, #28]
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	601a      	str	r2, [r3, #0]
      break;
 800370c:	e007      	b.n	800371e <RCC_GetClocksFreq+0xd2>
    case 0x0C:  /* HSI48 used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a88      	ldr	r2, [pc, #544]	; (8003934 <RCC_GetClocksFreq+0x2e8>)
 8003712:	601a      	str	r2, [r3, #0]
      break;
 8003714:	e003      	b.n	800371e <RCC_GetClocksFreq+0xd2>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a85      	ldr	r2, [pc, #532]	; (8003930 <RCC_GetClocksFreq+0x2e4>)
 800371a:	601a      	str	r2, [r3, #0]
      break;
 800371c:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800371e:	4b83      	ldr	r3, [pc, #524]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	22f0      	movs	r2, #240	; 0xf0
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp]; 
 800372e:	4a82      	ldr	r2, [pc, #520]	; (8003938 <RCC_GetClocksFreq+0x2ec>)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	18d3      	adds	r3, r2, r3
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	40da      	lsrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	605a      	str	r2, [r3, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8003746:	4b79      	ldr	r3, [pc, #484]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	23e0      	movs	r3, #224	; 0xe0
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 8;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003758:	4a77      	ldr	r2, [pc, #476]	; (8003938 <RCC_GetClocksFreq+0x2ec>)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	18d3      	adds	r3, r2, r3
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	60bb      	str	r3, [r7, #8]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	40da      	lsrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	609a      	str	r2, [r3, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 8003770:	4b6e      	ldr	r3, [pc, #440]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 8003772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	401a      	ands	r2, r3
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	429a      	cmp	r2, r3
 8003780:	d003      	beq.n	800378a <RCC_GetClocksFreq+0x13e>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a6d      	ldr	r2, [pc, #436]	; (800393c <RCC_GetClocksFreq+0x2f0>)
 8003786:	60da      	str	r2, [r3, #12]
 8003788:	e013      	b.n	80037b2 <RCC_GetClocksFreq+0x166>
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 800378a:	4b68      	ldr	r3, [pc, #416]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	01db      	lsls	r3, r3, #7
 8003792:	401a      	ands	r2, r3
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	01db      	lsls	r3, r3, #7
 8003798:	429a      	cmp	r2, r3
 800379a:	d005      	beq.n	80037a8 <RCC_GetClocksFreq+0x15c>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	085a      	lsrs	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	e004      	b.n	80037b2 <RCC_GetClocksFreq+0x166>
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	089a      	lsrs	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60da      	str	r2, [r3, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 80037b2:	4b5e      	ldr	r3, [pc, #376]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d003      	beq.n	80037c6 <RCC_GetClocksFreq+0x17a>
  {
    /* CEC Clock is HSI/244 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a5f      	ldr	r2, [pc, #380]	; (8003940 <RCC_GetClocksFreq+0x2f4>)
 80037c2:	611a      	str	r2, [r3, #16]
 80037c4:	e003      	b.n	80037ce <RCC_GetClocksFreq+0x182>
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2280      	movs	r2, #128	; 0x80
 80037ca:	0212      	lsls	r2, r2, #8
 80037cc:	611a      	str	r2, [r3, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80037ce:	4b57      	ldr	r3, [pc, #348]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	2210      	movs	r2, #16
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b10      	cmp	r3, #16
 80037d8:	d003      	beq.n	80037e2 <RCC_GetClocksFreq+0x196>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a54      	ldr	r2, [pc, #336]	; (8003930 <RCC_GetClocksFreq+0x2e4>)
 80037de:	615a      	str	r2, [r3, #20]
 80037e0:	e003      	b.n	80037ea <RCC_GetClocksFreq+0x19e>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	615a      	str	r2, [r3, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80037ea:	4b50      	ldr	r3, [pc, #320]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	2203      	movs	r2, #3
 80037f0:	4013      	ands	r3, r2
 80037f2:	d104      	bne.n	80037fe <RCC_GetClocksFreq+0x1b2>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	619a      	str	r2, [r3, #24]
 80037fc:	e01e      	b.n	800383c <RCC_GetClocksFreq+0x1f0>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80037fe:	4b4b      	ldr	r3, [pc, #300]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	2203      	movs	r2, #3
 8003804:	4013      	ands	r3, r2
 8003806:	2b01      	cmp	r3, #1
 8003808:	d104      	bne.n	8003814 <RCC_GetClocksFreq+0x1c8>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	619a      	str	r2, [r3, #24]
 8003812:	e013      	b.n	800383c <RCC_GetClocksFreq+0x1f0>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8003814:	4b45      	ldr	r3, [pc, #276]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	2203      	movs	r2, #3
 800381a:	4013      	ands	r3, r2
 800381c:	2b02      	cmp	r3, #2
 800381e:	d104      	bne.n	800382a <RCC_GetClocksFreq+0x1de>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	0212      	lsls	r2, r2, #8
 8003826:	619a      	str	r2, [r3, #24]
 8003828:	e008      	b.n	800383c <RCC_GetClocksFreq+0x1f0>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 800382a:	4b40      	ldr	r3, [pc, #256]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	2203      	movs	r2, #3
 8003830:	4013      	ands	r3, r2
 8003832:	2b03      	cmp	r3, #3
 8003834:	d102      	bne.n	800383c <RCC_GetClocksFreq+0x1f0>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a3d      	ldr	r2, [pc, #244]	; (8003930 <RCC_GetClocksFreq+0x2e4>)
 800383a:	619a      	str	r2, [r3, #24]
  }
  
  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800383c:	4b3b      	ldr	r3, [pc, #236]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 800383e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003840:	23c0      	movs	r3, #192	; 0xc0
 8003842:	029b      	lsls	r3, r3, #10
 8003844:	4013      	ands	r3, r2
 8003846:	d104      	bne.n	8003852 <RCC_GetClocksFreq+0x206>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	61da      	str	r2, [r3, #28]
 8003850:	e027      	b.n	80038a2 <RCC_GetClocksFreq+0x256>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8003852:	4b36      	ldr	r3, [pc, #216]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 8003854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003856:	23c0      	movs	r3, #192	; 0xc0
 8003858:	029b      	lsls	r3, r3, #10
 800385a:	401a      	ands	r2, r3
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	025b      	lsls	r3, r3, #9
 8003860:	429a      	cmp	r2, r3
 8003862:	d104      	bne.n	800386e <RCC_GetClocksFreq+0x222>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	61da      	str	r2, [r3, #28]
 800386c:	e019      	b.n	80038a2 <RCC_GetClocksFreq+0x256>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 800386e:	4b2f      	ldr	r3, [pc, #188]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 8003870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003872:	23c0      	movs	r3, #192	; 0xc0
 8003874:	029b      	lsls	r3, r3, #10
 8003876:	401a      	ands	r2, r3
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	029b      	lsls	r3, r3, #10
 800387c:	429a      	cmp	r2, r3
 800387e:	d104      	bne.n	800388a <RCC_GetClocksFreq+0x23e>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	0212      	lsls	r2, r2, #8
 8003886:	61da      	str	r2, [r3, #28]
 8003888:	e00b      	b.n	80038a2 <RCC_GetClocksFreq+0x256>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 800388a:	4b28      	ldr	r3, [pc, #160]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 800388c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388e:	23c0      	movs	r3, #192	; 0xc0
 8003890:	029b      	lsls	r3, r3, #10
 8003892:	401a      	ands	r2, r3
 8003894:	23c0      	movs	r3, #192	; 0xc0
 8003896:	029b      	lsls	r3, r3, #10
 8003898:	429a      	cmp	r2, r3
 800389a:	d102      	bne.n	80038a2 <RCC_GetClocksFreq+0x256>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a24      	ldr	r2, [pc, #144]	; (8003930 <RCC_GetClocksFreq+0x2e4>)
 80038a0:	61da      	str	r2, [r3, #28]
  }
  
  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80038a2:	4b22      	ldr	r3, [pc, #136]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 80038a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a6:	23c0      	movs	r3, #192	; 0xc0
 80038a8:	031b      	lsls	r3, r3, #12
 80038aa:	4013      	ands	r3, r2
 80038ac:	d104      	bne.n	80038b8 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	621a      	str	r2, [r3, #32]
 80038b6:	e027      	b.n	8003908 <RCC_GetClocksFreq+0x2bc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80038b8:	4b1c      	ldr	r3, [pc, #112]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 80038ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038bc:	23c0      	movs	r3, #192	; 0xc0
 80038be:	031b      	lsls	r3, r3, #12
 80038c0:	401a      	ands	r2, r3
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	02db      	lsls	r3, r3, #11
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d104      	bne.n	80038d4 <RCC_GetClocksFreq+0x288>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	621a      	str	r2, [r3, #32]
 80038d2:	e019      	b.n	8003908 <RCC_GetClocksFreq+0x2bc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 80038d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d8:	23c0      	movs	r3, #192	; 0xc0
 80038da:	031b      	lsls	r3, r3, #12
 80038dc:	401a      	ands	r2, r3
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	031b      	lsls	r3, r3, #12
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d104      	bne.n	80038f0 <RCC_GetClocksFreq+0x2a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2280      	movs	r2, #128	; 0x80
 80038ea:	0212      	lsls	r2, r2, #8
 80038ec:	621a      	str	r2, [r3, #32]
 80038ee:	e00b      	b.n	8003908 <RCC_GetClocksFreq+0x2bc>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 80038f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f4:	23c0      	movs	r3, #192	; 0xc0
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	401a      	ands	r2, r3
 80038fa:	23c0      	movs	r3, #192	; 0xc0
 80038fc:	031b      	lsls	r3, r3, #12
 80038fe:	429a      	cmp	r2, r3
 8003900:	d102      	bne.n	8003908 <RCC_GetClocksFreq+0x2bc>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <RCC_GetClocksFreq+0x2e4>)
 8003906:	621a      	str	r2, [r3, #32]
  }
  
  /* USBCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <RCC_GetClocksFreq+0x2e0>)
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	4013      	ands	r3, r2
 8003910:	2b80      	cmp	r3, #128	; 0x80
 8003912:	d003      	beq.n	800391c <RCC_GetClocksFreq+0x2d0>
  {
    /* USB Clock is HSI48 */
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a07      	ldr	r2, [pc, #28]	; (8003934 <RCC_GetClocksFreq+0x2e8>)
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
  }   
}
 800391a:	e002      	b.n	8003922 <RCC_GetClocksFreq+0x2d6>
    RCC_Clocks->USBCLK_Frequency = pllclk;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b008      	add	sp, #32
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	40021000 	.word	0x40021000
 8003930:	007a1200 	.word	0x007a1200
 8003934:	02dc6c00 	.word	0x02dc6c00
 8003938:	20000014 	.word	0x20000014
 800393c:	00d59f80 	.word	0x00d59f80
 8003940:	00008012 	.word	0x00008012

08003944 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	000a      	movs	r2, r1
 800394e:	1cfb      	adds	r3, r7, #3
 8003950:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003952:	1cfb      	adds	r3, r7, #3
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d006      	beq.n	8003968 <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800395a:	4b09      	ldr	r3, [pc, #36]	; (8003980 <RCC_AHBPeriphClockCmd+0x3c>)
 800395c:	6959      	ldr	r1, [r3, #20]
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <RCC_AHBPeriphClockCmd+0x3c>)
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	430a      	orrs	r2, r1
 8003964:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8003966:	e006      	b.n	8003976 <RCC_AHBPeriphClockCmd+0x32>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <RCC_AHBPeriphClockCmd+0x3c>)
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	43d9      	mvns	r1, r3
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <RCC_AHBPeriphClockCmd+0x3c>)
 8003972:	400a      	ands	r2, r1
 8003974:	615a      	str	r2, [r3, #20]
}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b002      	add	sp, #8
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	40021000 	.word	0x40021000

08003984 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	000a      	movs	r2, r1
 800398e:	1cfb      	adds	r3, r7, #3
 8003990:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003992:	1cfb      	adds	r3, r7, #3
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d006      	beq.n	80039a8 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <RCC_APB2PeriphClockCmd+0x3c>)
 800399c:	6999      	ldr	r1, [r3, #24]
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <RCC_APB2PeriphClockCmd+0x3c>)
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80039a6:	e006      	b.n	80039b6 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <RCC_APB2PeriphClockCmd+0x3c>)
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	43d9      	mvns	r1, r3
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <RCC_APB2PeriphClockCmd+0x3c>)
 80039b2:	400a      	ands	r2, r1
 80039b4:	619a      	str	r2, [r3, #24]
}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b002      	add	sp, #8
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	40021000 	.word	0x40021000

080039c4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	000a      	movs	r2, r1
 80039ce:	1cfb      	adds	r3, r7, #3
 80039d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80039d2:	1cfb      	adds	r3, r7, #3
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d006      	beq.n	80039e8 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <RCC_APB2PeriphResetCmd+0x3c>)
 80039dc:	68d9      	ldr	r1, [r3, #12]
 80039de:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <RCC_APB2PeriphResetCmd+0x3c>)
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80039e6:	e006      	b.n	80039f6 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <RCC_APB2PeriphResetCmd+0x3c>)
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	43d9      	mvns	r1, r3
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <RCC_APB2PeriphResetCmd+0x3c>)
 80039f2:	400a      	ands	r2, r1
 80039f4:	60da      	str	r2, [r3, #12]
}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b002      	add	sp, #8
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	40021000 	.word	0x40021000

08003a04 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	000a      	movs	r2, r1
 8003a0e:	1cfb      	adds	r3, r7, #3
 8003a10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003a12:	1cfb      	adds	r3, r7, #3
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d006      	beq.n	8003a28 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <RCC_APB1PeriphResetCmd+0x3c>)
 8003a1c:	6919      	ldr	r1, [r3, #16]
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <RCC_APB1PeriphResetCmd+0x3c>)
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8003a26:	e006      	b.n	8003a36 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <RCC_APB1PeriphResetCmd+0x3c>)
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	43d9      	mvns	r1, r3
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <RCC_APB1PeriphResetCmd+0x3c>)
 8003a32:	400a      	ands	r2, r1
 8003a34:	611a      	str	r2, [r3, #16]
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b002      	add	sp, #8
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	40021000 	.word	0x40021000

08003a44 <SPI_I2S_DeInit>:
  * @note   SPI2 is not available for STM32F031 devices.
  *         I2S mode is not supported for STM32F030 devices.      
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <SPI_I2S_DeInit+0x54>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d10c      	bne.n	8003a6e <SPI_I2S_DeInit+0x2a>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8003a54:	2380      	movs	r3, #128	; 0x80
 8003a56:	015b      	lsls	r3, r3, #5
 8003a58:	2101      	movs	r1, #1
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7ff ffb2 	bl	80039c4 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	015b      	lsls	r3, r3, #5
 8003a64:	2100      	movs	r1, #0
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7ff ffac 	bl	80039c4 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
      /* Release SPI2 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  }
}
 8003a6c:	e00f      	b.n	8003a8e <SPI_I2S_DeInit+0x4a>
    if (SPIx == SPI2)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <SPI_I2S_DeInit+0x58>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10b      	bne.n	8003a8e <SPI_I2S_DeInit+0x4a>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	01db      	lsls	r3, r3, #7
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f7ff ffc1 	bl	8003a04 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	01db      	lsls	r3, r3, #7
 8003a86:	2100      	movs	r1, #0
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7ff ffbb 	bl	8003a04 <RCC_APB1PeriphResetCmd>
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b002      	add	sp, #8
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	40013000 	.word	0x40013000
 8003a9c:	40003800 	.word	0x40003800

08003aa0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003aaa:	200e      	movs	r0, #14
 8003aac:	183b      	adds	r3, r7, r0
 8003aae:	2200      	movs	r2, #0
 8003ab0:	801a      	strh	r2, [r3, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8003ab2:	183b      	adds	r3, r7, r0
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	8812      	ldrh	r2, [r2, #0]
 8003ab8:	801a      	strh	r2, [r3, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8003aba:	183b      	adds	r3, r7, r0
 8003abc:	183a      	adds	r2, r7, r0
 8003abe:	8811      	ldrh	r1, [r2, #0]
 8003ac0:	22c1      	movs	r2, #193	; 0xc1
 8003ac2:	0192      	lsls	r2, r2, #6
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	801a      	strh	r2, [r3, #0]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	881a      	ldrh	r2, [r3, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	89db      	ldrh	r3, [r3, #14]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	b29a      	uxth	r2, r3
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8003af0:	4313      	orrs	r3, r2
 8003af2:	b299      	uxth	r1, r3
 8003af4:	183b      	adds	r3, r7, r0
 8003af6:	183a      	adds	r2, r7, r0
 8003af8:	8812      	ldrh	r2, [r2, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	183a      	adds	r2, r7, r0
 8003b02:	8812      	ldrh	r2, [r2, #0]
 8003b04:	801a      	strh	r2, [r3, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8003b06:	183b      	adds	r3, r7, r0
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	8892      	ldrh	r2, [r2, #4]
 8003b0c:	801a      	strh	r2, [r3, #0]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8003b0e:	183b      	adds	r3, r7, r0
 8003b10:	183a      	adds	r2, r7, r0
 8003b12:	8812      	ldrh	r2, [r2, #0]
 8003b14:	4919      	ldr	r1, [pc, #100]	; (8003b7c <SPI_Init+0xdc>)
 8003b16:	400a      	ands	r2, r1
 8003b18:	801a      	strh	r2, [r3, #0]
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	8899      	ldrh	r1, [r3, #4]
 8003b1e:	183b      	adds	r3, r7, r0
 8003b20:	183a      	adds	r2, r7, r0
 8003b22:	8812      	ldrh	r2, [r2, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	183a      	adds	r2, r7, r0
 8003b2c:	8812      	ldrh	r2, [r2, #0]
 8003b2e:	809a      	strh	r2, [r3, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	8a1a      	ldrh	r2, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	821a      	strh	r2, [r3, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8003b38:	183b      	adds	r3, r7, r0
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	8812      	ldrh	r2, [r2, #0]
 8003b3e:	801a      	strh	r2, [r3, #0]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8003b40:	183b      	adds	r3, r7, r0
 8003b42:	183a      	adds	r2, r7, r0
 8003b44:	8812      	ldrh	r2, [r2, #0]
 8003b46:	2104      	movs	r1, #4
 8003b48:	438a      	bics	r2, r1
 8003b4a:	801a      	strh	r2, [r3, #0]
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	8859      	ldrh	r1, [r3, #2]
 8003b50:	183b      	adds	r3, r7, r0
 8003b52:	183a      	adds	r2, r7, r0
 8003b54:	8812      	ldrh	r2, [r2, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	801a      	strh	r2, [r3, #0]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	183a      	adds	r2, r7, r0
 8003b5e:	8812      	ldrh	r2, [r2, #0]
 8003b60:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8b9b      	ldrh	r3, [r3, #28]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <SPI_Init+0xe0>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	839a      	strh	r2, [r3, #28]
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b004      	add	sp, #16
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	fffff0ff 	.word	0xfffff0ff
 8003b80:	fffff7ff 	.word	0xfffff7ff

08003b84 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	000a      	movs	r2, r1
 8003b8e:	1cfb      	adds	r3, r7, #3
 8003b90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b92:	1cfb      	adds	r3, r7, #3
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <SPI_Cmd+0x28>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2240      	movs	r2, #64	; 0x40
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8003baa:	e007      	b.n	8003bbc <SPI_Cmd+0x38>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2240      	movs	r2, #64	; 0x40
 8003bb4:	4393      	bics	r3, r2
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	801a      	strh	r2, [r3, #0]
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <SPI_SendData8>:
  * @note   SPI2 is not available for STM32F031 devices.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	000a      	movs	r2, r1
 8003bce:	1cfb      	adds	r3, r7, #3
 8003bd0:	701a      	strb	r2, [r3, #0]
  uint32_t spixbase = 0x00;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1cfa      	adds	r2, r7, #3
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	701a      	strb	r2, [r3, #0]
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b004      	add	sp, #16
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <SYSCFG_EXTILineConfig>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	1dfb      	adds	r3, r7, #7
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	1dbb      	adds	r3, r7, #6
 8003bfe:	1c0a      	adds	r2, r1, #0
 8003c00:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0x00;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8003c06:	1dbb      	adds	r3, r7, #6
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	220f      	movs	r2, #15
 8003c12:	409a      	lsls	r2, r3
 8003c14:	0013      	movs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8003c18:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <SYSCFG_EXTILineConfig+0x8c>)
 8003c1a:	1dbb      	adds	r3, r7, #6
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	089b      	lsrs	r3, r3, #2
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	3302      	adds	r3, #2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	589b      	ldr	r3, [r3, r2]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	43d2      	mvns	r2, r2
 8003c2c:	4813      	ldr	r0, [pc, #76]	; (8003c7c <SYSCFG_EXTILineConfig+0x8c>)
 8003c2e:	1db9      	adds	r1, r7, #6
 8003c30:	7809      	ldrb	r1, [r1, #0]
 8003c32:	0889      	lsrs	r1, r1, #2
 8003c34:	b2c9      	uxtb	r1, r1
 8003c36:	401a      	ands	r2, r3
 8003c38:	1c8b      	adds	r3, r1, #2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	501a      	str	r2, [r3, r0]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8003c3e:	4a0f      	ldr	r2, [pc, #60]	; (8003c7c <SYSCFG_EXTILineConfig+0x8c>)
 8003c40:	1dbb      	adds	r3, r7, #6
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	089b      	lsrs	r3, r3, #2
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	3302      	adds	r3, #2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	589a      	ldr	r2, [r3, r2]
 8003c4e:	1dfb      	adds	r3, r7, #7
 8003c50:	7819      	ldrb	r1, [r3, #0]
 8003c52:	1dbb      	adds	r3, r7, #6
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2003      	movs	r0, #3
 8003c58:	4003      	ands	r3, r0
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4099      	lsls	r1, r3
 8003c5e:	000b      	movs	r3, r1
 8003c60:	4806      	ldr	r0, [pc, #24]	; (8003c7c <SYSCFG_EXTILineConfig+0x8c>)
 8003c62:	1db9      	adds	r1, r7, #6
 8003c64:	7809      	ldrb	r1, [r1, #0]
 8003c66:	0889      	lsrs	r1, r1, #2
 8003c68:	b2c9      	uxtb	r1, r1
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	1c8b      	adds	r3, r1, #2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	501a      	str	r2, [r3, r0]
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b004      	add	sp, #16
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	40010000 	.word	0x40010000

08003c80 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8003c8a:	210e      	movs	r1, #14
 8003c8c:	187b      	adds	r3, r7, r1
 8003c8e:	2200      	movs	r2, #0
 8003c90:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8003c92:	187b      	adds	r3, r7, r1
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	8812      	ldrh	r2, [r2, #0]
 8003c98:	801a      	strh	r2, [r3, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2a      	ldr	r2, [pc, #168]	; (8003d48 <TIM_TimeBaseInit+0xc8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d008      	beq.n	8003cb4 <TIM_TimeBaseInit+0x34>
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	05db      	lsls	r3, r3, #23
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d003      	beq.n	8003cb4 <TIM_TimeBaseInit+0x34>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <TIM_TimeBaseInit+0xcc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d10d      	bne.n	8003cd0 <TIM_TimeBaseInit+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8003cb4:	200e      	movs	r0, #14
 8003cb6:	183b      	adds	r3, r7, r0
 8003cb8:	183a      	adds	r2, r7, r0
 8003cba:	8812      	ldrh	r2, [r2, #0]
 8003cbc:	2170      	movs	r1, #112	; 0x70
 8003cbe:	438a      	bics	r2, r1
 8003cc0:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	8859      	ldrh	r1, [r3, #2]
 8003cc6:	183b      	adds	r3, r7, r0
 8003cc8:	183a      	adds	r2, r7, r0
 8003cca:	8812      	ldrh	r2, [r2, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	801a      	strh	r2, [r3, #0]
  }
 
  if(TIMx != TIM6)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <TIM_TimeBaseInit+0xd0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00d      	beq.n	8003cf4 <TIM_TimeBaseInit+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8003cd8:	200e      	movs	r0, #14
 8003cda:	183b      	adds	r3, r7, r0
 8003cdc:	183a      	adds	r2, r7, r0
 8003cde:	8812      	ldrh	r2, [r2, #0]
 8003ce0:	491c      	ldr	r1, [pc, #112]	; (8003d54 <TIM_TimeBaseInit+0xd4>)
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	8919      	ldrh	r1, [r3, #8]
 8003cea:	183b      	adds	r3, r7, r0
 8003cec:	183a      	adds	r2, r7, r0
 8003cee:	8812      	ldrh	r2, [r2, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	801a      	strh	r2, [r3, #0]
  }

  TIMx->CR1 = tmpcr1;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	220e      	movs	r2, #14
 8003cf8:	18ba      	adds	r2, r7, r2
 8003cfa:	8812      	ldrh	r2, [r2, #0]
 8003cfc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <TIM_TimeBaseInit+0xc8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00b      	beq.n	8003d2e <TIM_TimeBaseInit+0xae>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a0f      	ldr	r2, [pc, #60]	; (8003d58 <TIM_TimeBaseInit+0xd8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <TIM_TimeBaseInit+0xae>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a0e      	ldr	r2, [pc, #56]	; (8003d5c <TIM_TimeBaseInit+0xdc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <TIM_TimeBaseInit+0xae>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <TIM_TimeBaseInit+0xe0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d104      	bne.n	8003d38 <TIM_TimeBaseInit+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	7a9b      	ldrb	r3, [r3, #10]
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	829a      	strh	r2, [r3, #20]
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b004      	add	sp, #16
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	40012c00 	.word	0x40012c00
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40001000 	.word	0x40001000
 8003d54:	fffffcff 	.word	0xfffffcff
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40014400 	.word	0x40014400
 8003d60:	40014800 	.word	0x40014800

08003d64 <TIM_SetCounter>:
  * @note   TIM2 is not applicable for STM32F030 devices.    
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
//   assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	000a      	movs	r2, r1
 8003d86:	1cfb      	adds	r3, r7, #3
 8003d88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003d8a:	1cfb      	adds	r3, r7, #3
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <TIM_Cmd+0x28>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2201      	movs	r2, #1
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8003da2:	e007      	b.n	8003db4 <TIM_Cmd+0x38>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2201      	movs	r2, #1
 8003dac:	4393      	bics	r3, r2
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	801a      	strh	r2, [r3, #0]
}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b002      	add	sp, #8
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	000a      	movs	r2, r1
 8003dc6:	1cfb      	adds	r3, r7, #3
 8003dc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003dca:	1cfb      	adds	r3, r7, #3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2244      	movs	r2, #68	; 0x44
 8003dd6:	5a9b      	ldrh	r3, [r3, r2]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <TIM_CtrlPWMOutputs+0x48>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	b299      	uxth	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2244      	movs	r2, #68	; 0x44
 8003de4:	5299      	strh	r1, [r3, r2]
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
 8003de6:	e009      	b.n	8003dfc <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2244      	movs	r2, #68	; 0x44
 8003dec:	5a9b      	ldrh	r3, [r3, r2]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	045b      	lsls	r3, r3, #17
 8003df2:	0c5b      	lsrs	r3, r3, #17
 8003df4:	b299      	uxth	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2244      	movs	r2, #68	; 0x44
 8003dfa:	5299      	strh	r1, [r3, r2]
}
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b002      	add	sp, #8
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	ffff8000 	.word	0xffff8000

08003e08 <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8003e12:	210a      	movs	r1, #10
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	2200      	movs	r2, #0
 8003e18:	801a      	strh	r2, [r3, #0]
 8003e1a:	240e      	movs	r4, #14
 8003e1c:	193b      	adds	r3, r7, r4
 8003e1e:	2200      	movs	r2, #0
 8003e20:	801a      	strh	r2, [r3, #0]
 8003e22:	200c      	movs	r0, #12
 8003e24:	183b      	adds	r3, r7, r0
 8003e26:	2200      	movs	r2, #0
 8003e28:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8c1b      	ldrh	r3, [r3, #32]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2201      	movs	r2, #1
 8003e32:	4393      	bics	r3, r2
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3a:	193b      	adds	r3, r7, r4
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	8c12      	ldrh	r2, [r2, #32]
 8003e40:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e42:	183b      	adds	r3, r7, r0
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	8892      	ldrh	r2, [r2, #4]
 8003e48:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4a:	187b      	adds	r3, r7, r1
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	8b12      	ldrh	r2, [r2, #24]
 8003e50:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	0008      	movs	r0, r1
 8003e56:	187a      	adds	r2, r7, r1
 8003e58:	8812      	ldrh	r2, [r2, #0]
 8003e5a:	2170      	movs	r1, #112	; 0x70
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8003e60:	183b      	adds	r3, r7, r0
 8003e62:	183a      	adds	r2, r7, r0
 8003e64:	8812      	ldrh	r2, [r2, #0]
 8003e66:	2103      	movs	r1, #3
 8003e68:	438a      	bics	r2, r1
 8003e6a:	801a      	strh	r2, [r3, #0]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	8819      	ldrh	r1, [r3, #0]
 8003e70:	183b      	adds	r3, r7, r0
 8003e72:	183a      	adds	r2, r7, r0
 8003e74:	8812      	ldrh	r2, [r2, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8003e7a:	0020      	movs	r0, r4
 8003e7c:	183b      	adds	r3, r7, r0
 8003e7e:	183a      	adds	r2, r7, r0
 8003e80:	8812      	ldrh	r2, [r2, #0]
 8003e82:	2102      	movs	r1, #2
 8003e84:	438a      	bics	r2, r1
 8003e86:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	8999      	ldrh	r1, [r3, #12]
 8003e8c:	183b      	adds	r3, r7, r0
 8003e8e:	183a      	adds	r2, r7, r0
 8003e90:	8812      	ldrh	r2, [r2, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	8859      	ldrh	r1, [r3, #2]
 8003e9a:	183b      	adds	r3, r7, r0
 8003e9c:	183a      	adds	r2, r7, r0
 8003e9e:	8812      	ldrh	r2, [r2, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a2e      	ldr	r2, [pc, #184]	; (8003f60 <TIM_OC1Init+0x158>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00b      	beq.n	8003ec4 <TIM_OC1Init+0xbc>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <TIM_OC1Init+0x15c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d007      	beq.n	8003ec4 <TIM_OC1Init+0xbc>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a2c      	ldr	r2, [pc, #176]	; (8003f68 <TIM_OC1Init+0x160>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_OC1Init+0xbc>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a2b      	ldr	r2, [pc, #172]	; (8003f6c <TIM_OC1Init+0x164>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d135      	bne.n	8003f30 <TIM_OC1Init+0x128>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8003ec4:	200e      	movs	r0, #14
 8003ec6:	183b      	adds	r3, r7, r0
 8003ec8:	183a      	adds	r2, r7, r0
 8003eca:	8812      	ldrh	r2, [r2, #0]
 8003ecc:	2108      	movs	r1, #8
 8003ece:	438a      	bics	r2, r1
 8003ed0:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	89d9      	ldrh	r1, [r3, #14]
 8003ed6:	183b      	adds	r3, r7, r0
 8003ed8:	183a      	adds	r2, r7, r0
 8003eda:	8812      	ldrh	r2, [r2, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	801a      	strh	r2, [r3, #0]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8003ee0:	183b      	adds	r3, r7, r0
 8003ee2:	183a      	adds	r2, r7, r0
 8003ee4:	8812      	ldrh	r2, [r2, #0]
 8003ee6:	2104      	movs	r1, #4
 8003ee8:	438a      	bics	r2, r1
 8003eea:	801a      	strh	r2, [r3, #0]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	8899      	ldrh	r1, [r3, #4]
 8003ef0:	183b      	adds	r3, r7, r0
 8003ef2:	183a      	adds	r2, r7, r0
 8003ef4:	8812      	ldrh	r2, [r2, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	801a      	strh	r2, [r3, #0]
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8003efa:	200c      	movs	r0, #12
 8003efc:	183b      	adds	r3, r7, r0
 8003efe:	183a      	adds	r2, r7, r0
 8003f00:	8812      	ldrh	r2, [r2, #0]
 8003f02:	491b      	ldr	r1, [pc, #108]	; (8003f70 <TIM_OC1Init+0x168>)
 8003f04:	400a      	ands	r2, r1
 8003f06:	801a      	strh	r2, [r3, #0]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8003f08:	183b      	adds	r3, r7, r0
 8003f0a:	183a      	adds	r2, r7, r0
 8003f0c:	8812      	ldrh	r2, [r2, #0]
 8003f0e:	4919      	ldr	r1, [pc, #100]	; (8003f74 <TIM_OC1Init+0x16c>)
 8003f10:	400a      	ands	r2, r1
 8003f12:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	8a19      	ldrh	r1, [r3, #16]
 8003f18:	183b      	adds	r3, r7, r0
 8003f1a:	183a      	adds	r2, r7, r0
 8003f1c:	8812      	ldrh	r2, [r2, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	8a59      	ldrh	r1, [r3, #18]
 8003f26:	183b      	adds	r3, r7, r0
 8003f28:	183a      	adds	r2, r7, r0
 8003f2a:	8812      	ldrh	r2, [r2, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	220c      	movs	r2, #12
 8003f34:	18ba      	adds	r2, r7, r2
 8003f36:	8812      	ldrh	r2, [r2, #0]
 8003f38:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	220a      	movs	r2, #10
 8003f3e:	18ba      	adds	r2, r7, r2
 8003f40:	8812      	ldrh	r2, [r2, #0]
 8003f42:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	635a      	str	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	220e      	movs	r2, #14
 8003f50:	18ba      	adds	r2, r7, r2
 8003f52:	8812      	ldrh	r2, [r2, #0]
 8003f54:	841a      	strh	r2, [r3, #32]
}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b005      	add	sp, #20
 8003f5c:	bd90      	pop	{r4, r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40014400 	.word	0x40014400
 8003f6c:	40014800 	.word	0x40014800
 8003f70:	fffffeff 	.word	0xfffffeff
 8003f74:	fffffdff 	.word	0xfffffdff

08003f78 <TIM_OC2Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8003f82:	210a      	movs	r1, #10
 8003f84:	187b      	adds	r3, r7, r1
 8003f86:	2200      	movs	r2, #0
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	240e      	movs	r4, #14
 8003f8c:	193b      	adds	r3, r7, r4
 8003f8e:	2200      	movs	r2, #0
 8003f90:	801a      	strh	r2, [r3, #0]
 8003f92:	200c      	movs	r0, #12
 8003f94:	183b      	adds	r3, r7, r0
 8003f96:	2200      	movs	r2, #0
 8003f98:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8c1b      	ldrh	r3, [r3, #32]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	4393      	bics	r3, r2
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8003faa:	193b      	adds	r3, r7, r4
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	8c12      	ldrh	r2, [r2, #32]
 8003fb0:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb2:	183b      	adds	r3, r7, r0
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	8892      	ldrh	r2, [r2, #4]
 8003fb8:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	8b12      	ldrh	r2, [r2, #24]
 8003fc0:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 8003fc2:	187b      	adds	r3, r7, r1
 8003fc4:	0008      	movs	r0, r1
 8003fc6:	187a      	adds	r2, r7, r1
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	4946      	ldr	r1, [pc, #280]	; (80040e4 <TIM_OC2Init+0x16c>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8003fd0:	183b      	adds	r3, r7, r0
 8003fd2:	183a      	adds	r2, r7, r0
 8003fd4:	8812      	ldrh	r2, [r2, #0]
 8003fd6:	4944      	ldr	r1, [pc, #272]	; (80040e8 <TIM_OC2Init+0x170>)
 8003fd8:	400a      	ands	r2, r1
 8003fda:	801a      	strh	r2, [r3, #0]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	b299      	uxth	r1, r3
 8003fe4:	183b      	adds	r3, r7, r0
 8003fe6:	183a      	adds	r2, r7, r0
 8003fe8:	8812      	ldrh	r2, [r2, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8003fee:	0020      	movs	r0, r4
 8003ff0:	183b      	adds	r3, r7, r0
 8003ff2:	183a      	adds	r2, r7, r0
 8003ff4:	8812      	ldrh	r2, [r2, #0]
 8003ff6:	2120      	movs	r1, #32
 8003ff8:	438a      	bics	r2, r1
 8003ffa:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	899b      	ldrh	r3, [r3, #12]
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	b299      	uxth	r1, r3
 8004004:	183b      	adds	r3, r7, r0
 8004006:	183a      	adds	r2, r7, r0
 8004008:	8812      	ldrh	r2, [r2, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	885b      	ldrh	r3, [r3, #2]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	b299      	uxth	r1, r3
 8004016:	183b      	adds	r3, r7, r0
 8004018:	183a      	adds	r2, r7, r0
 800401a:	8812      	ldrh	r2, [r2, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM15))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a32      	ldr	r2, [pc, #200]	; (80040ec <TIM_OC2Init+0x174>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_OC2Init+0xb8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a31      	ldr	r2, [pc, #196]	; (80040f0 <TIM_OC2Init+0x178>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d141      	bne.n	80040b4 <TIM_OC2Init+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Ouput Compare State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8004030:	200c      	movs	r0, #12
 8004032:	183b      	adds	r3, r7, r0
 8004034:	183a      	adds	r2, r7, r0
 8004036:	8812      	ldrh	r2, [r2, #0]
 8004038:	492e      	ldr	r1, [pc, #184]	; (80040f4 <TIM_OC2Init+0x17c>)
 800403a:	400a      	ands	r2, r1
 800403c:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	8a1b      	ldrh	r3, [r3, #16]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	b299      	uxth	r1, r3
 8004046:	183b      	adds	r3, r7, r0
 8004048:	183a      	adds	r2, r7, r0
 800404a:	8812      	ldrh	r2, [r2, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	801a      	strh	r2, [r3, #0]
    
    if (TIMx == TIM1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a26      	ldr	r2, [pc, #152]	; (80040ec <TIM_OC2Init+0x174>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d12d      	bne.n	80040b4 <TIM_OC2Init+0x13c>
      assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
      assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
      assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
      
      /* Reset the Output N Polarity level */
      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8004058:	240e      	movs	r4, #14
 800405a:	193b      	adds	r3, r7, r4
 800405c:	193a      	adds	r2, r7, r4
 800405e:	8812      	ldrh	r2, [r2, #0]
 8004060:	2180      	movs	r1, #128	; 0x80
 8004062:	438a      	bics	r2, r1
 8004064:	801a      	strh	r2, [r3, #0]
      /* Set the Output N Polarity */
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	89db      	ldrh	r3, [r3, #14]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	b299      	uxth	r1, r3
 800406e:	193b      	adds	r3, r7, r4
 8004070:	193a      	adds	r2, r7, r4
 8004072:	8812      	ldrh	r2, [r2, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	801a      	strh	r2, [r3, #0]
      
      /* Reset the Output N State */
      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8004078:	193b      	adds	r3, r7, r4
 800407a:	193a      	adds	r2, r7, r4
 800407c:	8812      	ldrh	r2, [r2, #0]
 800407e:	2140      	movs	r1, #64	; 0x40
 8004080:	438a      	bics	r2, r1
 8004082:	801a      	strh	r2, [r3, #0]
      /* Set the Output N State */
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	889b      	ldrh	r3, [r3, #4]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	b299      	uxth	r1, r3
 800408c:	193b      	adds	r3, r7, r4
 800408e:	193a      	adds	r2, r7, r4
 8004090:	8812      	ldrh	r2, [r2, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	801a      	strh	r2, [r3, #0]
      
      /* Reset the Output Compare N IDLE State */
      tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8004096:	183b      	adds	r3, r7, r0
 8004098:	183a      	adds	r2, r7, r0
 800409a:	8812      	ldrh	r2, [r2, #0]
 800409c:	4916      	ldr	r1, [pc, #88]	; (80040f8 <TIM_OC2Init+0x180>)
 800409e:	400a      	ands	r2, r1
 80040a0:	801a      	strh	r2, [r3, #0]
      
      /* Set the Output N Idle state */
      tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	8a5b      	ldrh	r3, [r3, #18]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	b299      	uxth	r1, r3
 80040aa:	183b      	adds	r3, r7, r0
 80040ac:	183a      	adds	r2, r7, r0
 80040ae:	8812      	ldrh	r2, [r2, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	801a      	strh	r2, [r3, #0]
    }
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	220c      	movs	r2, #12
 80040b8:	18ba      	adds	r2, r7, r2
 80040ba:	8812      	ldrh	r2, [r2, #0]
 80040bc:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	220a      	movs	r2, #10
 80040c2:	18ba      	adds	r2, r7, r2
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	220e      	movs	r2, #14
 80040d4:	18ba      	adds	r2, r7, r2
 80040d6:	8812      	ldrh	r2, [r2, #0]
 80040d8:	841a      	strh	r2, [r3, #32]
}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	b005      	add	sp, #20
 80040e0:	bd90      	pop	{r4, r7, pc}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	ffff8fff 	.word	0xffff8fff
 80040e8:	fffffcff 	.word	0xfffffcff
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40014000 	.word	0x40014000
 80040f4:	fffffbff 	.word	0xfffffbff
 80040f8:	fffff7ff 	.word	0xfffff7ff

080040fc <TIM_OC4Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80040fc:	b5b0      	push	{r4, r5, r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8004106:	210c      	movs	r1, #12
 8004108:	187b      	adds	r3, r7, r1
 800410a:	2200      	movs	r2, #0
 800410c:	801a      	strh	r2, [r3, #0]
 800410e:	240a      	movs	r4, #10
 8004110:	193b      	adds	r3, r7, r4
 8004112:	2200      	movs	r2, #0
 8004114:	801a      	strh	r2, [r3, #0]
 8004116:	250e      	movs	r5, #14
 8004118:	197b      	adds	r3, r7, r5
 800411a:	2200      	movs	r2, #0
 800411c:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8c1b      	ldrh	r3, [r3, #32]
 8004122:	b29b      	uxth	r3, r3
 8004124:	4a34      	ldr	r2, [pc, #208]	; (80041f8 <TIM_OC4Init+0xfc>)
 8004126:	4013      	ands	r3, r2
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412e:	193b      	adds	r3, r7, r4
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	8c12      	ldrh	r2, [r2, #32]
 8004134:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004136:	197b      	adds	r3, r7, r5
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	8892      	ldrh	r2, [r2, #4]
 800413c:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800413e:	187b      	adds	r3, r7, r1
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	8b92      	ldrh	r2, [r2, #28]
 8004144:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8004146:	187b      	adds	r3, r7, r1
 8004148:	0008      	movs	r0, r1
 800414a:	187a      	adds	r2, r7, r1
 800414c:	8812      	ldrh	r2, [r2, #0]
 800414e:	492b      	ldr	r1, [pc, #172]	; (80041fc <TIM_OC4Init+0x100>)
 8004150:	400a      	ands	r2, r1
 8004152:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8004154:	183b      	adds	r3, r7, r0
 8004156:	183a      	adds	r2, r7, r0
 8004158:	8812      	ldrh	r2, [r2, #0]
 800415a:	4929      	ldr	r1, [pc, #164]	; (8004200 <TIM_OC4Init+0x104>)
 800415c:	400a      	ands	r2, r1
 800415e:	801a      	strh	r2, [r3, #0]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	b299      	uxth	r1, r3
 8004168:	183b      	adds	r3, r7, r0
 800416a:	183a      	adds	r2, r7, r0
 800416c:	8812      	ldrh	r2, [r2, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8004172:	0020      	movs	r0, r4
 8004174:	183b      	adds	r3, r7, r0
 8004176:	183a      	adds	r2, r7, r0
 8004178:	8812      	ldrh	r2, [r2, #0]
 800417a:	4922      	ldr	r1, [pc, #136]	; (8004204 <TIM_OC4Init+0x108>)
 800417c:	400a      	ands	r2, r1
 800417e:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	899b      	ldrh	r3, [r3, #12]
 8004184:	031b      	lsls	r3, r3, #12
 8004186:	b299      	uxth	r1, r3
 8004188:	183b      	adds	r3, r7, r0
 800418a:	183a      	adds	r2, r7, r0
 800418c:	8812      	ldrh	r2, [r2, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	885b      	ldrh	r3, [r3, #2]
 8004196:	031b      	lsls	r3, r3, #12
 8004198:	b299      	uxth	r1, r3
 800419a:	183b      	adds	r3, r7, r0
 800419c:	183a      	adds	r2, r7, r0
 800419e:	8812      	ldrh	r2, [r2, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	801a      	strh	r2, [r3, #0]
    
  if(TIMx == TIM1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a18      	ldr	r2, [pc, #96]	; (8004208 <TIM_OC4Init+0x10c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d10e      	bne.n	80041ca <TIM_OC4Init+0xce>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 80041ac:	197b      	adds	r3, r7, r5
 80041ae:	197a      	adds	r2, r7, r5
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	4916      	ldr	r1, [pc, #88]	; (800420c <TIM_OC4Init+0x110>)
 80041b4:	400a      	ands	r2, r1
 80041b6:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	8a1b      	ldrh	r3, [r3, #16]
 80041bc:	019b      	lsls	r3, r3, #6
 80041be:	b299      	uxth	r1, r3
 80041c0:	197b      	adds	r3, r7, r5
 80041c2:	197a      	adds	r2, r7, r5
 80041c4:	8812      	ldrh	r2, [r2, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	220e      	movs	r2, #14
 80041ce:	18ba      	adds	r2, r7, r2
 80041d0:	8812      	ldrh	r2, [r2, #0]
 80041d2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	220c      	movs	r2, #12
 80041d8:	18ba      	adds	r2, r7, r2
 80041da:	8812      	ldrh	r2, [r2, #0]
 80041dc:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	220a      	movs	r2, #10
 80041ea:	18ba      	adds	r2, r7, r2
 80041ec:	8812      	ldrh	r2, [r2, #0]
 80041ee:	841a      	strh	r2, [r3, #32]
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b004      	add	sp, #16
 80041f6:	bdb0      	pop	{r4, r5, r7, pc}
 80041f8:	ffffefff 	.word	0xffffefff
 80041fc:	ffff8fff 	.word	0xffff8fff
 8004200:	fffffcff 	.word	0xfffffcff
 8004204:	ffffdfff 	.word	0xffffdfff
 8004208:	40012c00 	.word	0x40012c00
 800420c:	ffffbfff 	.word	0xffffbfff

08004210 <TIM_SetCompare1>:
  * @note   TIM2 is not applicable for STM32F030 devices.  
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
//  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b002      	add	sp, #8
 8004226:	bd80      	pop	{r7, pc}

08004228 <TIM_SetCompare2>:
  * @note   TIM2 is not applicable for STM32F030 devices.  
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
//  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b002      	add	sp, #8
 800423e:	bd80      	pop	{r7, pc}

08004240 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b091      	sub	sp, #68	; 0x44
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800424e:	2300      	movs	r3, #0
 8004250:	63bb      	str	r3, [r7, #56]	; 0x38
 8004252:	2300      	movs	r3, #0
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2201      	movs	r2, #1
 800425c:	4393      	bics	r3, r2
 800425e:	001a      	movs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426c:	4a4f      	ldr	r2, [pc, #316]	; (80043ac <USART_Init+0x16c>)
 800426e:	4013      	ands	r3, r2
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004278:	4313      	orrs	r3, r2
 800427a:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004280:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8004288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428a:	4a49      	ldr	r2, [pc, #292]	; (80043b0 <USART_Init+0x170>)
 800428c:	4013      	ands	r3, r2
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800429e:	4313      	orrs	r3, r2
 80042a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042a2:	4313      	orrs	r3, r2
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042aa:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	637b      	str	r3, [r7, #52]	; 0x34
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80042b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b4:	4a3f      	ldr	r2, [pc, #252]	; (80043b4 <USART_Init+0x174>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c0:	4313      	orrs	r3, r2
 80042c2:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c8:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80042ca:	240c      	movs	r4, #12
 80042cc:	193b      	adds	r3, r7, r4
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7ff f9bc 	bl	800364c <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a38      	ldr	r2, [pc, #224]	; (80043b8 <USART_Init+0x178>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d103      	bne.n	80042e4 <USART_Init+0xa4>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 80042dc:	193b      	adds	r3, r7, r4
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80042e2:	e015      	b.n	8004310 <USART_Init+0xd0>
  }
  else if (USARTx == USART2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a35      	ldr	r2, [pc, #212]	; (80043bc <USART_Init+0x17c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d104      	bne.n	80042f6 <USART_Init+0xb6>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 80042ec:	230c      	movs	r3, #12
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042f4:	e00c      	b.n	8004310 <USART_Init+0xd0>
  }
   else if (USARTx == USART3)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a31      	ldr	r2, [pc, #196]	; (80043c0 <USART_Init+0x180>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d104      	bne.n	8004308 <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 80042fe:	230c      	movs	r3, #12
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	63bb      	str	r3, [r7, #56]	; 0x38
 8004306:	e003      	b.n	8004310 <USART_Init+0xd0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8004308:	230c      	movs	r3, #12
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	63bb      	str	r3, [r7, #56]	; 0x38
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	4013      	ands	r3, r2
 800431a:	d014      	beq.n	8004346 <USART_Init+0x106>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 800431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431e:	005a      	lsls	r2, r3, #1
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0019      	movs	r1, r3
 8004326:	0010      	movs	r0, r2
 8004328:	f7fb fef6 	bl	8000118 <__udivsi3>
 800432c:	0003      	movs	r3, r0
 800432e:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8004330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004332:	005a      	lsls	r2, r3, #1
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0019      	movs	r1, r3
 800433a:	0010      	movs	r0, r2
 800433c:	f7fb ff72 	bl	8000224 <__aeabi_uidivmod>
 8004340:	000b      	movs	r3, r1
 8004342:	637b      	str	r3, [r7, #52]	; 0x34
 8004344:	e010      	b.n	8004368 <USART_Init+0x128>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	0019      	movs	r1, r3
 800434c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800434e:	f7fb fee3 	bl	8000118 <__udivsi3>
 8004352:	0003      	movs	r3, r0
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	0011      	movs	r1, r2
 800435e:	0018      	movs	r0, r3
 8004360:	f7fb ff60 	bl	8000224 <__aeabi_uidivmod>
 8004364:	000b      	movs	r3, r1
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <USART_Init+0x13a>
  {
    divider++;
 8004374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004376:	3301      	adds	r3, #1
 8004378:	63fb      	str	r3, [r7, #60]	; 0x3c
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	4013      	ands	r3, r2
 8004384:	d00a      	beq.n	800439c <USART_Init+0x15c>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8004386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	2207      	movs	r2, #7
 800438c:	4013      	ands	r3, r2
 800438e:	637b      	str	r3, [r7, #52]	; 0x34
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8004390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004392:	4a0c      	ldr	r2, [pc, #48]	; (80043c4 <USART_Init+0x184>)
 8004394:	4013      	ands	r3, r2
 8004396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004398:	4313      	orrs	r3, r2
 800439a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 800439c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439e:	b29a      	uxth	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	819a      	strh	r2, [r3, #12]
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b011      	add	sp, #68	; 0x44
 80043aa:	bd90      	pop	{r4, r7, pc}
 80043ac:	ffffcfff 	.word	0xffffcfff
 80043b0:	ffffe9f3 	.word	0xffffe9f3
 80043b4:	fffffcff 	.word	0xfffffcff
 80043b8:	40013800 	.word	0x40013800
 80043bc:	40004400 	.word	0x40004400
 80043c0:	40004800 	.word	0x40004800
 80043c4:	0000fff0 	.word	0x0000fff0

080043c8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	000a      	movs	r2, r1
 80043d2:	1cfb      	adds	r3, r7, #3
 80043d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80043d6:	1cfb      	adds	r3, r7, #3
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d006      	beq.n	80043ec <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2201      	movs	r2, #1
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 80043ea:	e006      	b.n	80043fa <USART_Cmd+0x32>
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2201      	movs	r2, #1
 80043f2:	4393      	bics	r3, r2
 80043f4:	001a      	movs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	601a      	str	r2, [r3, #0]
}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b002      	add	sp, #8
 8004400:	bd80      	pop	{r7, pc}

08004402 <USART_ReceiveData>:
  * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
  * @note   USART2 is not available for STM32F031 devices.   
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800440e:	b29b      	uxth	r3, r3
 8004410:	05db      	lsls	r3, r3, #23
 8004412:	0ddb      	lsrs	r3, r3, #23
 8004414:	b29b      	uxth	r3, r3
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b002      	add	sp, #8
 800441c:	bd80      	pop	{r7, pc}

0800441e <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b088      	sub	sp, #32
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	1dfb      	adds	r3, r7, #7
 800442a:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	2300      	movs	r3, #0
 8004436:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	61fb      	str	r3, [r7, #28]
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	b29b      	uxth	r3, r3
 8004444:	0a1b      	lsrs	r3, r3, #8
 8004446:	b29b      	uxth	r3, r3
 8004448:	61bb      	str	r3, [r7, #24]
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	22ff      	movs	r2, #255	; 0xff
 800444e:	4013      	ands	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8004452:	2201      	movs	r2, #1
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	409a      	lsls	r2, r3
 8004458:	0013      	movs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d103      	bne.n	800446a <USART_ITConfig+0x4c>
  {
    usartxbase += 0x04;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	3304      	adds	r3, #4
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	e005      	b.n	8004476 <USART_ITConfig+0x58>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d102      	bne.n	8004476 <USART_ITConfig+0x58>
  {
    usartxbase += 0x08;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	3308      	adds	r3, #8
 8004474:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8004476:	1dfb      	adds	r3, r7, #7
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d006      	beq.n	800448c <USART_ITConfig+0x6e>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	6819      	ldr	r1, [r3, #0]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	430a      	orrs	r2, r1
 8004488:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800448a:	e006      	b.n	800449a <USART_ITConfig+0x7c>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43d9      	mvns	r1, r3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	400a      	ands	r2, r1
 8004498:	601a      	str	r2, [r3, #0]
}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	b008      	add	sp, #32
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <USART_GetITStatus>:
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b086      	sub	sp, #24
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	2300      	movs	r3, #0
 80044b6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80044b8:	2313      	movs	r3, #19
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	22ff      	movs	r2, #255	; 0xff
 80044ce:	4013      	ands	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80044d2:	2201      	movs	r2, #1
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	409a      	lsls	r2, r3
 80044d8:	0013      	movs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d105      	bne.n	80044ee <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	4013      	ands	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	e00d      	b.n	800450a <USART_GetITStatus+0x68>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d105      	bne.n	8004500 <USART_GetITStatus+0x5e>
  {
    itmask &= USARTx->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	4013      	ands	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	e004      	b.n	800450a <USART_GetITStatus+0x68>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	4013      	ands	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8004510:	2201      	movs	r2, #1
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	409a      	lsls	r2, r3
 8004516:	0013      	movs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4013      	ands	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <USART_GetITStatus+0x98>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d004      	beq.n	800453a <USART_GetITStatus+0x98>
  {
    bitstatus = SET;
 8004530:	2313      	movs	r3, #19
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
 8004538:	e003      	b.n	8004542 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 800453a:	2313      	movs	r3, #19
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
 8004542:	2313      	movs	r3, #19
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	781b      	ldrb	r3, [r3, #0]
}
 8004548:	0018      	movs	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	b006      	add	sp, #24
 800454e:	bd80      	pop	{r7, pc}

08004550 <USART_ClearITPendingBit>:
  *           (USART_SendData()) or by writing 1 to the TXFRQ in the register 
  *           USART_RQR (USART_RequestCmd()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	2300      	movs	r3, #0
 8004560:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	60fb      	str	r3, [r7, #12]
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8004568:	2201      	movs	r2, #1
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	409a      	lsls	r2, r3
 800456e:	0013      	movs	r3, r2
 8004570:	60bb      	str	r3, [r7, #8]
  USARTx->ICR = (uint32_t)itmask;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	621a      	str	r2, [r3, #32]
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b004      	add	sp, #16
 800457e:	bd80      	pop	{r7, pc}

08004580 <Button_Init>:
 * @brief  Initialize module button
 * @param  None
 * @retval None
 */
void
Button_Init(void) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af02      	add	r7, sp, #8
    // Initialize gpio
	BTNGPIO_Init();
 8004586:	f000 f9cd 	bl	8004924 <BTNGPIO_Init>

    for (uint8_t i = 0; i < BUTTON_ID_MAX; i++) {
 800458a:	1dfb      	adds	r3, r7, #7
 800458c:	2200      	movs	r2, #0
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e04b      	b.n	800462a <Button_Init+0xaa>
		kpad[i].index = i;
 8004592:	1dfb      	adds	r3, r7, #7
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	492d      	ldr	r1, [pc, #180]	; (800464c <Button_Init+0xcc>)
 8004598:	0013      	movs	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	189b      	adds	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	18cb      	adds	r3, r1, r3
 80045a2:	330a      	adds	r3, #10
 80045a4:	1dfa      	adds	r2, r7, #7
 80045a6:	7812      	ldrb	r2, [r2, #0]
 80045a8:	701a      	strb	r2, [r3, #0]
		kpad[i].mode = BUTTON_MODE_LOGIC;
 80045aa:	1dfb      	adds	r3, r7, #7
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	4927      	ldr	r1, [pc, #156]	; (800464c <Button_Init+0xcc>)
 80045b0:	0013      	movs	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	189b      	adds	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	18cb      	adds	r3, r1, r3
 80045ba:	330b      	adds	r3, #11
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]
		kpad[i].scanBtnFunc = ButtonScanTypeEdge;
 80045c0:	1dfb      	adds	r3, r7, #7
 80045c2:	781a      	ldrb	r2, [r3, #0]
 80045c4:	4921      	ldr	r1, [pc, #132]	; (800464c <Button_Init+0xcc>)
 80045c6:	0013      	movs	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	189b      	adds	r3, r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	18cb      	adds	r3, r1, r3
 80045d0:	3310      	adds	r3, #16
 80045d2:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <Button_Init+0xd0>)
 80045d4:	601a      	str	r2, [r3, #0]
		if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 80045d6:	1dfb      	adds	r3, r7, #7
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <Button_Init+0xd4>)
 80045dc:	00d2      	lsls	r2, r2, #3
 80045de:	58d0      	ldr	r0, [r2, r3]
 80045e0:	1dfb      	adds	r3, r7, #7
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <Button_Init+0xd4>)
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	18d3      	adds	r3, r2, r3
 80045ea:	3304      	adds	r3, #4
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	0019      	movs	r1, r3
 80045f0:	f7fe ff42 	bl	8003478 <GPIO_ReadInputDataBit>
 80045f4:	0003      	movs	r3, r0
 80045f6:	0019      	movs	r1, r3
 80045f8:	1dfb      	adds	r3, r7, #7
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	4a15      	ldr	r2, [pc, #84]	; (8004654 <Button_Init+0xd4>)
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	18d3      	adds	r3, r2, r3
 8004602:	3306      	adds	r3, #6
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	4299      	cmp	r1, r3
 8004608:	d10a      	bne.n	8004620 <Button_Init+0xa0>
			kpad[i].sold = PIN_ACTIVE;
 800460a:	1dfb      	adds	r3, r7, #7
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	490f      	ldr	r1, [pc, #60]	; (800464c <Button_Init+0xcc>)
 8004610:	0013      	movs	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	189b      	adds	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	18cb      	adds	r3, r1, r3
 800461a:	3309      	adds	r3, #9
 800461c:	2201      	movs	r2, #1
 800461e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < BUTTON_ID_MAX; i++) {
 8004620:	1dfb      	adds	r3, r7, #7
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	1dfb      	adds	r3, r7, #7
 8004626:	3201      	adds	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	1dfb      	adds	r3, r7, #7
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d9af      	bls.n	8004592 <Button_Init+0x12>
		}
	}

    TimerStart("", BUTTON_TIME_SCAN, TIMER_REPEAT_FOREVER, ButtonScanEventHandler, NULL);
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <Button_Init+0xd8>)
 8004634:	4809      	ldr	r0, [pc, #36]	; (800465c <Button_Init+0xdc>)
 8004636:	2200      	movs	r2, #0
 8004638:	9200      	str	r2, [sp, #0]
 800463a:	22ff      	movs	r2, #255	; 0xff
 800463c:	2105      	movs	r1, #5
 800463e:	f002 fd59 	bl	80070f4 <TimerStart>
}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b002      	add	sp, #8
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	200000d8 	.word	0x200000d8
 8004650:	08004695 	.word	0x08004695
 8004654:	20000024 	.word	0x20000024
 8004658:	080048c5 	.word	0x080048c5
 800465c:	08008e18 	.word	0x08008e18

08004660 <Button_RegisterEventCallback>:
 */
void
Button_RegisterEventCallback(
    button_event_e buttonEvent,
    button_event_callback procbuttonEvent
) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	0002      	movs	r2, r0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	1dfb      	adds	r3, r7, #7
 800466c:	701a      	strb	r2, [r3, #0]
	if ((buttonEvent < BUTTON_EVENT_MAX) && (procbuttonEvent != NULL)) {
 800466e:	1dfb      	adds	r3, r7, #7
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d808      	bhi.n	8004688 <Button_RegisterEventCallback+0x28>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <Button_RegisterEventCallback+0x28>
        pEventCallbacks[buttonEvent] = procbuttonEvent;
 800467c:	1dfb      	adds	r3, r7, #7
 800467e:	781a      	ldrb	r2, [r3, #0]
 8004680:	4b03      	ldr	r3, [pc, #12]	; (8004690 <Button_RegisterEventCallback+0x30>)
 8004682:	0092      	lsls	r2, r2, #2
 8004684:	6839      	ldr	r1, [r7, #0]
 8004686:	50d1      	str	r1, [r2, r3]
	}
}
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	b002      	add	sp, #8
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000114 	.word	0x20000114

08004694 <ButtonScanTypeEdge>:
 * @retval None
 */
void
ButtonScanTypeEdge(
    void *arg
) {
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	buttondat_p bt = (buttondat_p)arg;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60fb      	str	r3, [r7, #12]
    uint8_t i = bt->index;
 80046a0:	240b      	movs	r4, #11
 80046a2:	193b      	adds	r3, r7, r4
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	7a92      	ldrb	r2, [r2, #10]
 80046a8:	701a      	strb	r2, [r3, #0]
    
    if (bt->mode != BUTTON_MODE_IDLE)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	7adb      	ldrb	r3, [r3, #11]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d100      	bne.n	80046b4 <ButtonScanTypeEdge+0x20>
 80046b2:	e0fe      	b.n	80048b2 <ButtonScanTypeEdge+0x21e>
    {
		if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 80046b4:	193b      	adds	r3, r7, r4
 80046b6:	781a      	ldrb	r2, [r3, #0]
 80046b8:	4b80      	ldr	r3, [pc, #512]	; (80048bc <ButtonScanTypeEdge+0x228>)
 80046ba:	00d2      	lsls	r2, r2, #3
 80046bc:	58d0      	ldr	r0, [r2, r3]
 80046be:	193b      	adds	r3, r7, r4
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	4a7e      	ldr	r2, [pc, #504]	; (80048bc <ButtonScanTypeEdge+0x228>)
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	18d3      	adds	r3, r2, r3
 80046c8:	3304      	adds	r3, #4
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	0019      	movs	r1, r3
 80046ce:	f7fe fed3 	bl	8003478 <GPIO_ReadInputDataBit>
 80046d2:	0003      	movs	r3, r0
 80046d4:	0019      	movs	r1, r3
 80046d6:	193b      	adds	r3, r7, r4
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	4a78      	ldr	r2, [pc, #480]	; (80048bc <ButtonScanTypeEdge+0x228>)
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	18d3      	adds	r3, r2, r3
 80046e0:	3306      	adds	r3, #6
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	4299      	cmp	r1, r3
 80046e6:	d10a      	bne.n	80046fe <ButtonScanTypeEdge+0x6a>
			if (bt->countActive != 0xFFU) {
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	7b5b      	ldrb	r3, [r3, #13]
 80046ec:	2bff      	cmp	r3, #255	; 0xff
 80046ee:	d013      	beq.n	8004718 <ButtonScanTypeEdge+0x84>
				bt->countActive++;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	7b5b      	ldrb	r3, [r3, #13]
 80046f4:	3301      	adds	r3, #1
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	735a      	strb	r2, [r3, #13]
 80046fc:	e00c      	b.n	8004718 <ButtonScanTypeEdge+0x84>
			}
		}
		else {
			if (bt->countInactive != 0xFFU) {
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	7b1b      	ldrb	r3, [r3, #12]
 8004702:	2bff      	cmp	r3, #255	; 0xff
 8004704:	d005      	beq.n	8004712 <ButtonScanTypeEdge+0x7e>
				bt->countInactive++;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	7b1b      	ldrb	r3, [r3, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	b2da      	uxtb	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	731a      	strb	r2, [r3, #12]
			}

			bt->countActive = 0;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	735a      	strb	r2, [r3, #13]
		}

		if (bt->countInactive >= TIMECNT_UNACTPRESS) {
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	7b1b      	ldrb	r3, [r3, #12]
 800471c:	2b09      	cmp	r3, #9
 800471e:	d95e      	bls.n	80047de <ButtonScanTypeEdge+0x14a>
			if (bt->sold == PIN_ACTIVE) {
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	7a5b      	ldrb	r3, [r3, #9]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d11a      	bne.n	800475e <ButtonScanTypeEdge+0xca>
				bt->sold = PIN_UNACTIVE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	725a      	strb	r2, [r3, #9]

				if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_MODE_EDGE)) {
 800472e:	4b64      	ldr	r3, [pc, #400]	; (80048c0 <ButtonScanTypeEdge+0x22c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <ButtonScanTypeEdge+0xbe>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	7adb      	ldrb	r3, [r3, #11]
 800473a:	001a      	movs	r2, r3
 800473c:	2302      	movs	r3, #2
 800473e:	4013      	ands	r3, r2
 8004740:	d007      	beq.n	8004752 <ButtonScanTypeEdge+0xbe>
					pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_FALLING);
 8004742:	4b5f      	ldr	r3, [pc, #380]	; (80048c0 <ButtonScanTypeEdge+0x22c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	220b      	movs	r2, #11
 8004748:	18ba      	adds	r2, r7, r2
 800474a:	7812      	ldrb	r2, [r2, #0]
 800474c:	2101      	movs	r1, #1
 800474e:	0010      	movs	r0, r2
 8004750:	4798      	blx	r3
				}

				bt->time = bt->countInactive;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	7b1b      	ldrb	r3, [r3, #12]
 8004756:	001a      	movs	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	e03f      	b.n	80047de <ButtonScanTypeEdge+0x14a>
			} else {
				bt->time++;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	601a      	str	r2, [r3, #0]
				if (bt->time >= TIMECNT_BW2PRESS) {
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b4f      	cmp	r3, #79	; 0x4f
 800476e:	d936      	bls.n	80047de <ButtonScanTypeEdge+0x14a>
					if (bt->holdCnt != 0) {
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d014      	beq.n	80047a2 <ButtonScanTypeEdge+0x10e>
						if ((pEventCallbacks[BUTTON_EVENT_RELEASE] != NULL) && (bt->mode & BUTTON_MODE_LOGIC)) {
 8004778:	4b51      	ldr	r3, [pc, #324]	; (80048c0 <ButtonScanTypeEdge+0x22c>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d028      	beq.n	80047d2 <ButtonScanTypeEdge+0x13e>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	7adb      	ldrb	r3, [r3, #11]
 8004784:	001a      	movs	r2, r3
 8004786:	2301      	movs	r3, #1
 8004788:	4013      	ands	r3, r2
 800478a:	d022      	beq.n	80047d2 <ButtonScanTypeEdge+0x13e>
							pEventCallbacks[BUTTON_EVENT_RELEASE](i, bt->holdCnt);
 800478c:	4b4c      	ldr	r3, [pc, #304]	; (80048c0 <ButtonScanTypeEdge+0x22c>)
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	b299      	uxth	r1, r3
 8004796:	230b      	movs	r3, #11
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	0018      	movs	r0, r3
 800479e:	4790      	blx	r2
 80047a0:	e017      	b.n	80047d2 <ButtonScanTypeEdge+0x13e>
						}
					}
					else if ((pEventCallbacks[BUTTON_EVENT_PRESS] != NULL) && (bt->mode & BUTTON_MODE_LOGIC) \
 80047a2:	4b47      	ldr	r3, [pc, #284]	; (80048c0 <ButtonScanTypeEdge+0x22c>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d013      	beq.n	80047d2 <ButtonScanTypeEdge+0x13e>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	7adb      	ldrb	r3, [r3, #11]
 80047ae:	001a      	movs	r2, r3
 80047b0:	2301      	movs	r3, #1
 80047b2:	4013      	ands	r3, r2
 80047b4:	d00d      	beq.n	80047d2 <ButtonScanTypeEdge+0x13e>
							 && bt->pressCnt != 0)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	7a1b      	ldrb	r3, [r3, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <ButtonScanTypeEdge+0x13e>
					{
						pEventCallbacks[BUTTON_EVENT_PRESS](i, bt->pressCnt);
 80047be:	4b40      	ldr	r3, [pc, #256]	; (80048c0 <ButtonScanTypeEdge+0x22c>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	7a12      	ldrb	r2, [r2, #8]
 80047c6:	b291      	uxth	r1, r2
 80047c8:	220b      	movs	r2, #11
 80047ca:	18ba      	adds	r2, r7, r2
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	0010      	movs	r0, r2
 80047d0:	4798      	blx	r3
					}

					bt->holdCnt = 0;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	605a      	str	r2, [r3, #4]
					bt->pressCnt = 0;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	721a      	strb	r2, [r3, #8]
				}
			}
		}

		if (bt->countActive >= TIMECNT_ACTPRESS) {
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	7b5b      	ldrb	r3, [r3, #13]
 80047e2:	2b09      	cmp	r3, #9
 80047e4:	d965      	bls.n	80048b2 <ButtonScanTypeEdge+0x21e>
			/* reset count inactive */
			bt->countInactive = 0;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	731a      	strb	r2, [r3, #12]

			if (bt->sold == PIN_UNACTIVE) {
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	7a5b      	ldrb	r3, [r3, #9]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d120      	bne.n	8004836 <ButtonScanTypeEdge+0x1a2>
				bt->sold = PIN_ACTIVE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	725a      	strb	r2, [r3, #9]

				if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_MODE_EDGE)) {
 80047fa:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <ButtonScanTypeEdge+0x22c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00d      	beq.n	800481e <ButtonScanTypeEdge+0x18a>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	7adb      	ldrb	r3, [r3, #11]
 8004806:	001a      	movs	r2, r3
 8004808:	2302      	movs	r3, #2
 800480a:	4013      	ands	r3, r2
 800480c:	d007      	beq.n	800481e <ButtonScanTypeEdge+0x18a>
					pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_RISING);
 800480e:	4b2c      	ldr	r3, [pc, #176]	; (80048c0 <ButtonScanTypeEdge+0x22c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	220b      	movs	r2, #11
 8004814:	18ba      	adds	r2, r7, r2
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	2100      	movs	r1, #0
 800481a:	0010      	movs	r0, r2
 800481c:	4798      	blx	r3
				}

				bt->time = bt->countActive;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	7b5b      	ldrb	r3, [r3, #13]
 8004822:	001a      	movs	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	601a      	str	r2, [r3, #0]
				bt->pressCnt++;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	7a1b      	ldrb	r3, [r3, #8]
 800482c:	3301      	adds	r3, #1
 800482e:	b2da      	uxtb	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	721a      	strb	r2, [r3, #8]
					}
				}
			}
		}
    }
}
 8004834:	e03d      	b.n	80048b2 <ButtonScanTypeEdge+0x21e>
				bt->time++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	601a      	str	r2, [r3, #0]
				if (bt->time >= TIMECNT_IS_HOLD) {
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b77      	cmp	r3, #119	; 0x77
 8004846:	d934      	bls.n	80048b2 <ButtonScanTypeEdge+0x21e>
					bt->pressCnt = 0;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	721a      	strb	r2, [r3, #8]
					bt->holdCnt = bt->time;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	605a      	str	r2, [r3, #4]
					if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b78      	cmp	r3, #120	; 0x78
 800485c:	d015      	beq.n	800488a <ButtonScanTypeEdge+0x1f6>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2bc8      	cmp	r3, #200	; 0xc8
 8004864:	d011      	beq.n	800488a <ButtonScanTypeEdge+0x1f6>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	2396      	movs	r3, #150	; 0x96
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	429a      	cmp	r2, r3
 8004870:	d00b      	beq.n	800488a <ButtonScanTypeEdge+0x1f6>
						(bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685a      	ldr	r2, [r3, #4]
					if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8004876:	23fa      	movs	r3, #250	; 0xfa
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	429a      	cmp	r2, r3
 800487c:	d005      	beq.n	800488a <ButtonScanTypeEdge+0x1f6>
						(bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	23fa      	movs	r3, #250	; 0xfa
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	429a      	cmp	r2, r3
 8004888:	d113      	bne.n	80048b2 <ButtonScanTypeEdge+0x21e>
						if (pEventCallbacks[BUTTON_EVENT_HOLD] != NULL && (bt->mode & BUTTON_MODE_LOGIC)) {
 800488a:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <ButtonScanTypeEdge+0x22c>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00f      	beq.n	80048b2 <ButtonScanTypeEdge+0x21e>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	7adb      	ldrb	r3, [r3, #11]
 8004896:	001a      	movs	r2, r3
 8004898:	2301      	movs	r3, #1
 800489a:	4013      	ands	r3, r2
 800489c:	d009      	beq.n	80048b2 <ButtonScanTypeEdge+0x21e>
							pEventCallbacks[BUTTON_EVENT_HOLD](i, bt->holdCnt);
 800489e:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <ButtonScanTypeEdge+0x22c>)
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	b299      	uxth	r1, r3
 80048a8:	230b      	movs	r3, #11
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	0018      	movs	r0, r3
 80048b0:	4790      	blx	r2
}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b005      	add	sp, #20
 80048b8:	bd90      	pop	{r4, r7, pc}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	20000024 	.word	0x20000024
 80048c0:	20000114 	.word	0x20000114

080048c4 <ButtonScanEventHandler>:
 * @retval None
 */
void
ButtonScanEventHandler(
    void *arg
) {
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < BUTTON_ID_MAX; i++) {
 80048cc:	230f      	movs	r3, #15
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	e01a      	b.n	800490c <ButtonScanEventHandler+0x48>
        kpad[i].scanBtnFunc(&kpad[i]);
 80048d6:	200f      	movs	r0, #15
 80048d8:	183b      	adds	r3, r7, r0
 80048da:	781a      	ldrb	r2, [r3, #0]
 80048dc:	4910      	ldr	r1, [pc, #64]	; (8004920 <ButtonScanEventHandler+0x5c>)
 80048de:	0013      	movs	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	189b      	adds	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	18cb      	adds	r3, r1, r3
 80048e8:	3310      	adds	r3, #16
 80048ea:	6819      	ldr	r1, [r3, #0]
 80048ec:	0004      	movs	r4, r0
 80048ee:	183b      	adds	r3, r7, r0
 80048f0:	781a      	ldrb	r2, [r3, #0]
 80048f2:	0013      	movs	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4a09      	ldr	r2, [pc, #36]	; (8004920 <ButtonScanEventHandler+0x5c>)
 80048fc:	189b      	adds	r3, r3, r2
 80048fe:	0018      	movs	r0, r3
 8004900:	4788      	blx	r1
    for (uint8_t i = 0; i < BUTTON_ID_MAX; i++) {
 8004902:	193b      	adds	r3, r7, r4
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	193b      	adds	r3, r7, r4
 8004908:	3201      	adds	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	230f      	movs	r3, #15
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d9df      	bls.n	80048d6 <ButtonScanEventHandler+0x12>
    }
}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b005      	add	sp, #20
 800491e:	bd90      	pop	{r4, r7, pc}
 8004920:	200000d8 	.word	0x200000d8

08004924 <BTNGPIO_Init>:
 * @brief  Initializes module button
 * @param  None
 * @retval None
 */
static void BTNGPIO_Init(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	029b      	lsls	r3, r3, #10
 800492e:	2101      	movs	r1, #1
 8004930:	0018      	movs	r0, r3
 8004932:	f7ff f807 	bl	8003944 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8004936:	2380      	movs	r3, #128	; 0x80
 8004938:	03db      	lsls	r3, r3, #15
 800493a:	2101      	movs	r1, #1
 800493c:	0018      	movs	r0, r3
 800493e:	f7ff f801 	bl	8003944 <RCC_AHBPeriphClockCmd>

	/* GPIOA Configuration: Channel 1 and 3 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8004942:	003b      	movs	r3, r7
 8004944:	2200      	movs	r2, #0
 8004946:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004948:	003b      	movs	r3, r7
 800494a:	2203      	movs	r2, #3
 800494c:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800494e:	003b      	movs	r3, r7
 8004950:	2201      	movs	r2, #1
 8004952:	71da      	strb	r2, [r3, #7]

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8004954:	003b      	movs	r3, r7
 8004956:	2280      	movs	r2, #128	; 0x80
 8004958:	0212      	lsls	r2, r2, #8
 800495a:	601a      	str	r2, [r3, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800495c:	003a      	movs	r2, r7
 800495e:	2390      	movs	r3, #144	; 0x90
 8004960:	05db      	lsls	r3, r3, #23
 8004962:	0011      	movs	r1, r2
 8004964:	0018      	movs	r0, r3
 8004966:	f7fe fcf3 	bl	8003350 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 800496a:	003b      	movs	r3, r7
 800496c:	22c0      	movs	r2, #192	; 0xc0
 800496e:	601a      	str	r2, [r3, #0]
	GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004970:	003b      	movs	r3, r7
 8004972:	4a04      	ldr	r2, [pc, #16]	; (8004984 <BTNGPIO_Init+0x60>)
 8004974:	0019      	movs	r1, r3
 8004976:	0010      	movs	r0, r2
 8004978:	f7fe fcea 	bl	8003350 <GPIO_Init>
}
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b002      	add	sp, #8
 8004982:	bd80      	pop	{r7, pc}
 8004984:	48001400 	.word	0x48001400

08004988 <EventButton_Init>:
 * @brief  Initialize events of button
 * @param  pFuncAppProcEvent: funtion callback
 * @retval None
 */
void
EventButton_Init(void) {
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
    /* Init callback functions */
	Button_RegisterEventCallback(BUTTON_EVENT_EDGE, ButtonProcessEventEdge);
 800498c:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <EventButton_Init+0x38>)
 800498e:	0019      	movs	r1, r3
 8004990:	2000      	movs	r0, #0
 8004992:	f7ff fe65 	bl	8004660 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_PRESS, ButtonProcessEventPress);
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <EventButton_Init+0x3c>)
 8004998:	0019      	movs	r1, r3
 800499a:	2001      	movs	r0, #1
 800499c:	f7ff fe60 	bl	8004660 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_HOLD, ButtonProcessEventHold);
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <EventButton_Init+0x40>)
 80049a2:	0019      	movs	r1, r3
 80049a4:	2002      	movs	r0, #2
 80049a6:	f7ff fe5b 	bl	8004660 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_RELEASE, ButtonProcessEventRelease);
 80049aa:	4b08      	ldr	r3, [pc, #32]	; (80049cc <EventButton_Init+0x44>)
 80049ac:	0019      	movs	r1, r3
 80049ae:	2003      	movs	r0, #3
 80049b0:	f7ff fe56 	bl	8004660 <Button_RegisterEventCallback>

    Button_Init();
 80049b4:	f7ff fde4 	bl	8004580 <Button_Init>
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	08004a17 	.word	0x08004a17
 80049c8:	08004aab 	.word	0x08004aab
 80049cc:	08004b35 	.word	0x08004b35

080049d0 <ButtonProcessEventEdge>:
 */
static void 
ButtonProcessEventEdge(
    uint8_t btnID,
    uint16_t edge
) {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	0002      	movs	r2, r0
 80049d8:	1dfb      	adds	r3, r7, #7
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	1d3b      	adds	r3, r7, #4
 80049de:	1c0a      	adds	r2, r1, #0
 80049e0:	801a      	strh	r2, [r3, #0]
	uint8_t event;

    if (edge == BUTTON_EDGE_RISING)
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d105      	bne.n	80049f6 <ButtonProcessEventEdge+0x26>
    {
    	event = EVENT_OF_BUTTON_BACK_PRESS_EDGE_RISING + btnID;
 80049ea:	230f      	movs	r3, #15
 80049ec:	18fb      	adds	r3, r7, r3
 80049ee:	1dfa      	adds	r2, r7, #7
 80049f0:	7812      	ldrb	r2, [r2, #0]
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	e005      	b.n	8004a02 <ButtonProcessEventEdge+0x32>
    }
    else /* (edge == BUTTON_EDGE_FAILING) */
    {
    	event = EVENT_OF_BUTTON_BACK_PRESS_EDGE_FALLING + btnID;
 80049f6:	230f      	movs	r3, #15
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	1dfa      	adds	r2, r7, #7
 80049fc:	7812      	ldrb	r2, [r2, #0]
 80049fe:	3203      	adds	r2, #3
 8004a00:	701a      	strb	r2, [r3, #0]
    }

    EventSchedulerAdd(event);
 8004a02:	230f      	movs	r3, #15
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f002 fa85 	bl	8006f18 <EventSchedulerAdd>
}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b004      	add	sp, #16
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <ButtonProcessEventPress>:
 */
static void 
ButtonProcessEventPress(
    uint8_t btnID,
    uint16_t times
) {
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	0002      	movs	r2, r0
 8004a1e:	1dfb      	adds	r3, r7, #7
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	1d3b      	adds	r3, r7, #4
 8004a24:	1c0a      	adds	r2, r1, #0
 8004a26:	801a      	strh	r2, [r3, #0]
	uint8_t event;

	if (times == 1)
 8004a28:	1d3b      	adds	r3, r7, #4
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d106      	bne.n	8004a3e <ButtonProcessEventPress+0x28>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_LOGIC + btnID;
 8004a30:	230f      	movs	r3, #15
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	1dfa      	adds	r2, r7, #7
 8004a36:	7812      	ldrb	r2, [r2, #0]
 8004a38:	3206      	adds	r2, #6
 8004a3a:	701a      	strb	r2, [r3, #0]
 8004a3c:	e02a      	b.n	8004a94 <ButtonProcessEventPress+0x7e>
	}
	else if (times == 2)
 8004a3e:	1d3b      	adds	r3, r7, #4
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d106      	bne.n	8004a54 <ButtonProcessEventPress+0x3e>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_2_TIMES + btnID;
 8004a46:	230f      	movs	r3, #15
 8004a48:	18fb      	adds	r3, r7, r3
 8004a4a:	1dfa      	adds	r2, r7, #7
 8004a4c:	7812      	ldrb	r2, [r2, #0]
 8004a4e:	3209      	adds	r2, #9
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	e01f      	b.n	8004a94 <ButtonProcessEventPress+0x7e>
	}
	else if (times == 3)
 8004a54:	1d3b      	adds	r3, r7, #4
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d106      	bne.n	8004a6a <ButtonProcessEventPress+0x54>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_3_TIMES + btnID;
 8004a5c:	230f      	movs	r3, #15
 8004a5e:	18fb      	adds	r3, r7, r3
 8004a60:	1dfa      	adds	r2, r7, #7
 8004a62:	7812      	ldrb	r2, [r2, #0]
 8004a64:	320c      	adds	r2, #12
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e014      	b.n	8004a94 <ButtonProcessEventPress+0x7e>
	}
	else if (times == 4)
 8004a6a:	1d3b      	adds	r3, r7, #4
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d106      	bne.n	8004a80 <ButtonProcessEventPress+0x6a>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_4_TIMES + btnID;
 8004a72:	230f      	movs	r3, #15
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	1dfa      	adds	r2, r7, #7
 8004a78:	7812      	ldrb	r2, [r2, #0]
 8004a7a:	320f      	adds	r2, #15
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	e009      	b.n	8004a94 <ButtonProcessEventPress+0x7e>
	}
	else if (times == 5)
 8004a80:	1d3b      	adds	r3, r7, #4
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d10c      	bne.n	8004aa2 <ButtonProcessEventPress+0x8c>
	{
		event = EVENT_OF_BUTTON_BACK_PRESS_5_TIMES + btnID;
 8004a88:	230f      	movs	r3, #15
 8004a8a:	18fb      	adds	r3, r7, r3
 8004a8c:	1dfa      	adds	r2, r7, #7
 8004a8e:	7812      	ldrb	r2, [r2, #0]
 8004a90:	3212      	adds	r2, #18
 8004a92:	701a      	strb	r2, [r3, #0]
	}
	else return;

    EventSchedulerAdd(event);
 8004a94:	230f      	movs	r3, #15
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f002 fa3c 	bl	8006f18 <EventSchedulerAdd>
 8004aa0:	e000      	b.n	8004aa4 <ButtonProcessEventPress+0x8e>
	else return;
 8004aa2:	46c0      	nop			; (mov r8, r8)
}
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b004      	add	sp, #16
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <ButtonProcessEventHold>:
 */
static void 
ButtonProcessEventHold(
    uint8_t btnID,
    uint16_t time
) {
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	0002      	movs	r2, r0
 8004ab2:	1dfb      	adds	r3, r7, #7
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	1d3b      	adds	r3, r7, #4
 8004ab8:	1c0a      	adds	r2, r1, #0
 8004aba:	801a      	strh	r2, [r3, #0]
	uint8_t event;

	if (time == TIMECNT_HOLD10S)
 8004abc:	1d3b      	adds	r3, r7, #4
 8004abe:	881a      	ldrh	r2, [r3, #0]
 8004ac0:	23fa      	movs	r3, #250	; 0xfa
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d106      	bne.n	8004ad6 <ButtonProcessEventHold+0x2c>
	{
		event = EVENT_OF_BUTTON_BACK_HOLD_10S + btnID;
 8004ac8:	230f      	movs	r3, #15
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	1dfa      	adds	r2, r7, #7
 8004ace:	7812      	ldrb	r2, [r2, #0]
 8004ad0:	321e      	adds	r2, #30
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	e023      	b.n	8004b1e <ButtonProcessEventHold+0x74>
	}
	else if (time == TIMECNT_HOLD5S)
 8004ad6:	1d3b      	adds	r3, r7, #4
 8004ad8:	881a      	ldrh	r2, [r3, #0]
 8004ada:	23fa      	movs	r3, #250	; 0xfa
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d106      	bne.n	8004af0 <ButtonProcessEventHold+0x46>
	{
		event = EVENT_OF_BUTTON_BACK_HOLD_5S + btnID;
 8004ae2:	230f      	movs	r3, #15
 8004ae4:	18fb      	adds	r3, r7, r3
 8004ae6:	1dfa      	adds	r2, r7, #7
 8004ae8:	7812      	ldrb	r2, [r2, #0]
 8004aea:	321b      	adds	r2, #27
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e016      	b.n	8004b1e <ButtonProcessEventHold+0x74>
	}
	else if (time == TIMECNT_HOLD3S)
 8004af0:	1d3b      	adds	r3, r7, #4
 8004af2:	881a      	ldrh	r2, [r3, #0]
 8004af4:	2396      	movs	r3, #150	; 0x96
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d106      	bne.n	8004b0a <ButtonProcessEventHold+0x60>
	{
		event = EVENT_OF_BUTTON_BACK_HOLD_3S + btnID;
 8004afc:	230f      	movs	r3, #15
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	1dfa      	adds	r2, r7, #7
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	3218      	adds	r2, #24
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	e009      	b.n	8004b1e <ButtonProcessEventHold+0x74>
	}
	else if (time == TIMECNT_HOLD1S)
 8004b0a:	1d3b      	adds	r3, r7, #4
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	2bc8      	cmp	r3, #200	; 0xc8
 8004b10:	d10c      	bne.n	8004b2c <ButtonProcessEventHold+0x82>
	{
		event = EVENT_OF_BUTTON_BACK_HOLD_1S + btnID;
 8004b12:	230f      	movs	r3, #15
 8004b14:	18fb      	adds	r3, r7, r3
 8004b16:	1dfa      	adds	r2, r7, #7
 8004b18:	7812      	ldrb	r2, [r2, #0]
 8004b1a:	3215      	adds	r2, #21
 8004b1c:	701a      	strb	r2, [r3, #0]
	}
	else return;

	EventSchedulerAdd(event);
 8004b1e:	230f      	movs	r3, #15
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f002 f9f7 	bl	8006f18 <EventSchedulerAdd>
 8004b2a:	e000      	b.n	8004b2e <ButtonProcessEventHold+0x84>
	else return;
 8004b2c:	46c0      	nop			; (mov r8, r8)
}
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b004      	add	sp, #16
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <ButtonProcessEventRelease>:
 */
static void 
ButtonProcessEventRelease(
    uint8_t btnID,
    uint16_t time
) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	0002      	movs	r2, r0
 8004b3c:	1dfb      	adds	r3, r7, #7
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	1c0a      	adds	r2, r1, #0
 8004b44:	801a      	strh	r2, [r3, #0]
	uint8_t event;

	if (time >= TIMECNT_HOLD10S)
 8004b46:	1d3b      	adds	r3, r7, #4
 8004b48:	881a      	ldrh	r2, [r3, #0]
 8004b4a:	23fa      	movs	r3, #250	; 0xfa
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d306      	bcc.n	8004b60 <ButtonProcessEventRelease+0x2c>
	{
		event = EVENT_OF_BUTTON_BACK_RELEASED_10S + btnID;
 8004b52:	230f      	movs	r3, #15
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	1dfa      	adds	r2, r7, #7
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	322a      	adds	r2, #42	; 0x2a
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	e023      	b.n	8004ba8 <ButtonProcessEventRelease+0x74>
	}
	else if (time >= TIMECNT_HOLD5S)
 8004b60:	1d3b      	adds	r3, r7, #4
 8004b62:	881a      	ldrh	r2, [r3, #0]
 8004b64:	23fa      	movs	r3, #250	; 0xfa
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d306      	bcc.n	8004b7a <ButtonProcessEventRelease+0x46>
	{
		event = EVENT_OF_BUTTON_BACK_RELEASED_5S + btnID;
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	1dfa      	adds	r2, r7, #7
 8004b72:	7812      	ldrb	r2, [r2, #0]
 8004b74:	3227      	adds	r2, #39	; 0x27
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	e016      	b.n	8004ba8 <ButtonProcessEventRelease+0x74>
	}
	else if (time >= TIMECNT_HOLD3S)
 8004b7a:	1d3b      	adds	r3, r7, #4
 8004b7c:	881a      	ldrh	r2, [r3, #0]
 8004b7e:	2396      	movs	r3, #150	; 0x96
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d306      	bcc.n	8004b94 <ButtonProcessEventRelease+0x60>
	{
		event = EVENT_OF_BUTTON_BACK_RELEASED_3S + btnID;
 8004b86:	230f      	movs	r3, #15
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	1dfa      	adds	r2, r7, #7
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	3224      	adds	r2, #36	; 0x24
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e009      	b.n	8004ba8 <ButtonProcessEventRelease+0x74>
	}
	else if (time >= TIMECNT_HOLD1S)
 8004b94:	1d3b      	adds	r3, r7, #4
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	2bc7      	cmp	r3, #199	; 0xc7
 8004b9a:	d90c      	bls.n	8004bb6 <ButtonProcessEventRelease+0x82>
	{
		event = EVENT_OF_BUTTON_BACK_RELEASED_1S + btnID;
 8004b9c:	230f      	movs	r3, #15
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	1dfa      	adds	r2, r7, #7
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	3221      	adds	r2, #33	; 0x21
 8004ba6:	701a      	strb	r2, [r3, #0]
	}
	else return;

	EventSchedulerAdd(event);
 8004ba8:	230f      	movs	r3, #15
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f002 f9b2 	bl	8006f18 <EventSchedulerAdd>
 8004bb4:	e000      	b.n	8004bb8 <ButtonProcessEventRelease+0x84>
	else return;
 8004bb6:	46c0      	nop			; (mov r8, r8)
}
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b004      	add	sp, #16
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <BuzzerControl_Init>:
 * @brief  Initialize module buzzer
 * @param  None
 * @retval None
 */
void
BuzzerControl_Init(void) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
	BUZZTIM_InitTimer();
 8004bc4:	f000 f80a 	bl	8004bdc <BUZZTIM_InitTimer>
	BUZZTIM_InitPWMChannel();
 8004bc8:	f000 f82e 	bl	8004c28 <BUZZTIM_InitPWMChannel>
	bBuzzInit = 1;
 8004bcc:	4b02      	ldr	r3, [pc, #8]	; (8004bd8 <BuzzerControl_Init+0x18>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000124 	.word	0x20000124

08004bdc <BUZZTIM_InitTimer>:
 * @param  [prescale]
 *         [period]
 * @retval None
 */
static void
BUZZTIM_InitTimer(void) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef TimeBaseStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	2101      	movs	r1, #1
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7fe fecb 	bl	8003984 <RCC_APB2PeriphClockCmd>

	/* Time base configuration */
    TimeBaseStructure.TIM_Prescaler = BUZZ_TIMER_PRESCALE - 1;
 8004bee:	1d3b      	adds	r3, r7, #4
 8004bf0:	222f      	movs	r2, #47	; 0x2f
 8004bf2:	801a      	strh	r2, [r3, #0]
    TimeBaseStructure.TIM_Period = BUZZ_TIMER_PERIOD - 1;
 8004bf4:	1d3b      	adds	r3, r7, #4
 8004bf6:	22c7      	movs	r2, #199	; 0xc7
 8004bf8:	605a      	str	r2, [r3, #4]
    TimeBaseStructure.TIM_ClockDivision = 0;
 8004bfa:	1d3b      	adds	r3, r7, #4
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	811a      	strh	r2, [r3, #8]
    TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8004c00:	1d3b      	adds	r3, r7, #4
 8004c02:	2200      	movs	r2, #0
 8004c04:	805a      	strh	r2, [r3, #2]
    TIM_TimeBaseInit(TIM1, &TimeBaseStructure);
 8004c06:	1d3b      	adds	r3, r7, #4
 8004c08:	4a06      	ldr	r2, [pc, #24]	; (8004c24 <BUZZTIM_InitTimer+0x48>)
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	0010      	movs	r0, r2
 8004c0e:	f7ff f837 	bl	8003c80 <TIM_TimeBaseInit>

    /* TIM1 enable counter */
    TIM_Cmd(TIM1, ENABLE);
 8004c12:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <BUZZTIM_InitTimer+0x48>)
 8004c14:	2101      	movs	r1, #1
 8004c16:	0018      	movs	r0, r3
 8004c18:	f7ff f8b0 	bl	8003d7c <TIM_Cmd>
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b004      	add	sp, #16
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40012c00 	.word	0x40012c00

08004c28 <BUZZTIM_InitPWMChannel>:
 * @brief  None
 * @param  None
 * @retval None
 */
static void
BUZZTIM_InitPWMChannel(void) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    TIM_OCInitTypeDef TIM_OCInitStructure;

    /* GPIO Peripheral clock enable */
    RCC_AHBPeriphClockCmd(BUZZER_GPIO_CLK, ENABLE);
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	029b      	lsls	r3, r3, #10
 8004c32:	2101      	movs	r1, #1
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7fe fe85 	bl	8003944 <RCC_AHBPeriphClockCmd>

    /* Configure pin in output push-pull mode */
    GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 8004c3a:	2118      	movs	r1, #24
 8004c3c:	187b      	adds	r3, r7, r1
 8004c3e:	2280      	movs	r2, #128	; 0x80
 8004c40:	0112      	lsls	r2, r2, #4
 8004c42:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004c44:	187b      	adds	r3, r7, r1
 8004c46:	2203      	movs	r2, #3
 8004c48:	715a      	strb	r2, [r3, #5]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8004c4a:	187b      	adds	r3, r7, r1
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004c50:	187b      	adds	r3, r7, r1
 8004c52:	2200      	movs	r2, #0
 8004c54:	719a      	strb	r2, [r3, #6]
    GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
 8004c56:	187a      	adds	r2, r7, r1
 8004c58:	2390      	movs	r3, #144	; 0x90
 8004c5a:	05db      	lsls	r3, r3, #23
 8004c5c:	0011      	movs	r1, r2
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7fe fb76 	bl	8003350 <GPIO_Init>

    GPIO_PinAFConfig(BUZZER_GPIO_PORT, BUZZER_GPIO_SOURCE, BUZZER_GPIO_AF);
 8004c64:	2390      	movs	r3, #144	; 0x90
 8004c66:	05db      	lsls	r3, r3, #23
 8004c68:	2202      	movs	r2, #2
 8004c6a:	210b      	movs	r1, #11
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f7fe fc44 	bl	80034fa <GPIO_PinAFConfig>

    /* Output Compare Timing Mode configuration: Channel 4 */
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; /* PWM1 Mode */
 8004c72:	1d3b      	adds	r3, r7, #4
 8004c74:	2260      	movs	r2, #96	; 0x60
 8004c76:	801a      	strh	r2, [r3, #0]
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8004c78:	1d3b      	adds	r3, r7, #4
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	805a      	strh	r2, [r3, #2]
    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8004c7e:	1d3b      	adds	r3, r7, #4
 8004c80:	2204      	movs	r2, #4
 8004c82:	809a      	strh	r2, [r3, #4]
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8004c84:	1d3b      	adds	r3, r7, #4
 8004c86:	2200      	movs	r2, #0
 8004c88:	819a      	strh	r2, [r3, #12]
    TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
 8004c8a:	1d3b      	adds	r3, r7, #4
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	81da      	strh	r2, [r3, #14]
    TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	2280      	movs	r2, #128	; 0x80
 8004c94:	0052      	lsls	r2, r2, #1
 8004c96:	821a      	strh	r2, [r3, #16]
    TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8004c98:	1d3b      	adds	r3, r7, #4
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	825a      	strh	r2, [r3, #18]
    TIM_OCInitStructure.TIM_Pulse = 0;
 8004c9e:	1d3b      	adds	r3, r7, #4
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	609a      	str	r2, [r3, #8]

    TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 8004ca4:	1d3b      	adds	r3, r7, #4
 8004ca6:	4a07      	ldr	r2, [pc, #28]	; (8004cc4 <BUZZTIM_InitPWMChannel+0x9c>)
 8004ca8:	0019      	movs	r1, r3
 8004caa:	0010      	movs	r0, r2
 8004cac:	f7ff fa26 	bl	80040fc <TIM_OC4Init>

    TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <BUZZTIM_InitPWMChannel+0x9c>)
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f7ff f881 	bl	8003dbc <TIM_CtrlPWMOutputs>
}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b008      	add	sp, #32
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	40012c00 	.word	0x40012c00

08004cc8 <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowChar(uint16_t x,uint16_t y,uint16_t fc, uint16_t bc, uint8_t num,uint8_t size,uint8_t mode)
{
 8004cc8:	b5b0      	push	{r4, r5, r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	0005      	movs	r5, r0
 8004cd0:	000c      	movs	r4, r1
 8004cd2:	0010      	movs	r0, r2
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	1dbb      	adds	r3, r7, #6
 8004cd8:	1c2a      	adds	r2, r5, #0
 8004cda:	801a      	strh	r2, [r3, #0]
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	1c22      	adds	r2, r4, #0
 8004ce0:	801a      	strh	r2, [r3, #0]
 8004ce2:	1cbb      	adds	r3, r7, #2
 8004ce4:	1c02      	adds	r2, r0, #0
 8004ce6:	801a      	strh	r2, [r3, #0]
 8004ce8:	003b      	movs	r3, r7
 8004cea:	1c0a      	adds	r2, r1, #0
 8004cec:	801a      	strh	r2, [r3, #0]
    uint8_t temp;
    uint8_t pos,t;
	uint16_t colortemp=POINT_COLOR;
 8004cee:	230a      	movs	r3, #10
 8004cf0:	18fb      	adds	r3, r7, r3
 8004cf2:	4a88      	ldr	r2, [pc, #544]	; (8004f14 <LCD_ShowChar+0x24c>)
 8004cf4:	8812      	ldrh	r2, [r2, #0]
 8004cf6:	801a      	strh	r2, [r3, #0]

	num=num-' ';
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	18bb      	adds	r3, r7, r2
 8004cfc:	18ba      	adds	r2, r7, r2
 8004cfe:	7812      	ldrb	r2, [r2, #0]
 8004d00:	3a20      	subs	r2, #32
 8004d02:	701a      	strb	r2, [r3, #0]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);
 8004d04:	2124      	movs	r1, #36	; 0x24
 8004d06:	187b      	adds	r3, r7, r1
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	1dbb      	adds	r3, r7, #6
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	18d3      	adds	r3, r2, r3
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29c      	uxth	r4, r3
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	1d3b      	adds	r3, r7, #4
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	18d3      	adds	r3, r2, r3
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	1d3b      	adds	r3, r7, #4
 8004d30:	8819      	ldrh	r1, [r3, #0]
 8004d32:	1dbb      	adds	r3, r7, #6
 8004d34:	8818      	ldrh	r0, [r3, #0]
 8004d36:	0013      	movs	r3, r2
 8004d38:	0022      	movs	r2, r4
 8004d3a:	f001 f821 	bl	8005d80 <LCD_SetWindows>
	if(!mode)
 8004d3e:	2328      	movs	r3, #40	; 0x28
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d162      	bne.n	8004e0e <LCD_ShowChar+0x146>
	{
		for(pos=0;pos<size;pos++)
 8004d48:	230e      	movs	r3, #14
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	e054      	b.n	8004dfc <LCD_ShowChar+0x134>
		{
			if(size==12)temp=asc2_1206[num][pos];
 8004d52:	2324      	movs	r3, #36	; 0x24
 8004d54:	18fb      	adds	r3, r7, r3
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b0c      	cmp	r3, #12
 8004d5a:	d110      	bne.n	8004d7e <LCD_ShowChar+0xb6>
 8004d5c:	2320      	movs	r3, #32
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	781a      	ldrb	r2, [r3, #0]
 8004d62:	230e      	movs	r3, #14
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	7818      	ldrb	r0, [r3, #0]
 8004d68:	230f      	movs	r3, #15
 8004d6a:	18f9      	adds	r1, r7, r3
 8004d6c:	4c6a      	ldr	r4, [pc, #424]	; (8004f18 <LCD_ShowChar+0x250>)
 8004d6e:	0013      	movs	r3, r2
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	189b      	adds	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	18e3      	adds	r3, r4, r3
 8004d78:	5c1b      	ldrb	r3, [r3, r0]
 8004d7a:	700b      	strb	r3, [r1, #0]
 8004d7c:	e00c      	b.n	8004d98 <LCD_ShowChar+0xd0>
			else temp=asc2_1608[num][pos];
 8004d7e:	2320      	movs	r3, #32
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	7819      	ldrb	r1, [r3, #0]
 8004d84:	230e      	movs	r3, #14
 8004d86:	18fb      	adds	r3, r7, r3
 8004d88:	781a      	ldrb	r2, [r3, #0]
 8004d8a:	230f      	movs	r3, #15
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	4863      	ldr	r0, [pc, #396]	; (8004f1c <LCD_ShowChar+0x254>)
 8004d90:	0109      	lsls	r1, r1, #4
 8004d92:	1841      	adds	r1, r0, r1
 8004d94:	5c8a      	ldrb	r2, [r1, r2]
 8004d96:	701a      	strb	r2, [r3, #0]
			for(t=0;t<size/2;t++)
 8004d98:	230d      	movs	r3, #13
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	e01c      	b.n	8004ddc <LCD_ShowChar+0x114>
		    {
		        if(temp&0x01)Lcd_WriteData_16Bit(fc);
 8004da2:	230f      	movs	r3, #15
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2201      	movs	r2, #1
 8004daa:	4013      	ands	r3, r2
 8004dac:	d005      	beq.n	8004dba <LCD_ShowChar+0xf2>
 8004dae:	1cbb      	adds	r3, r7, #2
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	0018      	movs	r0, r3
 8004db4:	f000 fd88 	bl	80058c8 <Lcd_WriteData_16Bit>
 8004db8:	e004      	b.n	8004dc4 <LCD_ShowChar+0xfc>
				else Lcd_WriteData_16Bit(bc);
 8004dba:	003b      	movs	r3, r7
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f000 fd82 	bl	80058c8 <Lcd_WriteData_16Bit>
				temp>>=1;
 8004dc4:	220f      	movs	r2, #15
 8004dc6:	18bb      	adds	r3, r7, r2
 8004dc8:	18ba      	adds	r2, r7, r2
 8004dca:	7812      	ldrb	r2, [r2, #0]
 8004dcc:	0852      	lsrs	r2, r2, #1
 8004dce:	701a      	strb	r2, [r3, #0]
			for(t=0;t<size/2;t++)
 8004dd0:	210d      	movs	r1, #13
 8004dd2:	187b      	adds	r3, r7, r1
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	187b      	adds	r3, r7, r1
 8004dd8:	3201      	adds	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	2324      	movs	r3, #36	; 0x24
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	220d      	movs	r2, #13
 8004de8:	18ba      	adds	r2, r7, r2
 8004dea:	7812      	ldrb	r2, [r2, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d3d8      	bcc.n	8004da2 <LCD_ShowChar+0xda>
		for(pos=0;pos<size;pos++)
 8004df0:	210e      	movs	r1, #14
 8004df2:	187b      	adds	r3, r7, r1
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	187b      	adds	r3, r7, r1
 8004df8:	3201      	adds	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
 8004dfc:	230e      	movs	r3, #14
 8004dfe:	18fa      	adds	r2, r7, r3
 8004e00:	2324      	movs	r3, #36	; 0x24
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	7812      	ldrb	r2, [r2, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d3a2      	bcc.n	8004d52 <LCD_ShowChar+0x8a>
 8004e0c:	e06d      	b.n	8004eea <LCD_ShowChar+0x222>
		    }

		}
	}else
	{
		for(pos=0;pos<size;pos++)
 8004e0e:	230e      	movs	r3, #14
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	e060      	b.n	8004eda <LCD_ShowChar+0x212>
		{
			if(size==12)temp=asc2_1206[num][pos];
 8004e18:	2324      	movs	r3, #36	; 0x24
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b0c      	cmp	r3, #12
 8004e20:	d110      	bne.n	8004e44 <LCD_ShowChar+0x17c>
 8004e22:	2320      	movs	r3, #32
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	781a      	ldrb	r2, [r3, #0]
 8004e28:	230e      	movs	r3, #14
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	7818      	ldrb	r0, [r3, #0]
 8004e2e:	230f      	movs	r3, #15
 8004e30:	18f9      	adds	r1, r7, r3
 8004e32:	4c39      	ldr	r4, [pc, #228]	; (8004f18 <LCD_ShowChar+0x250>)
 8004e34:	0013      	movs	r3, r2
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	189b      	adds	r3, r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	18e3      	adds	r3, r4, r3
 8004e3e:	5c1b      	ldrb	r3, [r3, r0]
 8004e40:	700b      	strb	r3, [r1, #0]
 8004e42:	e00c      	b.n	8004e5e <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][pos];
 8004e44:	2320      	movs	r3, #32
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	7819      	ldrb	r1, [r3, #0]
 8004e4a:	230e      	movs	r3, #14
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	781a      	ldrb	r2, [r3, #0]
 8004e50:	230f      	movs	r3, #15
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	4831      	ldr	r0, [pc, #196]	; (8004f1c <LCD_ShowChar+0x254>)
 8004e56:	0109      	lsls	r1, r1, #4
 8004e58:	1841      	adds	r1, r0, r1
 8004e5a:	5c8a      	ldrb	r2, [r1, r2]
 8004e5c:	701a      	strb	r2, [r3, #0]
			for(t=0;t<size/2;t++)
 8004e5e:	230d      	movs	r3, #13
 8004e60:	18fb      	adds	r3, r7, r3
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e028      	b.n	8004eba <LCD_ShowChar+0x1f2>
		    {
				POINT_COLOR=fc;
 8004e68:	4b2a      	ldr	r3, [pc, #168]	; (8004f14 <LCD_ShowChar+0x24c>)
 8004e6a:	1cba      	adds	r2, r7, #2
 8004e6c:	8812      	ldrh	r2, [r2, #0]
 8004e6e:	801a      	strh	r2, [r3, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);
 8004e70:	230f      	movs	r3, #15
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2201      	movs	r2, #1
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d012      	beq.n	8004ea2 <LCD_ShowChar+0x1da>
 8004e7c:	230d      	movs	r3, #13
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	1dbb      	adds	r3, r7, #6
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	18d3      	adds	r3, r2, r3
 8004e8a:	b298      	uxth	r0, r3
 8004e8c:	230e      	movs	r3, #14
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	1d3b      	adds	r3, r7, #4
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	18d3      	adds	r3, r2, r3
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	f000 fd49 	bl	8005934 <LCD_DrawPoint>
		        temp>>=1;
 8004ea2:	220f      	movs	r2, #15
 8004ea4:	18bb      	adds	r3, r7, r2
 8004ea6:	18ba      	adds	r2, r7, r2
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	0852      	lsrs	r2, r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
			for(t=0;t<size/2;t++)
 8004eae:	210d      	movs	r1, #13
 8004eb0:	187b      	adds	r3, r7, r1
 8004eb2:	781a      	ldrb	r2, [r3, #0]
 8004eb4:	187b      	adds	r3, r7, r1
 8004eb6:	3201      	adds	r2, #1
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	2324      	movs	r3, #36	; 0x24
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	220d      	movs	r2, #13
 8004ec6:	18ba      	adds	r2, r7, r2
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d3cc      	bcc.n	8004e68 <LCD_ShowChar+0x1a0>
		for(pos=0;pos<size;pos++)
 8004ece:	210e      	movs	r1, #14
 8004ed0:	187b      	adds	r3, r7, r1
 8004ed2:	781a      	ldrb	r2, [r3, #0]
 8004ed4:	187b      	adds	r3, r7, r1
 8004ed6:	3201      	adds	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	230e      	movs	r3, #14
 8004edc:	18fa      	adds	r2, r7, r3
 8004ede:	2324      	movs	r3, #36	; 0x24
 8004ee0:	18fb      	adds	r3, r7, r3
 8004ee2:	7812      	ldrb	r2, [r2, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d396      	bcc.n	8004e18 <LCD_ShowChar+0x150>
		    }
		}
	}
	POINT_COLOR=colortemp;
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <LCD_ShowChar+0x24c>)
 8004eec:	220a      	movs	r2, #10
 8004eee:	18ba      	adds	r2, r7, r2
 8004ef0:	8812      	ldrh	r2, [r2, #0]
 8004ef2:	801a      	strh	r2, [r3, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <LCD_ShowChar+0x258>)
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <LCD_ShowChar+0x258>)
 8004efe:	885b      	ldrh	r3, [r3, #2]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2100      	movs	r1, #0
 8004f06:	2000      	movs	r0, #0
 8004f08:	f000 ff3a 	bl	8005d80 <LCD_SetWindows>
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b004      	add	sp, #16
 8004f12:	bdb0      	pop	{r4, r5, r7, pc}
 8004f14:	20000136 	.word	0x20000136
 8004f18:	08008f38 	.word	0x08008f38
 8004f1c:	080093ac 	.word	0x080093ac
 8004f20:	20000128 	.word	0x20000128

08004f24 <GUI_DrawFont16>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void GUI_DrawFont16(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *s,uint8_t mode)
{
 8004f24:	b5b0      	push	{r4, r5, r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	0005      	movs	r5, r0
 8004f2c:	000c      	movs	r4, r1
 8004f2e:	0010      	movs	r0, r2
 8004f30:	0019      	movs	r1, r3
 8004f32:	1dbb      	adds	r3, r7, #6
 8004f34:	1c2a      	adds	r2, r5, #0
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	1d3b      	adds	r3, r7, #4
 8004f3a:	1c22      	adds	r2, r4, #0
 8004f3c:	801a      	strh	r2, [r3, #0]
 8004f3e:	1cbb      	adds	r3, r7, #2
 8004f40:	1c02      	adds	r2, r0, #0
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	003b      	movs	r3, r7
 8004f46:	1c0a      	adds	r2, r1, #0
 8004f48:	801a      	strh	r2, [r3, #0]
	uint8_t i,j;
	uint16_t k;
	uint16_t HZnum;
	uint16_t x0 = x;
 8004f4a:	230a      	movs	r3, #10
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	1dba      	adds	r2, r7, #6
 8004f50:	8812      	ldrh	r2, [r2, #0]
 8004f52:	801a      	strh	r2, [r3, #0]
	HZnum = sizeof(tfont16)/sizeof(typFNT_GB16);
 8004f54:	2308      	movs	r3, #8
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	223e      	movs	r2, #62	; 0x3e
 8004f5a:	801a      	strh	r2, [r3, #0]

	for (k=0;k<HZnum;k++)
 8004f5c:	230c      	movs	r3, #12
 8004f5e:	18fb      	adds	r3, r7, r3
 8004f60:	2200      	movs	r2, #0
 8004f62:	801a      	strh	r2, [r3, #0]
 8004f64:	e0b7      	b.n	80050d6 <GUI_DrawFont16+0x1b2>
	{
	    if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 8004f66:	200c      	movs	r0, #12
 8004f68:	183b      	adds	r3, r7, r0
 8004f6a:	881a      	ldrh	r2, [r3, #0]
 8004f6c:	4966      	ldr	r1, [pc, #408]	; (8005108 <GUI_DrawFont16+0x1e4>)
 8004f6e:	0013      	movs	r3, r2
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	189b      	adds	r3, r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	5c5a      	ldrb	r2, [r3, r1]
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d000      	beq.n	8004f82 <GUI_DrawFont16+0x5e>
 8004f80:	e0a3      	b.n	80050ca <GUI_DrawFont16+0x1a6>
 8004f82:	183b      	adds	r3, r7, r0
 8004f84:	881a      	ldrh	r2, [r3, #0]
 8004f86:	4960      	ldr	r1, [pc, #384]	; (8005108 <GUI_DrawFont16+0x1e4>)
 8004f88:	0013      	movs	r3, r2
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	189b      	adds	r3, r3, r2
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	18cb      	adds	r3, r1, r3
 8004f92:	3301      	adds	r3, #1
 8004f94:	781a      	ldrb	r2, [r3, #0]
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d000      	beq.n	8004fa2 <GUI_DrawFont16+0x7e>
 8004fa0:	e093      	b.n	80050ca <GUI_DrawFont16+0x1a6>
	    {
	    	LCD_SetWindows(x,y,x+16-1,y+16-1);
 8004fa2:	1dbb      	adds	r3, r7, #6
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	330f      	adds	r3, #15
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	1d3b      	adds	r3, r7, #4
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	330f      	adds	r3, #15
 8004fb0:	b29c      	uxth	r4, r3
 8004fb2:	1d3b      	adds	r3, r7, #4
 8004fb4:	8819      	ldrh	r1, [r3, #0]
 8004fb6:	1dbb      	adds	r3, r7, #6
 8004fb8:	8818      	ldrh	r0, [r3, #0]
 8004fba:	0023      	movs	r3, r4
 8004fbc:	f000 fee0 	bl	8005d80 <LCD_SetWindows>
		    for(i=0;i<16*2;i++)
 8004fc0:	230f      	movs	r3, #15
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	e079      	b.n	80050be <GUI_DrawFont16+0x19a>
		    {
				for(j=0;j<8;j++)
 8004fca:	230e      	movs	r3, #14
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e069      	b.n	80050a8 <GUI_DrawFont16+0x184>
		    	{
					if(!mode)
 8004fd4:	2324      	movs	r3, #36	; 0x24
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d123      	bne.n	8005026 <GUI_DrawFont16+0x102>
					{
						if(tfont16[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8004fde:	230c      	movs	r3, #12
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	881a      	ldrh	r2, [r3, #0]
 8004fe4:	230f      	movs	r3, #15
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	7819      	ldrb	r1, [r3, #0]
 8004fea:	4847      	ldr	r0, [pc, #284]	; (8005108 <GUI_DrawFont16+0x1e4>)
 8004fec:	0013      	movs	r3, r2
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	189b      	adds	r3, r3, r2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	18c3      	adds	r3, r0, r3
 8004ff6:	185b      	adds	r3, r3, r1
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	0019      	movs	r1, r3
 8004ffe:	230e      	movs	r3, #14
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2280      	movs	r2, #128	; 0x80
 8005006:	411a      	asrs	r2, r3
 8005008:	0013      	movs	r3, r2
 800500a:	400b      	ands	r3, r1
 800500c:	d005      	beq.n	800501a <GUI_DrawFont16+0xf6>
 800500e:	1cbb      	adds	r3, r7, #2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	0018      	movs	r0, r3
 8005014:	f000 fc58 	bl	80058c8 <Lcd_WriteData_16Bit>
 8005018:	e040      	b.n	800509c <GUI_DrawFont16+0x178>
						else Lcd_WriteData_16Bit(bc);
 800501a:	003b      	movs	r3, r7
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	0018      	movs	r0, r3
 8005020:	f000 fc52 	bl	80058c8 <Lcd_WriteData_16Bit>
 8005024:	e03a      	b.n	800509c <GUI_DrawFont16+0x178>
					}
					else
					{
						POINT_COLOR=fc;
 8005026:	4b39      	ldr	r3, [pc, #228]	; (800510c <GUI_DrawFont16+0x1e8>)
 8005028:	1cba      	adds	r2, r7, #2
 800502a:	8812      	ldrh	r2, [r2, #0]
 800502c:	801a      	strh	r2, [r3, #0]
						if(tfont16[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);
 800502e:	230c      	movs	r3, #12
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	230f      	movs	r3, #15
 8005036:	18fb      	adds	r3, r7, r3
 8005038:	7819      	ldrb	r1, [r3, #0]
 800503a:	4833      	ldr	r0, [pc, #204]	; (8005108 <GUI_DrawFont16+0x1e4>)
 800503c:	0013      	movs	r3, r2
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	189b      	adds	r3, r3, r2
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	18c3      	adds	r3, r0, r3
 8005046:	185b      	adds	r3, r3, r1
 8005048:	3302      	adds	r3, #2
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	0019      	movs	r1, r3
 800504e:	230e      	movs	r3, #14
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2280      	movs	r2, #128	; 0x80
 8005056:	411a      	asrs	r2, r3
 8005058:	0013      	movs	r3, r2
 800505a:	400b      	ands	r3, r1
 800505c:	d007      	beq.n	800506e <GUI_DrawFont16+0x14a>
 800505e:	1d3b      	adds	r3, r7, #4
 8005060:	881a      	ldrh	r2, [r3, #0]
 8005062:	1dbb      	adds	r3, r7, #6
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	0011      	movs	r1, r2
 8005068:	0018      	movs	r0, r3
 800506a:	f000 fc63 	bl	8005934 <LCD_DrawPoint>
						x++;
 800506e:	1dbb      	adds	r3, r7, #6
 8005070:	881a      	ldrh	r2, [r3, #0]
 8005072:	1dbb      	adds	r3, r7, #6
 8005074:	3201      	adds	r2, #1
 8005076:	801a      	strh	r2, [r3, #0]
						if((x-x0)==16)
 8005078:	1dbb      	adds	r3, r7, #6
 800507a:	881a      	ldrh	r2, [r3, #0]
 800507c:	210a      	movs	r1, #10
 800507e:	187b      	adds	r3, r7, r1
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b10      	cmp	r3, #16
 8005086:	d109      	bne.n	800509c <GUI_DrawFont16+0x178>
						{
							x=x0;
 8005088:	1dbb      	adds	r3, r7, #6
 800508a:	187a      	adds	r2, r7, r1
 800508c:	8812      	ldrh	r2, [r2, #0]
 800508e:	801a      	strh	r2, [r3, #0]
							y++;
 8005090:	1d3b      	adds	r3, r7, #4
 8005092:	881a      	ldrh	r2, [r3, #0]
 8005094:	1d3b      	adds	r3, r7, #4
 8005096:	3201      	adds	r2, #1
 8005098:	801a      	strh	r2, [r3, #0]
							break;
 800509a:	e00a      	b.n	80050b2 <GUI_DrawFont16+0x18e>
				for(j=0;j<8;j++)
 800509c:	210e      	movs	r1, #14
 800509e:	187b      	adds	r3, r7, r1
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	187b      	adds	r3, r7, r1
 80050a4:	3201      	adds	r2, #1
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	230e      	movs	r3, #14
 80050aa:	18fb      	adds	r3, r7, r3
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b07      	cmp	r3, #7
 80050b0:	d990      	bls.n	8004fd4 <GUI_DrawFont16+0xb0>
		    for(i=0;i<16*2;i++)
 80050b2:	210f      	movs	r1, #15
 80050b4:	187b      	adds	r3, r7, r1
 80050b6:	781a      	ldrb	r2, [r3, #0]
 80050b8:	187b      	adds	r3, r7, r1
 80050ba:	3201      	adds	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	230f      	movs	r3, #15
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b1f      	cmp	r3, #31
 80050c6:	d800      	bhi.n	80050ca <GUI_DrawFont16+0x1a6>
 80050c8:	e77f      	b.n	8004fca <GUI_DrawFont16+0xa6>
	for (k=0;k<HZnum;k++)
 80050ca:	210c      	movs	r1, #12
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	881a      	ldrh	r2, [r3, #0]
 80050d0:	187b      	adds	r3, r7, r1
 80050d2:	3201      	adds	r2, #1
 80050d4:	801a      	strh	r2, [r3, #0]
 80050d6:	230c      	movs	r3, #12
 80050d8:	18fa      	adds	r2, r7, r3
 80050da:	2308      	movs	r3, #8
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	8812      	ldrh	r2, [r2, #0]
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d200      	bcs.n	80050e8 <GUI_DrawFont16+0x1c4>
 80050e6:	e73e      	b.n	8004f66 <GUI_DrawFont16+0x42>

		}
		continue;
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 80050e8:	4b09      	ldr	r3, [pc, #36]	; (8005110 <GUI_DrawFont16+0x1ec>)
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <GUI_DrawFont16+0x1ec>)
 80050f2:	885b      	ldrh	r3, [r3, #2]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2100      	movs	r1, #0
 80050fa:	2000      	movs	r0, #0
 80050fc:	f000 fe40 	bl	8005d80 <LCD_SetWindows>
}
 8005100:	46c0      	nop			; (mov r8, r8)
 8005102:	46bd      	mov	sp, r7
 8005104:	b004      	add	sp, #16
 8005106:	bdb0      	pop	{r4, r5, r7, pc}
 8005108:	0800999c 	.word	0x0800999c
 800510c:	20000136 	.word	0x20000136
 8005110:	20000128 	.word	0x20000128

08005114 <GUI_DrawFont24>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void GUI_DrawFont24(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *s,uint8_t mode)
{
 8005114:	b5b0      	push	{r4, r5, r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	0005      	movs	r5, r0
 800511c:	000c      	movs	r4, r1
 800511e:	0010      	movs	r0, r2
 8005120:	0019      	movs	r1, r3
 8005122:	1dbb      	adds	r3, r7, #6
 8005124:	1c2a      	adds	r2, r5, #0
 8005126:	801a      	strh	r2, [r3, #0]
 8005128:	1d3b      	adds	r3, r7, #4
 800512a:	1c22      	adds	r2, r4, #0
 800512c:	801a      	strh	r2, [r3, #0]
 800512e:	1cbb      	adds	r3, r7, #2
 8005130:	1c02      	adds	r2, r0, #0
 8005132:	801a      	strh	r2, [r3, #0]
 8005134:	003b      	movs	r3, r7
 8005136:	1c0a      	adds	r2, r1, #0
 8005138:	801a      	strh	r2, [r3, #0]
	uint8_t i,j;
	uint16_t k;
	uint16_t HZnum;
	uint16_t x0=x;
 800513a:	230a      	movs	r3, #10
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	1dba      	adds	r2, r7, #6
 8005140:	8812      	ldrh	r2, [r2, #0]
 8005142:	801a      	strh	r2, [r3, #0]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//�Զ�ͳ�ƺ�����Ŀ
 8005144:	2308      	movs	r3, #8
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	2207      	movs	r2, #7
 800514a:	801a      	strh	r2, [r3, #0]

	for (k=0;k<HZnum;k++)
 800514c:	230c      	movs	r3, #12
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	2200      	movs	r2, #0
 8005152:	801a      	strh	r2, [r3, #0]
 8005154:	e0af      	b.n	80052b6 <GUI_DrawFont24+0x1a2>
	{
	    if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 8005156:	200c      	movs	r0, #12
 8005158:	183b      	adds	r3, r7, r0
 800515a:	881a      	ldrh	r2, [r3, #0]
 800515c:	4b62      	ldr	r3, [pc, #392]	; (80052e8 <GUI_DrawFont24+0x1d4>)
 800515e:	214a      	movs	r1, #74	; 0x4a
 8005160:	434a      	muls	r2, r1
 8005162:	5cd2      	ldrb	r2, [r2, r3]
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d000      	beq.n	800516e <GUI_DrawFont24+0x5a>
 800516c:	e09d      	b.n	80052aa <GUI_DrawFont24+0x196>
 800516e:	183b      	adds	r3, r7, r0
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	4a5d      	ldr	r2, [pc, #372]	; (80052e8 <GUI_DrawFont24+0x1d4>)
 8005174:	214a      	movs	r1, #74	; 0x4a
 8005176:	434b      	muls	r3, r1
 8005178:	18d3      	adds	r3, r2, r3
 800517a:	3301      	adds	r3, #1
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	3301      	adds	r3, #1
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d000      	beq.n	800518a <GUI_DrawFont24+0x76>
 8005188:	e08f      	b.n	80052aa <GUI_DrawFont24+0x196>
	    {
	    	LCD_SetWindows(x,y,x+24-1,y+24-1);
 800518a:	1dbb      	adds	r3, r7, #6
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	3317      	adds	r3, #23
 8005190:	b29a      	uxth	r2, r3
 8005192:	1d3b      	adds	r3, r7, #4
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	3317      	adds	r3, #23
 8005198:	b29c      	uxth	r4, r3
 800519a:	1d3b      	adds	r3, r7, #4
 800519c:	8819      	ldrh	r1, [r3, #0]
 800519e:	1dbb      	adds	r3, r7, #6
 80051a0:	8818      	ldrh	r0, [r3, #0]
 80051a2:	0023      	movs	r3, r4
 80051a4:	f000 fdec 	bl	8005d80 <LCD_SetWindows>
			for(i=0;i<24*3;i++)
 80051a8:	230f      	movs	r3, #15
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e075      	b.n	800529e <GUI_DrawFont24+0x18a>
			{
				for(j=0;j<8;j++)
 80051b2:	230e      	movs	r3, #14
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	e065      	b.n	8005288 <GUI_DrawFont24+0x174>
				{
					if(!mode)
 80051bc:	2324      	movs	r3, #36	; 0x24
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d121      	bne.n	800520a <GUI_DrawFont24+0xf6>
					{
						if(tfont24[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 80051c6:	230c      	movs	r3, #12
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	881a      	ldrh	r2, [r3, #0]
 80051cc:	230f      	movs	r3, #15
 80051ce:	18fb      	adds	r3, r7, r3
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	4945      	ldr	r1, [pc, #276]	; (80052e8 <GUI_DrawFont24+0x1d4>)
 80051d4:	204a      	movs	r0, #74	; 0x4a
 80051d6:	4342      	muls	r2, r0
 80051d8:	188a      	adds	r2, r1, r2
 80051da:	18d3      	adds	r3, r2, r3
 80051dc:	3302      	adds	r3, #2
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	0019      	movs	r1, r3
 80051e2:	230e      	movs	r3, #14
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2280      	movs	r2, #128	; 0x80
 80051ea:	411a      	asrs	r2, r3
 80051ec:	0013      	movs	r3, r2
 80051ee:	400b      	ands	r3, r1
 80051f0:	d005      	beq.n	80051fe <GUI_DrawFont24+0xea>
 80051f2:	1cbb      	adds	r3, r7, #2
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	0018      	movs	r0, r3
 80051f8:	f000 fb66 	bl	80058c8 <Lcd_WriteData_16Bit>
 80051fc:	e03e      	b.n	800527c <GUI_DrawFont24+0x168>
						else Lcd_WriteData_16Bit(bc);
 80051fe:	003b      	movs	r3, r7
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	0018      	movs	r0, r3
 8005204:	f000 fb60 	bl	80058c8 <Lcd_WriteData_16Bit>
 8005208:	e038      	b.n	800527c <GUI_DrawFont24+0x168>
					}
					else
					{
						POINT_COLOR=fc;
 800520a:	4b38      	ldr	r3, [pc, #224]	; (80052ec <GUI_DrawFont24+0x1d8>)
 800520c:	1cba      	adds	r2, r7, #2
 800520e:	8812      	ldrh	r2, [r2, #0]
 8005210:	801a      	strh	r2, [r3, #0]
						if(tfont24[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);
 8005212:	230c      	movs	r3, #12
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	881a      	ldrh	r2, [r3, #0]
 8005218:	230f      	movs	r3, #15
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	4932      	ldr	r1, [pc, #200]	; (80052e8 <GUI_DrawFont24+0x1d4>)
 8005220:	204a      	movs	r0, #74	; 0x4a
 8005222:	4342      	muls	r2, r0
 8005224:	188a      	adds	r2, r1, r2
 8005226:	18d3      	adds	r3, r2, r3
 8005228:	3302      	adds	r3, #2
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	0019      	movs	r1, r3
 800522e:	230e      	movs	r3, #14
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2280      	movs	r2, #128	; 0x80
 8005236:	411a      	asrs	r2, r3
 8005238:	0013      	movs	r3, r2
 800523a:	400b      	ands	r3, r1
 800523c:	d007      	beq.n	800524e <GUI_DrawFont24+0x13a>
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	881a      	ldrh	r2, [r3, #0]
 8005242:	1dbb      	adds	r3, r7, #6
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	0011      	movs	r1, r2
 8005248:	0018      	movs	r0, r3
 800524a:	f000 fb73 	bl	8005934 <LCD_DrawPoint>
						x++;
 800524e:	1dbb      	adds	r3, r7, #6
 8005250:	881a      	ldrh	r2, [r3, #0]
 8005252:	1dbb      	adds	r3, r7, #6
 8005254:	3201      	adds	r2, #1
 8005256:	801a      	strh	r2, [r3, #0]
						if((x-x0)==24)
 8005258:	1dbb      	adds	r3, r7, #6
 800525a:	881a      	ldrh	r2, [r3, #0]
 800525c:	210a      	movs	r1, #10
 800525e:	187b      	adds	r3, r7, r1
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b18      	cmp	r3, #24
 8005266:	d109      	bne.n	800527c <GUI_DrawFont24+0x168>
						{
							x=x0;
 8005268:	1dbb      	adds	r3, r7, #6
 800526a:	187a      	adds	r2, r7, r1
 800526c:	8812      	ldrh	r2, [r2, #0]
 800526e:	801a      	strh	r2, [r3, #0]
							y++;
 8005270:	1d3b      	adds	r3, r7, #4
 8005272:	881a      	ldrh	r2, [r3, #0]
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	3201      	adds	r2, #1
 8005278:	801a      	strh	r2, [r3, #0]
							break;
 800527a:	e00a      	b.n	8005292 <GUI_DrawFont24+0x17e>
				for(j=0;j<8;j++)
 800527c:	210e      	movs	r1, #14
 800527e:	187b      	adds	r3, r7, r1
 8005280:	781a      	ldrb	r2, [r3, #0]
 8005282:	187b      	adds	r3, r7, r1
 8005284:	3201      	adds	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	230e      	movs	r3, #14
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b07      	cmp	r3, #7
 8005290:	d994      	bls.n	80051bc <GUI_DrawFont24+0xa8>
			for(i=0;i<24*3;i++)
 8005292:	210f      	movs	r1, #15
 8005294:	187b      	adds	r3, r7, r1
 8005296:	781a      	ldrb	r2, [r3, #0]
 8005298:	187b      	adds	r3, r7, r1
 800529a:	3201      	adds	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	230f      	movs	r3, #15
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b47      	cmp	r3, #71	; 0x47
 80052a6:	d800      	bhi.n	80052aa <GUI_DrawFont24+0x196>
 80052a8:	e783      	b.n	80051b2 <GUI_DrawFont24+0x9e>
	for (k=0;k<HZnum;k++)
 80052aa:	210c      	movs	r1, #12
 80052ac:	187b      	adds	r3, r7, r1
 80052ae:	881a      	ldrh	r2, [r3, #0]
 80052b0:	187b      	adds	r3, r7, r1
 80052b2:	3201      	adds	r2, #1
 80052b4:	801a      	strh	r2, [r3, #0]
 80052b6:	230c      	movs	r3, #12
 80052b8:	18fa      	adds	r2, r7, r3
 80052ba:	2308      	movs	r3, #8
 80052bc:	18fb      	adds	r3, r7, r3
 80052be:	8812      	ldrh	r2, [r2, #0]
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d200      	bcs.n	80052c8 <GUI_DrawFont24+0x1b4>
 80052c6:	e746      	b.n	8005156 <GUI_DrawFont24+0x42>
			}
		}
		continue;
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 80052c8:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <GUI_DrawFont24+0x1dc>)
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <GUI_DrawFont24+0x1dc>)
 80052d2:	885b      	ldrh	r3, [r3, #2]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2100      	movs	r1, #0
 80052da:	2000      	movs	r0, #0
 80052dc:	f000 fd50 	bl	8005d80 <LCD_SetWindows>
}
 80052e0:	46c0      	nop			; (mov r8, r8)
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b004      	add	sp, #16
 80052e6:	bdb0      	pop	{r4, r5, r7, pc}
 80052e8:	0800a1d8 	.word	0x0800a1d8
 80052ec:	20000136 	.word	0x20000136
 80052f0:	20000128 	.word	0x20000128

080052f4 <GUI_DrawFont32>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void GUI_DrawFont32(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *s,uint8_t mode)
{
 80052f4:	b5b0      	push	{r4, r5, r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	0005      	movs	r5, r0
 80052fc:	000c      	movs	r4, r1
 80052fe:	0010      	movs	r0, r2
 8005300:	0019      	movs	r1, r3
 8005302:	1dbb      	adds	r3, r7, #6
 8005304:	1c2a      	adds	r2, r5, #0
 8005306:	801a      	strh	r2, [r3, #0]
 8005308:	1d3b      	adds	r3, r7, #4
 800530a:	1c22      	adds	r2, r4, #0
 800530c:	801a      	strh	r2, [r3, #0]
 800530e:	1cbb      	adds	r3, r7, #2
 8005310:	1c02      	adds	r2, r0, #0
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	003b      	movs	r3, r7
 8005316:	1c0a      	adds	r2, r1, #0
 8005318:	801a      	strh	r2, [r3, #0]
	uint8_t i, j;
	uint16_t k;
	uint16_t HZnum;
	uint16_t x0 = x;
 800531a:	230a      	movs	r3, #10
 800531c:	18fb      	adds	r3, r7, r3
 800531e:	1dba      	adds	r2, r7, #6
 8005320:	8812      	ldrh	r2, [r2, #0]
 8005322:	801a      	strh	r2, [r3, #0]
	HZnum = sizeof(tfont32)/sizeof(typFNT_GB32);
 8005324:	2308      	movs	r3, #8
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	2204      	movs	r2, #4
 800532a:	801a      	strh	r2, [r3, #0]
	for (k = 0; k < HZnum; k++)
 800532c:	230c      	movs	r3, #12
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	2200      	movs	r2, #0
 8005332:	801a      	strh	r2, [r3, #0]
 8005334:	e0b8      	b.n	80054a8 <GUI_DrawFont32+0x1b4>
	{
	  if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 8005336:	200c      	movs	r0, #12
 8005338:	183b      	adds	r3, r7, r0
 800533a:	881a      	ldrh	r2, [r3, #0]
 800533c:	4967      	ldr	r1, [pc, #412]	; (80054dc <GUI_DrawFont32+0x1e8>)
 800533e:	0013      	movs	r3, r2
 8005340:	019b      	lsls	r3, r3, #6
 8005342:	189b      	adds	r3, r3, r2
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	5c5a      	ldrb	r2, [r3, r1]
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d000      	beq.n	8005352 <GUI_DrawFont32+0x5e>
 8005350:	e0a4      	b.n	800549c <GUI_DrawFont32+0x1a8>
 8005352:	183b      	adds	r3, r7, r0
 8005354:	881a      	ldrh	r2, [r3, #0]
 8005356:	4961      	ldr	r1, [pc, #388]	; (80054dc <GUI_DrawFont32+0x1e8>)
 8005358:	0013      	movs	r3, r2
 800535a:	019b      	lsls	r3, r3, #6
 800535c:	189b      	adds	r3, r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	18cb      	adds	r3, r1, r3
 8005362:	3301      	adds	r3, #1
 8005364:	781a      	ldrb	r2, [r3, #0]
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	3301      	adds	r3, #1
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d000      	beq.n	8005372 <GUI_DrawFont32+0x7e>
 8005370:	e094      	b.n	800549c <GUI_DrawFont32+0x1a8>
	  { 	LCD_SetWindows(x,y,x+32-1,y+32-1);
 8005372:	1dbb      	adds	r3, r7, #6
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	331f      	adds	r3, #31
 8005378:	b29a      	uxth	r2, r3
 800537a:	1d3b      	adds	r3, r7, #4
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	331f      	adds	r3, #31
 8005380:	b29c      	uxth	r4, r3
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	8819      	ldrh	r1, [r3, #0]
 8005386:	1dbb      	adds	r3, r7, #6
 8005388:	8818      	ldrh	r0, [r3, #0]
 800538a:	0023      	movs	r3, r4
 800538c:	f000 fcf8 	bl	8005d80 <LCD_SetWindows>
			for(i=0;i<32*4;i++)
 8005390:	230f      	movs	r3, #15
 8005392:	18fb      	adds	r3, r7, r3
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	e079      	b.n	800548e <GUI_DrawFont32+0x19a>
			{
				for(j=0;j<8;j++)
 800539a:	230e      	movs	r3, #14
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	2200      	movs	r2, #0
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	e069      	b.n	8005478 <GUI_DrawFont32+0x184>
				{
					if(!mode)
 80053a4:	2324      	movs	r3, #36	; 0x24
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d123      	bne.n	80053f6 <GUI_DrawFont32+0x102>
					{
						if(tfont32[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 80053ae:	230c      	movs	r3, #12
 80053b0:	18fb      	adds	r3, r7, r3
 80053b2:	881a      	ldrh	r2, [r3, #0]
 80053b4:	230f      	movs	r3, #15
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	7819      	ldrb	r1, [r3, #0]
 80053ba:	4848      	ldr	r0, [pc, #288]	; (80054dc <GUI_DrawFont32+0x1e8>)
 80053bc:	0013      	movs	r3, r2
 80053be:	019b      	lsls	r3, r3, #6
 80053c0:	189b      	adds	r3, r3, r2
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	18c3      	adds	r3, r0, r3
 80053c6:	185b      	adds	r3, r3, r1
 80053c8:	3302      	adds	r3, #2
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	0019      	movs	r1, r3
 80053ce:	230e      	movs	r3, #14
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2280      	movs	r2, #128	; 0x80
 80053d6:	411a      	asrs	r2, r3
 80053d8:	0013      	movs	r3, r2
 80053da:	400b      	ands	r3, r1
 80053dc:	d005      	beq.n	80053ea <GUI_DrawFont32+0xf6>
 80053de:	1cbb      	adds	r3, r7, #2
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	0018      	movs	r0, r3
 80053e4:	f000 fa70 	bl	80058c8 <Lcd_WriteData_16Bit>
 80053e8:	e040      	b.n	800546c <GUI_DrawFont32+0x178>
						else Lcd_WriteData_16Bit(bc);
 80053ea:	003b      	movs	r3, r7
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	0018      	movs	r0, r3
 80053f0:	f000 fa6a 	bl	80058c8 <Lcd_WriteData_16Bit>
 80053f4:	e03a      	b.n	800546c <GUI_DrawFont32+0x178>
					}
					else
					{
						POINT_COLOR = fc;
 80053f6:	4b3a      	ldr	r3, [pc, #232]	; (80054e0 <GUI_DrawFont32+0x1ec>)
 80053f8:	1cba      	adds	r2, r7, #2
 80053fa:	8812      	ldrh	r2, [r2, #0]
 80053fc:	801a      	strh	r2, [r3, #0]
						if(tfont32[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);
 80053fe:	230c      	movs	r3, #12
 8005400:	18fb      	adds	r3, r7, r3
 8005402:	881a      	ldrh	r2, [r3, #0]
 8005404:	230f      	movs	r3, #15
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	7819      	ldrb	r1, [r3, #0]
 800540a:	4834      	ldr	r0, [pc, #208]	; (80054dc <GUI_DrawFont32+0x1e8>)
 800540c:	0013      	movs	r3, r2
 800540e:	019b      	lsls	r3, r3, #6
 8005410:	189b      	adds	r3, r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	18c3      	adds	r3, r0, r3
 8005416:	185b      	adds	r3, r3, r1
 8005418:	3302      	adds	r3, #2
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	0019      	movs	r1, r3
 800541e:	230e      	movs	r3, #14
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2280      	movs	r2, #128	; 0x80
 8005426:	411a      	asrs	r2, r3
 8005428:	0013      	movs	r3, r2
 800542a:	400b      	ands	r3, r1
 800542c:	d007      	beq.n	800543e <GUI_DrawFont32+0x14a>
 800542e:	1d3b      	adds	r3, r7, #4
 8005430:	881a      	ldrh	r2, [r3, #0]
 8005432:	1dbb      	adds	r3, r7, #6
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	0011      	movs	r1, r2
 8005438:	0018      	movs	r0, r3
 800543a:	f000 fa7b 	bl	8005934 <LCD_DrawPoint>
						x++;
 800543e:	1dbb      	adds	r3, r7, #6
 8005440:	881a      	ldrh	r2, [r3, #0]
 8005442:	1dbb      	adds	r3, r7, #6
 8005444:	3201      	adds	r2, #1
 8005446:	801a      	strh	r2, [r3, #0]
						if((x-x0)==32)
 8005448:	1dbb      	adds	r3, r7, #6
 800544a:	881a      	ldrh	r2, [r3, #0]
 800544c:	210a      	movs	r1, #10
 800544e:	187b      	adds	r3, r7, r1
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b20      	cmp	r3, #32
 8005456:	d109      	bne.n	800546c <GUI_DrawFont32+0x178>
						{
							x=x0;
 8005458:	1dbb      	adds	r3, r7, #6
 800545a:	187a      	adds	r2, r7, r1
 800545c:	8812      	ldrh	r2, [r2, #0]
 800545e:	801a      	strh	r2, [r3, #0]
							y++;
 8005460:	1d3b      	adds	r3, r7, #4
 8005462:	881a      	ldrh	r2, [r3, #0]
 8005464:	1d3b      	adds	r3, r7, #4
 8005466:	3201      	adds	r2, #1
 8005468:	801a      	strh	r2, [r3, #0]
							break;
 800546a:	e00a      	b.n	8005482 <GUI_DrawFont32+0x18e>
				for(j=0;j<8;j++)
 800546c:	210e      	movs	r1, #14
 800546e:	187b      	adds	r3, r7, r1
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	187b      	adds	r3, r7, r1
 8005474:	3201      	adds	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	230e      	movs	r3, #14
 800547a:	18fb      	adds	r3, r7, r3
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b07      	cmp	r3, #7
 8005480:	d990      	bls.n	80053a4 <GUI_DrawFont32+0xb0>
			for(i=0;i<32*4;i++)
 8005482:	210f      	movs	r1, #15
 8005484:	187b      	adds	r3, r7, r1
 8005486:	781a      	ldrb	r2, [r3, #0]
 8005488:	187b      	adds	r3, r7, r1
 800548a:	3201      	adds	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	230f      	movs	r3, #15
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	b25b      	sxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	db00      	blt.n	800549c <GUI_DrawFont32+0x1a8>
 800549a:	e77e      	b.n	800539a <GUI_DrawFont32+0xa6>
	for (k = 0; k < HZnum; k++)
 800549c:	210c      	movs	r1, #12
 800549e:	187b      	adds	r3, r7, r1
 80054a0:	881a      	ldrh	r2, [r3, #0]
 80054a2:	187b      	adds	r3, r7, r1
 80054a4:	3201      	adds	r2, #1
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	230c      	movs	r3, #12
 80054aa:	18fa      	adds	r2, r7, r3
 80054ac:	2308      	movs	r3, #8
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	8812      	ldrh	r2, [r2, #0]
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d200      	bcs.n	80054ba <GUI_DrawFont32+0x1c6>
 80054b8:	e73d      	b.n	8005336 <GUI_DrawFont32+0x42>

		}
		continue;
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 80054ba:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <GUI_DrawFont32+0x1f0>)
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <GUI_DrawFont32+0x1f0>)
 80054c4:	885b      	ldrh	r3, [r3, #2]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2100      	movs	r1, #0
 80054cc:	2000      	movs	r0, #0
 80054ce:	f000 fc57 	bl	8005d80 <LCD_SetWindows>
}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b004      	add	sp, #16
 80054d8:	bdb0      	pop	{r4, r5, r7, pc}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	0800a3e0 	.word	0x0800a3e0
 80054e0:	20000136 	.word	0x20000136
 80054e4:	20000128 	.word	0x20000128

080054e8 <Show_Str>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Show_Str(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *str, uint8_t size, uint8_t mode)
{
 80054e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af04      	add	r7, sp, #16
 80054ee:	0005      	movs	r5, r0
 80054f0:	000c      	movs	r4, r1
 80054f2:	0010      	movs	r0, r2
 80054f4:	0019      	movs	r1, r3
 80054f6:	1dbb      	adds	r3, r7, #6
 80054f8:	1c2a      	adds	r2, r5, #0
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	1d3b      	adds	r3, r7, #4
 80054fe:	1c22      	adds	r2, r4, #0
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	1cbb      	adds	r3, r7, #2
 8005504:	1c02      	adds	r2, r0, #0
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	003b      	movs	r3, r7
 800550a:	1c0a      	adds	r2, r1, #0
 800550c:	801a      	strh	r2, [r3, #0]
	uint16_t x0=x;
 800550e:	230c      	movs	r3, #12
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	1dba      	adds	r2, r7, #6
 8005514:	8812      	ldrh	r2, [r2, #0]
 8005516:	801a      	strh	r2, [r3, #0]
  	uint8_t bHz=0;
 8005518:	230f      	movs	r3, #15
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
    while(*str!=0)
 8005520:	e100      	b.n	8005724 <Show_Str+0x23c>
    {
        if(!bHz)
 8005522:	240f      	movs	r4, #15
 8005524:	193b      	adds	r3, r7, r4
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d000      	beq.n	800552e <Show_Str+0x46>
 800552c:	e089      	b.n	8005642 <Show_Str+0x15a>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size))
 800552e:	1dbb      	adds	r3, r7, #6
 8005530:	881a      	ldrh	r2, [r3, #0]
 8005532:	4b82      	ldr	r3, [pc, #520]	; (800573c <Show_Str+0x254>)
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	0019      	movs	r1, r3
 8005538:	2024      	movs	r0, #36	; 0x24
 800553a:	2508      	movs	r5, #8
 800553c:	1943      	adds	r3, r0, r5
 800553e:	19db      	adds	r3, r3, r7
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	b2db      	uxtb	r3, r3
 8005546:	1acb      	subs	r3, r1, r3
 8005548:	429a      	cmp	r2, r3
 800554a:	dd00      	ble.n	800554e <Show_Str+0x66>
 800554c:	e0f0      	b.n	8005730 <Show_Str+0x248>
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	881a      	ldrh	r2, [r3, #0]
 8005552:	4b7a      	ldr	r3, [pc, #488]	; (800573c <Show_Str+0x254>)
 8005554:	885b      	ldrh	r3, [r3, #2]
 8005556:	0019      	movs	r1, r3
 8005558:	1943      	adds	r3, r0, r5
 800555a:	19db      	adds	r3, r3, r7
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	1acb      	subs	r3, r1, r3
 8005560:	429a      	cmp	r2, r3
 8005562:	dd00      	ble.n	8005566 <Show_Str+0x7e>
 8005564:	e0e4      	b.n	8005730 <Show_Str+0x248>
			return;
	        if(*str>0x80)bHz=1;
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b80      	cmp	r3, #128	; 0x80
 800556c:	d903      	bls.n	8005576 <Show_Str+0x8e>
 800556e:	193b      	adds	r3, r7, r4
 8005570:	2201      	movs	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	e0d6      	b.n	8005724 <Show_Str+0x23c>
	        else
	        {
		        if(*str==0x0D)
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b0d      	cmp	r3, #13
 800557c:	d113      	bne.n	80055a6 <Show_Str+0xbe>
		        {
		            y+=size;
 800557e:	2324      	movs	r3, #36	; 0x24
 8005580:	2208      	movs	r2, #8
 8005582:	189b      	adds	r3, r3, r2
 8005584:	19db      	adds	r3, r3, r7
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	b299      	uxth	r1, r3
 800558a:	1d3b      	adds	r3, r7, #4
 800558c:	1d3a      	adds	r2, r7, #4
 800558e:	8812      	ldrh	r2, [r2, #0]
 8005590:	188a      	adds	r2, r1, r2
 8005592:	801a      	strh	r2, [r3, #0]
					x=x0;
 8005594:	1dbb      	adds	r3, r7, #6
 8005596:	220c      	movs	r2, #12
 8005598:	18ba      	adds	r2, r7, r2
 800559a:	8812      	ldrh	r2, [r2, #0]
 800559c:	801a      	strh	r2, [r3, #0]
		            str++;
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	3301      	adds	r3, #1
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a4:	e049      	b.n	800563a <Show_Str+0x152>
		        }
		        else
				{
					if(size>16)
 80055a6:	2324      	movs	r3, #36	; 0x24
 80055a8:	2608      	movs	r6, #8
 80055aa:	199b      	adds	r3, r3, r6
 80055ac:	19db      	adds	r3, r3, r7
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d91b      	bls.n	80055ec <Show_Str+0x104>
					{
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	003a      	movs	r2, r7
 80055ba:	8815      	ldrh	r5, [r2, #0]
 80055bc:	1cba      	adds	r2, r7, #2
 80055be:	8814      	ldrh	r4, [r2, #0]
 80055c0:	1d3a      	adds	r2, r7, #4
 80055c2:	8811      	ldrh	r1, [r2, #0]
 80055c4:	1dba      	adds	r2, r7, #6
 80055c6:	8810      	ldrh	r0, [r2, #0]
 80055c8:	2228      	movs	r2, #40	; 0x28
 80055ca:	1992      	adds	r2, r2, r6
 80055cc:	19d2      	adds	r2, r2, r7
 80055ce:	7812      	ldrb	r2, [r2, #0]
 80055d0:	9202      	str	r2, [sp, #8]
 80055d2:	2210      	movs	r2, #16
 80055d4:	9201      	str	r2, [sp, #4]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	002b      	movs	r3, r5
 80055da:	0022      	movs	r2, r4
 80055dc:	f7ff fb74 	bl	8004cc8 <LCD_ShowChar>
					x+=8;
 80055e0:	1dbb      	adds	r3, r7, #6
 80055e2:	1dba      	adds	r2, r7, #6
 80055e4:	8812      	ldrh	r2, [r2, #0]
 80055e6:	3208      	adds	r2, #8
 80055e8:	801a      	strh	r2, [r3, #0]
 80055ea:	e026      	b.n	800563a <Show_Str+0x152>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	003a      	movs	r2, r7
 80055f2:	8815      	ldrh	r5, [r2, #0]
 80055f4:	1cba      	adds	r2, r7, #2
 80055f6:	8814      	ldrh	r4, [r2, #0]
 80055f8:	1d3a      	adds	r2, r7, #4
 80055fa:	8811      	ldrh	r1, [r2, #0]
 80055fc:	1dba      	adds	r2, r7, #6
 80055fe:	8810      	ldrh	r0, [r2, #0]
 8005600:	2228      	movs	r2, #40	; 0x28
 8005602:	2608      	movs	r6, #8
 8005604:	1992      	adds	r2, r2, r6
 8005606:	19d2      	adds	r2, r2, r7
 8005608:	7812      	ldrb	r2, [r2, #0]
 800560a:	9202      	str	r2, [sp, #8]
 800560c:	2624      	movs	r6, #36	; 0x24
 800560e:	2208      	movs	r2, #8
 8005610:	18b2      	adds	r2, r6, r2
 8005612:	19d2      	adds	r2, r2, r7
 8005614:	7812      	ldrb	r2, [r2, #0]
 8005616:	9201      	str	r2, [sp, #4]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	002b      	movs	r3, r5
 800561c:	0022      	movs	r2, r4
 800561e:	f7ff fb53 	bl	8004cc8 <LCD_ShowChar>
					x+=size/2;
 8005622:	2308      	movs	r3, #8
 8005624:	18f3      	adds	r3, r6, r3
 8005626:	19db      	adds	r3, r3, r7
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	085b      	lsrs	r3, r3, #1
 800562c:	b2db      	uxtb	r3, r3
 800562e:	b299      	uxth	r1, r3
 8005630:	1dbb      	adds	r3, r7, #6
 8005632:	1dba      	adds	r2, r7, #6
 8005634:	8812      	ldrh	r2, [r2, #0]
 8005636:	188a      	adds	r2, r1, r2
 8005638:	801a      	strh	r2, [r3, #0]
					}
				}
				str++;
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	3301      	adds	r3, #1
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005640:	e070      	b.n	8005724 <Show_Str+0x23c>

	        }
        }else
        {
			if(x>(lcddev.width-size)||y>(lcddev.height-size))
 8005642:	1dbb      	adds	r3, r7, #6
 8005644:	881a      	ldrh	r2, [r3, #0]
 8005646:	4b3d      	ldr	r3, [pc, #244]	; (800573c <Show_Str+0x254>)
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	0019      	movs	r1, r3
 800564c:	2024      	movs	r0, #36	; 0x24
 800564e:	2408      	movs	r4, #8
 8005650:	1903      	adds	r3, r0, r4
 8005652:	19db      	adds	r3, r3, r7
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	1acb      	subs	r3, r1, r3
 8005658:	429a      	cmp	r2, r3
 800565a:	dd00      	ble.n	800565e <Show_Str+0x176>
 800565c:	e06a      	b.n	8005734 <Show_Str+0x24c>
 800565e:	1d3b      	adds	r3, r7, #4
 8005660:	881a      	ldrh	r2, [r3, #0]
 8005662:	4b36      	ldr	r3, [pc, #216]	; (800573c <Show_Str+0x254>)
 8005664:	885b      	ldrh	r3, [r3, #2]
 8005666:	0019      	movs	r1, r3
 8005668:	1903      	adds	r3, r0, r4
 800566a:	19db      	adds	r3, r3, r7
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	1acb      	subs	r3, r1, r3
 8005670:	429a      	cmp	r2, r3
 8005672:	dc5f      	bgt.n	8005734 <Show_Str+0x24c>
			return;
            bHz=0;
 8005674:	230f      	movs	r3, #15
 8005676:	18fb      	adds	r3, r7, r3
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
			if(size==32)
 800567c:	0025      	movs	r5, r4
 800567e:	1903      	adds	r3, r0, r4
 8005680:	19db      	adds	r3, r3, r7
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b20      	cmp	r3, #32
 8005686:	d112      	bne.n	80056ae <Show_Str+0x1c6>
			GUI_DrawFont32(x,y,fc,bc,str,mode);
 8005688:	003b      	movs	r3, r7
 800568a:	881c      	ldrh	r4, [r3, #0]
 800568c:	1cbb      	adds	r3, r7, #2
 800568e:	881a      	ldrh	r2, [r3, #0]
 8005690:	1d3b      	adds	r3, r7, #4
 8005692:	8819      	ldrh	r1, [r3, #0]
 8005694:	1dbb      	adds	r3, r7, #6
 8005696:	8818      	ldrh	r0, [r3, #0]
 8005698:	2328      	movs	r3, #40	; 0x28
 800569a:	195b      	adds	r3, r3, r5
 800569c:	19db      	adds	r3, r3, r7
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	9301      	str	r3, [sp, #4]
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	0023      	movs	r3, r4
 80056a8:	f7ff fe24 	bl	80052f4 <GUI_DrawFont32>
 80056ac:	e02c      	b.n	8005708 <Show_Str+0x220>
			else if(size==24)
 80056ae:	2324      	movs	r3, #36	; 0x24
 80056b0:	2508      	movs	r5, #8
 80056b2:	195b      	adds	r3, r3, r5
 80056b4:	19db      	adds	r3, r3, r7
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b18      	cmp	r3, #24
 80056ba:	d112      	bne.n	80056e2 <Show_Str+0x1fa>
			GUI_DrawFont24(x,y,fc,bc,str,mode);
 80056bc:	003b      	movs	r3, r7
 80056be:	881c      	ldrh	r4, [r3, #0]
 80056c0:	1cbb      	adds	r3, r7, #2
 80056c2:	881a      	ldrh	r2, [r3, #0]
 80056c4:	1d3b      	adds	r3, r7, #4
 80056c6:	8819      	ldrh	r1, [r3, #0]
 80056c8:	1dbb      	adds	r3, r7, #6
 80056ca:	8818      	ldrh	r0, [r3, #0]
 80056cc:	2328      	movs	r3, #40	; 0x28
 80056ce:	195b      	adds	r3, r3, r5
 80056d0:	19db      	adds	r3, r3, r7
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	0023      	movs	r3, r4
 80056dc:	f7ff fd1a 	bl	8005114 <GUI_DrawFont24>
 80056e0:	e012      	b.n	8005708 <Show_Str+0x220>
			else
			GUI_DrawFont16(x,y,fc,bc,str,mode);
 80056e2:	003b      	movs	r3, r7
 80056e4:	881c      	ldrh	r4, [r3, #0]
 80056e6:	1cbb      	adds	r3, r7, #2
 80056e8:	881a      	ldrh	r2, [r3, #0]
 80056ea:	1d3b      	adds	r3, r7, #4
 80056ec:	8819      	ldrh	r1, [r3, #0]
 80056ee:	1dbb      	adds	r3, r7, #6
 80056f0:	8818      	ldrh	r0, [r3, #0]
 80056f2:	2328      	movs	r3, #40	; 0x28
 80056f4:	2508      	movs	r5, #8
 80056f6:	195b      	adds	r3, r3, r5
 80056f8:	19db      	adds	r3, r3, r7
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	0023      	movs	r3, r4
 8005704:	f7ff fc0e 	bl	8004f24 <GUI_DrawFont16>

	        str+=2;
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	3302      	adds	r3, #2
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
	        x+=size;
 800570e:	2324      	movs	r3, #36	; 0x24
 8005710:	2208      	movs	r2, #8
 8005712:	189b      	adds	r3, r3, r2
 8005714:	19db      	adds	r3, r3, r7
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	b299      	uxth	r1, r3
 800571a:	1dbb      	adds	r3, r7, #6
 800571c:	1dba      	adds	r2, r7, #6
 800571e:	8812      	ldrh	r2, [r2, #0]
 8005720:	188a      	adds	r2, r1, r2
 8005722:	801a      	strh	r2, [r3, #0]
    while(*str!=0)
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d000      	beq.n	800572e <Show_Str+0x246>
 800572c:	e6f9      	b.n	8005522 <Show_Str+0x3a>
 800572e:	e002      	b.n	8005736 <Show_Str+0x24e>
			return;
 8005730:	46c0      	nop			; (mov r8, r8)
 8005732:	e000      	b.n	8005736 <Show_Str+0x24e>
			return;
 8005734:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8005736:	46bd      	mov	sp, r7
 8005738:	b005      	add	sp, #20
 800573a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800573c:	20000128 	.word	0x20000128

08005740 <Gui_StrCenter>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void Gui_StrCenter(uint16_t x, uint16_t y, uint16_t fc, uint16_t bc, uint8_t *str, uint8_t size, uint8_t mode)
{
 8005740:	b5b0      	push	{r4, r5, r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af04      	add	r7, sp, #16
 8005746:	0005      	movs	r5, r0
 8005748:	000c      	movs	r4, r1
 800574a:	0010      	movs	r0, r2
 800574c:	0019      	movs	r1, r3
 800574e:	1dbb      	adds	r3, r7, #6
 8005750:	1c2a      	adds	r2, r5, #0
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	1d3b      	adds	r3, r7, #4
 8005756:	1c22      	adds	r2, r4, #0
 8005758:	801a      	strh	r2, [r3, #0]
 800575a:	1cbb      	adds	r3, r7, #2
 800575c:	1c02      	adds	r2, r0, #0
 800575e:	801a      	strh	r2, [r3, #0]
 8005760:	003b      	movs	r3, r7
 8005762:	1c0a      	adds	r2, r1, #0
 8005764:	801a      	strh	r2, [r3, #0]
	uint16_t len = strlen((const char *)str);
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	0018      	movs	r0, r3
 800576a:	f7fa fccd 	bl	8000108 <strlen>
 800576e:	0002      	movs	r2, r0
 8005770:	200e      	movs	r0, #14
 8005772:	183b      	adds	r3, r7, r0
 8005774:	801a      	strh	r2, [r3, #0]
	uint16_t x1 = (lcddev.width - len * (size / 2)) / 2;
 8005776:	4b16      	ldr	r3, [pc, #88]	; (80057d0 <Gui_StrCenter+0x90>)
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	0019      	movs	r1, r3
 800577c:	183b      	adds	r3, r7, r0
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	2224      	movs	r2, #36	; 0x24
 8005782:	18ba      	adds	r2, r7, r2
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	0852      	lsrs	r2, r2, #1
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	4353      	muls	r3, r2
 800578c:	1acb      	subs	r3, r1, r3
 800578e:	d500      	bpl.n	8005792 <Gui_StrCenter+0x52>
 8005790:	3301      	adds	r3, #1
 8005792:	105b      	asrs	r3, r3, #1
 8005794:	001a      	movs	r2, r3
 8005796:	200c      	movs	r0, #12
 8005798:	183b      	adds	r3, r7, r0
 800579a:	801a      	strh	r2, [r3, #0]
	Show_Str(x1, y, fc, bc, str, size, mode);
 800579c:	003b      	movs	r3, r7
 800579e:	881c      	ldrh	r4, [r3, #0]
 80057a0:	1cbb      	adds	r3, r7, #2
 80057a2:	881a      	ldrh	r2, [r3, #0]
 80057a4:	1d3b      	adds	r3, r7, #4
 80057a6:	8819      	ldrh	r1, [r3, #0]
 80057a8:	183b      	adds	r3, r7, r0
 80057aa:	8818      	ldrh	r0, [r3, #0]
 80057ac:	2328      	movs	r3, #40	; 0x28
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	9302      	str	r3, [sp, #8]
 80057b4:	2324      	movs	r3, #36	; 0x24
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	0023      	movs	r3, r4
 80057c2:	f7ff fe91 	bl	80054e8 <Show_Str>
}
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b004      	add	sp, #16
 80057cc:	bdb0      	pop	{r4, r5, r7, pc}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	20000128 	.word	0x20000128

080057d4 <LCD_WR_REG>:
 * @brief	Write an 8-bit command to the LCD screen
 * @param	Command value to be written
 * @retval  None
*/
void LCD_WR_REG(uint8_t data)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	0002      	movs	r2, r0
 80057dc:	1dfb      	adds	r3, r7, #7
 80057de:	701a      	strb	r2, [r3, #0]
	GPIO_ResetBits(LCD_PORT, DC_PIN);
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	015b      	lsls	r3, r3, #5
 80057e4:	4a0e      	ldr	r2, [pc, #56]	; (8005820 <LCD_WR_REG+0x4c>)
 80057e6:	0019      	movs	r1, r3
 80057e8:	0010      	movs	r0, r2
 80057ea:	f7fd fe77 	bl	80034dc <GPIO_ResetBits>
	GPIO_ResetBits(LCD_PORT, CS_PIN);
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	01db      	lsls	r3, r3, #7
 80057f2:	4a0b      	ldr	r2, [pc, #44]	; (8005820 <LCD_WR_REG+0x4c>)
 80057f4:	0019      	movs	r1, r3
 80057f6:	0010      	movs	r0, r2
 80057f8:	f7fd fe70 	bl	80034dc <GPIO_ResetBits>
	LCDSPI_WriteByte(LCD_SPI, data);
 80057fc:	1dfb      	adds	r3, r7, #7
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	4a08      	ldr	r2, [pc, #32]	; (8005824 <LCD_WR_REG+0x50>)
 8005802:	0019      	movs	r1, r3
 8005804:	0010      	movs	r0, r2
 8005806:	f000 fc21 	bl	800604c <LCDSPI_WriteByte>
	GPIO_SetBits(LCD_PORT, CS_PIN);
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	01db      	lsls	r3, r3, #7
 800580e:	4a04      	ldr	r2, [pc, #16]	; (8005820 <LCD_WR_REG+0x4c>)
 8005810:	0019      	movs	r1, r3
 8005812:	0010      	movs	r0, r2
 8005814:	f7fd fe53 	bl	80034be <GPIO_SetBits>
}
 8005818:	46c0      	nop			; (mov r8, r8)
 800581a:	46bd      	mov	sp, r7
 800581c:	b002      	add	sp, #8
 800581e:	bd80      	pop	{r7, pc}
 8005820:	48000400 	.word	0x48000400
 8005824:	40013000 	.word	0x40013000

08005828 <LCD_WR_DATA>:
 * @brief	Write an 8-bit data to the LCD screen
 * @param	data value to be written
 * @retval  None
*/
void LCD_WR_DATA(uint8_t data)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	0002      	movs	r2, r0
 8005830:	1dfb      	adds	r3, r7, #7
 8005832:	701a      	strb	r2, [r3, #0]
	GPIO_SetBits(LCD_PORT, DC_PIN);
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	015b      	lsls	r3, r3, #5
 8005838:	4a0e      	ldr	r2, [pc, #56]	; (8005874 <LCD_WR_DATA+0x4c>)
 800583a:	0019      	movs	r1, r3
 800583c:	0010      	movs	r0, r2
 800583e:	f7fd fe3e 	bl	80034be <GPIO_SetBits>
	GPIO_ResetBits(LCD_PORT, CS_PIN);
 8005842:	2380      	movs	r3, #128	; 0x80
 8005844:	01db      	lsls	r3, r3, #7
 8005846:	4a0b      	ldr	r2, [pc, #44]	; (8005874 <LCD_WR_DATA+0x4c>)
 8005848:	0019      	movs	r1, r3
 800584a:	0010      	movs	r0, r2
 800584c:	f7fd fe46 	bl	80034dc <GPIO_ResetBits>
	LCDSPI_WriteByte(LCD_SPI, data);
 8005850:	1dfb      	adds	r3, r7, #7
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	4a08      	ldr	r2, [pc, #32]	; (8005878 <LCD_WR_DATA+0x50>)
 8005856:	0019      	movs	r1, r3
 8005858:	0010      	movs	r0, r2
 800585a:	f000 fbf7 	bl	800604c <LCDSPI_WriteByte>
	GPIO_SetBits(LCD_PORT, CS_PIN);
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	01db      	lsls	r3, r3, #7
 8005862:	4a04      	ldr	r2, [pc, #16]	; (8005874 <LCD_WR_DATA+0x4c>)
 8005864:	0019      	movs	r1, r3
 8005866:	0010      	movs	r0, r2
 8005868:	f7fd fe29 	bl	80034be <GPIO_SetBits>
}
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	b002      	add	sp, #8
 8005872:	bd80      	pop	{r7, pc}
 8005874:	48000400 	.word	0x48000400
 8005878:	40013000 	.word	0x40013000

0800587c <LCD_WriteReg>:
 * @param 	LCD_Reg:Register address
            LCD_RegValue: Data to be written
 * @retval  None
*/
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	0002      	movs	r2, r0
 8005884:	1dfb      	adds	r3, r7, #7
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	1d3b      	adds	r3, r7, #4
 800588a:	1c0a      	adds	r2, r1, #0
 800588c:	801a      	strh	r2, [r3, #0]
	LCD_WR_REG(LCD_Reg);
 800588e:	1dfb      	adds	r3, r7, #7
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	0018      	movs	r0, r3
 8005894:	f7ff ff9e 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8005898:	1d3b      	adds	r3, r7, #4
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	0018      	movs	r0, r3
 80058a0:	f7ff ffc2 	bl	8005828 <LCD_WR_DATA>
}
 80058a4:	46c0      	nop			; (mov r8, r8)
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b002      	add	sp, #8
 80058aa:	bd80      	pop	{r7, pc}

080058ac <LCD_WriteRAM_Prepare>:
 * @brief	Write GRAM
 * @param	None
 * @retval	None
*/
void LCD_WriteRAM_Prepare(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80058b0:	4b04      	ldr	r3, [pc, #16]	; (80058c4 <LCD_WriteRAM_Prepare+0x18>)
 80058b2:	891b      	ldrh	r3, [r3, #8]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	0018      	movs	r0, r3
 80058b8:	f7ff ff8c 	bl	80057d4 <LCD_WR_REG>
}
 80058bc:	46c0      	nop			; (mov r8, r8)
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	20000128 	.word	0x20000128

080058c8 <Lcd_WriteData_16Bit>:
 * @param   Write an 16-bit command to the LCD screen
 * @param	Data to be written
 * @retval	None
*/
void Lcd_WriteData_16Bit(uint16_t data)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	0002      	movs	r2, r0
 80058d0:	1dbb      	adds	r3, r7, #6
 80058d2:	801a      	strh	r2, [r3, #0]
	GPIO_SetBits(LCD_PORT, DC_PIN);
 80058d4:	2380      	movs	r3, #128	; 0x80
 80058d6:	015b      	lsls	r3, r3, #5
 80058d8:	4a14      	ldr	r2, [pc, #80]	; (800592c <Lcd_WriteData_16Bit+0x64>)
 80058da:	0019      	movs	r1, r3
 80058dc:	0010      	movs	r0, r2
 80058de:	f7fd fdee 	bl	80034be <GPIO_SetBits>
	GPIO_ResetBits(LCD_PORT, CS_PIN);
 80058e2:	2380      	movs	r3, #128	; 0x80
 80058e4:	01db      	lsls	r3, r3, #7
 80058e6:	4a11      	ldr	r2, [pc, #68]	; (800592c <Lcd_WriteData_16Bit+0x64>)
 80058e8:	0019      	movs	r1, r3
 80058ea:	0010      	movs	r0, r2
 80058ec:	f7fd fdf6 	bl	80034dc <GPIO_ResetBits>
	LCDSPI_WriteByte(LCD_SPI, data >> 8);
 80058f0:	1dbb      	adds	r3, r7, #6
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	0a1b      	lsrs	r3, r3, #8
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	4a0d      	ldr	r2, [pc, #52]	; (8005930 <Lcd_WriteData_16Bit+0x68>)
 80058fc:	0019      	movs	r1, r3
 80058fe:	0010      	movs	r0, r2
 8005900:	f000 fba4 	bl	800604c <LCDSPI_WriteByte>
	LCDSPI_WriteByte(LCD_SPI, data);
 8005904:	1dbb      	adds	r3, r7, #6
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	4a09      	ldr	r2, [pc, #36]	; (8005930 <Lcd_WriteData_16Bit+0x68>)
 800590c:	0019      	movs	r1, r3
 800590e:	0010      	movs	r0, r2
 8005910:	f000 fb9c 	bl	800604c <LCDSPI_WriteByte>
	GPIO_SetBits(LCD_PORT, CS_PIN);
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	01db      	lsls	r3, r3, #7
 8005918:	4a04      	ldr	r2, [pc, #16]	; (800592c <Lcd_WriteData_16Bit+0x64>)
 800591a:	0019      	movs	r1, r3
 800591c:	0010      	movs	r0, r2
 800591e:	f7fd fdce 	bl	80034be <GPIO_SetBits>
}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	46bd      	mov	sp, r7
 8005926:	b002      	add	sp, #8
 8005928:	bd80      	pop	{r7, pc}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	48000400 	.word	0x48000400
 8005930:	40013000 	.word	0x40013000

08005934 <LCD_DrawPoint>:
 * @param	x:the x coordinate of the pixel
            y:the y coordinate of the pixel
 * @retval	None
*/
void LCD_DrawPoint(uint16_t x,uint16_t y)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	0002      	movs	r2, r0
 800593c:	1dbb      	adds	r3, r7, #6
 800593e:	801a      	strh	r2, [r3, #0]
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	1c0a      	adds	r2, r1, #0
 8005944:	801a      	strh	r2, [r3, #0]
	LCD_SetCursor(x, y);
 8005946:	1d3b      	adds	r3, r7, #4
 8005948:	881a      	ldrh	r2, [r3, #0]
 800594a:	1dbb      	adds	r3, r7, #6
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	0011      	movs	r1, r2
 8005950:	0018      	movs	r0, r3
 8005952:	f000 fa75 	bl	8005e40 <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR);
 8005956:	4b04      	ldr	r3, [pc, #16]	; (8005968 <LCD_DrawPoint+0x34>)
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	0018      	movs	r0, r3
 800595c:	f7ff ffb4 	bl	80058c8 <Lcd_WriteData_16Bit>
}
 8005960:	46c0      	nop			; (mov r8, r8)
 8005962:	46bd      	mov	sp, r7
 8005964:	b002      	add	sp, #8
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000136 	.word	0x20000136

0800596c <LCD_Clear>:
 * @brief	Full screen filled LCD screen
 * @param	color:Filled color
 * @retval	None
*/
void LCD_Clear(uint16_t Color)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	0002      	movs	r2, r0
 8005974:	1dbb      	adds	r3, r7, #6
 8005976:	801a      	strh	r2, [r3, #0]
    unsigned int i, m;
	LCD_SetWindows(0, 0, lcddev.width - 1, lcddev.height - 1);
 8005978:	4b20      	ldr	r3, [pc, #128]	; (80059fc <LCD_Clear+0x90>)
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	4b1e      	ldr	r3, [pc, #120]	; (80059fc <LCD_Clear+0x90>)
 8005982:	885b      	ldrh	r3, [r3, #2]
 8005984:	3b01      	subs	r3, #1
 8005986:	b29b      	uxth	r3, r3
 8005988:	2100      	movs	r1, #0
 800598a:	2000      	movs	r0, #0
 800598c:	f000 f9f8 	bl	8005d80 <LCD_SetWindows>
	GPIO_SetBits(LCD_PORT, DC_PIN);
 8005990:	2380      	movs	r3, #128	; 0x80
 8005992:	015b      	lsls	r3, r3, #5
 8005994:	4a1a      	ldr	r2, [pc, #104]	; (8005a00 <LCD_Clear+0x94>)
 8005996:	0019      	movs	r1, r3
 8005998:	0010      	movs	r0, r2
 800599a:	f7fd fd90 	bl	80034be <GPIO_SetBits>
	GPIO_ResetBits(LCD_PORT, CS_PIN);
 800599e:	2380      	movs	r3, #128	; 0x80
 80059a0:	01db      	lsls	r3, r3, #7
 80059a2:	4a17      	ldr	r2, [pc, #92]	; (8005a00 <LCD_Clear+0x94>)
 80059a4:	0019      	movs	r1, r3
 80059a6:	0010      	movs	r0, r2
 80059a8:	f7fd fd98 	bl	80034dc <GPIO_ResetBits>
	for(i = 0; i < lcddev.height; i++)
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	e013      	b.n	80059da <LCD_Clear+0x6e>
	{
        for(m = 0; m < lcddev.width; m++)
 80059b2:	2300      	movs	r3, #0
 80059b4:	60bb      	str	r3, [r7, #8]
 80059b6:	e007      	b.n	80059c8 <LCD_Clear+0x5c>
        {
			Lcd_WriteData_16Bit(Color);
 80059b8:	1dbb      	adds	r3, r7, #6
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	0018      	movs	r0, r3
 80059be:	f7ff ff83 	bl	80058c8 <Lcd_WriteData_16Bit>
        for(m = 0; m < lcddev.width; m++)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	3301      	adds	r3, #1
 80059c6:	60bb      	str	r3, [r7, #8]
 80059c8:	4b0c      	ldr	r3, [pc, #48]	; (80059fc <LCD_Clear+0x90>)
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	001a      	movs	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d3f1      	bcc.n	80059b8 <LCD_Clear+0x4c>
	for(i = 0; i < lcddev.height; i++)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	4b08      	ldr	r3, [pc, #32]	; (80059fc <LCD_Clear+0x90>)
 80059dc:	885b      	ldrh	r3, [r3, #2]
 80059de:	001a      	movs	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d3e5      	bcc.n	80059b2 <LCD_Clear+0x46>
		}
	}
	GPIO_SetBits(LCD_PORT, CS_PIN);
 80059e6:	2380      	movs	r3, #128	; 0x80
 80059e8:	01db      	lsls	r3, r3, #7
 80059ea:	4a05      	ldr	r2, [pc, #20]	; (8005a00 <LCD_Clear+0x94>)
 80059ec:	0019      	movs	r1, r3
 80059ee:	0010      	movs	r0, r2
 80059f0:	f7fd fd65 	bl	80034be <GPIO_SetBits>
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b004      	add	sp, #16
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	20000128 	.word	0x20000128
 8005a00:	48000400 	.word	0x48000400

08005a04 <LCD_ClearCursor>:
 * @retval	None
*/
void LCD_ClearCursor(uint16_t wXs, uint16_t wYs, \
					 uint16_t wXe, uint16_t wYe, \
					 uint16_t wColor)
{
 8005a04:	b5b0      	push	{r4, r5, r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	0005      	movs	r5, r0
 8005a0c:	000c      	movs	r4, r1
 8005a0e:	0010      	movs	r0, r2
 8005a10:	0019      	movs	r1, r3
 8005a12:	1dbb      	adds	r3, r7, #6
 8005a14:	1c2a      	adds	r2, r5, #0
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	1d3b      	adds	r3, r7, #4
 8005a1a:	1c22      	adds	r2, r4, #0
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	1cbb      	adds	r3, r7, #2
 8005a20:	1c02      	adds	r2, r0, #0
 8005a22:	801a      	strh	r2, [r3, #0]
 8005a24:	003b      	movs	r3, r7
 8005a26:	1c0a      	adds	r2, r1, #0
 8005a28:	801a      	strh	r2, [r3, #0]
	unsigned int i, m;
	uint16_t width = wXe - wXs - 1;
 8005a2a:	1cba      	adds	r2, r7, #2
 8005a2c:	1dbb      	adds	r3, r7, #6
 8005a2e:	8812      	ldrh	r2, [r2, #0]
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	230e      	movs	r3, #14
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	3a01      	subs	r2, #1
 8005a3c:	801a      	strh	r2, [r3, #0]
	uint16_t height = wYe - wYs - 1;
 8005a3e:	003a      	movs	r2, r7
 8005a40:	1d3b      	adds	r3, r7, #4
 8005a42:	8812      	ldrh	r2, [r2, #0]
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	18fb      	adds	r3, r7, r3
 8005a4e:	3a01      	subs	r2, #1
 8005a50:	801a      	strh	r2, [r3, #0]
	LCD_SetWindows(wXs, wYs, wXe, wYe);
 8005a52:	003b      	movs	r3, r7
 8005a54:	881c      	ldrh	r4, [r3, #0]
 8005a56:	1cbb      	adds	r3, r7, #2
 8005a58:	881a      	ldrh	r2, [r3, #0]
 8005a5a:	1d3b      	adds	r3, r7, #4
 8005a5c:	8819      	ldrh	r1, [r3, #0]
 8005a5e:	1dbb      	adds	r3, r7, #6
 8005a60:	8818      	ldrh	r0, [r3, #0]
 8005a62:	0023      	movs	r3, r4
 8005a64:	f000 f98c 	bl	8005d80 <LCD_SetWindows>
	GPIO_SetBits(LCD_PORT, DC_PIN);
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	015b      	lsls	r3, r3, #5
 8005a6c:	4a20      	ldr	r2, [pc, #128]	; (8005af0 <LCD_ClearCursor+0xec>)
 8005a6e:	0019      	movs	r1, r3
 8005a70:	0010      	movs	r0, r2
 8005a72:	f7fd fd24 	bl	80034be <GPIO_SetBits>
	GPIO_ResetBits(LCD_PORT, CS_PIN);
 8005a76:	2380      	movs	r3, #128	; 0x80
 8005a78:	01db      	lsls	r3, r3, #7
 8005a7a:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <LCD_ClearCursor+0xec>)
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	0010      	movs	r0, r2
 8005a80:	f7fd fd2c 	bl	80034dc <GPIO_ResetBits>
	for(i = 0; i < height; i++)
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e014      	b.n	8005ab4 <LCD_ClearCursor+0xb0>
	{
		for(m = 0; m < width; m++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	e008      	b.n	8005aa2 <LCD_ClearCursor+0x9e>
		{
			Lcd_WriteData_16Bit(wColor);
 8005a90:	2328      	movs	r3, #40	; 0x28
 8005a92:	18fb      	adds	r3, r7, r3
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	0018      	movs	r0, r3
 8005a98:	f7ff ff16 	bl	80058c8 <Lcd_WriteData_16Bit>
		for(m = 0; m < width; m++)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	230e      	movs	r3, #14
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d3f0      	bcc.n	8005a90 <LCD_ClearCursor+0x8c>
	for(i = 0; i < height; i++)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	230c      	movs	r3, #12
 8005ab6:	18fb      	adds	r3, r7, r3
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d3e4      	bcc.n	8005a8a <LCD_ClearCursor+0x86>
		}
	}
	GPIO_SetBits(LCD_PORT, CS_PIN);
 8005ac0:	2380      	movs	r3, #128	; 0x80
 8005ac2:	01db      	lsls	r3, r3, #7
 8005ac4:	4a0a      	ldr	r2, [pc, #40]	; (8005af0 <LCD_ClearCursor+0xec>)
 8005ac6:	0019      	movs	r1, r3
 8005ac8:	0010      	movs	r0, r2
 8005aca:	f7fd fcf8 	bl	80034be <GPIO_SetBits>
	LCD_SetWindows(0, 0, lcddev.width - 1, lcddev.height - 1);
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <LCD_ClearCursor+0xf0>)
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <LCD_ClearCursor+0xf0>)
 8005ad8:	885b      	ldrh	r3, [r3, #2]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2100      	movs	r1, #0
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	f000 f94d 	bl	8005d80 <LCD_SetWindows>
}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	b006      	add	sp, #24
 8005aec:	bdb0      	pop	{r4, r5, r7, pc}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	48000400 	.word	0x48000400
 8005af4:	20000128 	.word	0x20000128

08005af8 <LCD_RESET>:
 * @brief	Reset LCD screen
 * @param	None
 * @retval	None
*/
void LCD_RESET(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
	GPIO_ResetBits(LCD_PORT, RST_PIN);
 8005afc:	2380      	movs	r3, #128	; 0x80
 8005afe:	019b      	lsls	r3, r3, #6
 8005b00:	4a0a      	ldr	r2, [pc, #40]	; (8005b2c <LCD_RESET+0x34>)
 8005b02:	0019      	movs	r1, r3
 8005b04:	0010      	movs	r0, r2
 8005b06:	f7fd fce9 	bl	80034dc <GPIO_ResetBits>
	delay_ms(100);
 8005b0a:	2064      	movs	r0, #100	; 0x64
 8005b0c:	f002 f8d2 	bl	8007cb4 <delay_ms>
	GPIO_SetBits(LCD_PORT, RST_PIN);
 8005b10:	2380      	movs	r3, #128	; 0x80
 8005b12:	019b      	lsls	r3, r3, #6
 8005b14:	4a05      	ldr	r2, [pc, #20]	; (8005b2c <LCD_RESET+0x34>)
 8005b16:	0019      	movs	r1, r3
 8005b18:	0010      	movs	r0, r2
 8005b1a:	f7fd fcd0 	bl	80034be <GPIO_SetBits>
	delay_ms(50);
 8005b1e:	2032      	movs	r0, #50	; 0x32
 8005b20:	f002 f8c8 	bl	8007cb4 <delay_ms>
}
 8005b24:	46c0      	nop			; (mov r8, r8)
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	46c0      	nop			; (mov r8, r8)
 8005b2c:	48000400 	.word	0x48000400

08005b30 <LCD_Init>:
 * @brief	Initialization LCD screen
 * @param	None
 * @retval	None
*/
void LCD_Init(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
	LCDSPI_Config();
 8005b34:	f000 fa1c 	bl	8005f70 <LCDSPI_Config>
	LCDGPIO_Config();
 8005b38:	f000 f9ee 	bl	8005f18 <LCDGPIO_Config>
 	LCD_RESET();
 8005b3c:	f7ff ffdc 	bl	8005af8 <LCD_RESET>

 	//*************2.2inch ILI9341****************//
	LCD_WR_REG(0xCF);
 8005b40:	20cf      	movs	r0, #207	; 0xcf
 8005b42:	f7ff fe47 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005b46:	2000      	movs	r0, #0
 8005b48:	f7ff fe6e 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0xD9); //C1
 8005b4c:	20d9      	movs	r0, #217	; 0xd9
 8005b4e:	f7ff fe6b 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8005b52:	2030      	movs	r0, #48	; 0x30
 8005b54:	f7ff fe68 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8005b58:	20ed      	movs	r0, #237	; 0xed
 8005b5a:	f7ff fe3b 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8005b5e:	2064      	movs	r0, #100	; 0x64
 8005b60:	f7ff fe62 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8005b64:	2003      	movs	r0, #3
 8005b66:	f7ff fe5f 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8005b6a:	2012      	movs	r0, #18
 8005b6c:	f7ff fe5c 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8005b70:	2081      	movs	r0, #129	; 0x81
 8005b72:	f7ff fe59 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8005b76:	20e8      	movs	r0, #232	; 0xe8
 8005b78:	f7ff fe2c 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8005b7c:	2085      	movs	r0, #133	; 0x85
 8005b7e:	f7ff fe53 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8005b82:	2010      	movs	r0, #16
 8005b84:	f7ff fe50 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8005b88:	207a      	movs	r0, #122	; 0x7a
 8005b8a:	f7ff fe4d 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8005b8e:	20cb      	movs	r0, #203	; 0xcb
 8005b90:	f7ff fe20 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8005b94:	2039      	movs	r0, #57	; 0x39
 8005b96:	f7ff fe47 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8005b9a:	202c      	movs	r0, #44	; 0x2c
 8005b9c:	f7ff fe44 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	f7ff fe41 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8005ba6:	2034      	movs	r0, #52	; 0x34
 8005ba8:	f7ff fe3e 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8005bac:	2002      	movs	r0, #2
 8005bae:	f7ff fe3b 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8005bb2:	20f7      	movs	r0, #247	; 0xf7
 8005bb4:	f7ff fe0e 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8005bb8:	2020      	movs	r0, #32
 8005bba:	f7ff fe35 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8005bbe:	20ea      	movs	r0, #234	; 0xea
 8005bc0:	f7ff fe08 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	f7ff fe2f 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8005bca:	2000      	movs	r0, #0
 8005bcc:	f7ff fe2c 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);  //Power control
 8005bd0:	20c0      	movs	r0, #192	; 0xc0
 8005bd2:	f7ff fdff 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x21); //VRH[5:0]  //1B
 8005bd6:	2021      	movs	r0, #33	; 0x21
 8005bd8:	f7ff fe26 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);  //Power control
 8005bdc:	20c1      	movs	r0, #193	; 0xc1
 8005bde:	f7ff fdf9 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x12); //SAP[2:0];BT[3:0] //01
 8005be2:	2012      	movs	r0, #18
 8005be4:	f7ff fe20 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);  //VCM control
 8005be8:	20c5      	movs	r0, #197	; 0xc5
 8005bea:	f7ff fdf3 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x39); //3F
 8005bee:	2039      	movs	r0, #57	; 0x39
 8005bf0:	f7ff fe1a 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x37); //3C
 8005bf4:	2037      	movs	r0, #55	; 0x37
 8005bf6:	f7ff fe17 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);  //VCM control2
 8005bfa:	20c7      	movs	r0, #199	; 0xc7
 8005bfc:	f7ff fdea 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0XAB); //B0
 8005c00:	20ab      	movs	r0, #171	; 0xab
 8005c02:	f7ff fe11 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0x36);  // Memory Access Control
 8005c06:	2036      	movs	r0, #54	; 0x36
 8005c08:	f7ff fde4 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x48);
 8005c0c:	2048      	movs	r0, #72	; 0x48
 8005c0e:	f7ff fe0b 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8005c12:	203a      	movs	r0, #58	; 0x3a
 8005c14:	f7ff fdde 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8005c18:	2055      	movs	r0, #85	; 0x55
 8005c1a:	f7ff fe05 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8005c1e:	20b1      	movs	r0, #177	; 0xb1
 8005c20:	f7ff fdd8 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005c24:	2000      	movs	r0, #0
 8005c26:	f7ff fdff 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x1B); //1A
 8005c2a:	201b      	movs	r0, #27
 8005c2c:	f7ff fdfc 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);  // Display Function Control
 8005c30:	20b6      	movs	r0, #182	; 0xb6
 8005c32:	f7ff fdcf 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8005c36:	200a      	movs	r0, #10
 8005c38:	f7ff fdf6 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8005c3c:	20a2      	movs	r0, #162	; 0xa2
 8005c3e:	f7ff fdf3 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);  // 3Gamma Function Disable
 8005c42:	20f2      	movs	r0, #242	; 0xf2
 8005c44:	f7ff fdc6 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005c48:	2000      	movs	r0, #0
 8005c4a:	f7ff fded 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0x26);  //Gamma curve selected
 8005c4e:	2026      	movs	r0, #38	; 0x26
 8005c50:	f7ff fdc0 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8005c54:	2001      	movs	r0, #1
 8005c56:	f7ff fde7 	bl	8005828 <LCD_WR_DATA>

	LCD_WR_REG(0xE0);  //Set Gamma
 8005c5a:	20e0      	movs	r0, #224	; 0xe0
 8005c5c:	f7ff fdba 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8005c60:	200f      	movs	r0, #15
 8005c62:	f7ff fde1 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x23);
 8005c66:	2023      	movs	r0, #35	; 0x23
 8005c68:	f7ff fdde 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x1F);
 8005c6c:	201f      	movs	r0, #31
 8005c6e:	f7ff fddb 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x0B);
 8005c72:	200b      	movs	r0, #11
 8005c74:	f7ff fdd8 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8005c78:	200e      	movs	r0, #14
 8005c7a:	f7ff fdd5 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8005c7e:	2008      	movs	r0, #8
 8005c80:	f7ff fdd2 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x4B);
 8005c84:	204b      	movs	r0, #75	; 0x4b
 8005c86:	f7ff fdcf 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0XA8);
 8005c8a:	20a8      	movs	r0, #168	; 0xa8
 8005c8c:	f7ff fdcc 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x3B);
 8005c90:	203b      	movs	r0, #59	; 0x3b
 8005c92:	f7ff fdc9 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8005c96:	200a      	movs	r0, #10
 8005c98:	f7ff fdc6 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x14);
 8005c9c:	2014      	movs	r0, #20
 8005c9e:	f7ff fdc3 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8005ca2:	2006      	movs	r0, #6
 8005ca4:	f7ff fdc0 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8005ca8:	2010      	movs	r0, #16
 8005caa:	f7ff fdbd 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 8005cae:	2009      	movs	r0, #9
 8005cb0:	f7ff fdba 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	f7ff fdb7 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0XE1); //Set Gamma
 8005cba:	20e1      	movs	r0, #225	; 0xe1
 8005cbc:	f7ff fd8a 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f7ff fdb1 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x1C);
 8005cc6:	201c      	movs	r0, #28
 8005cc8:	f7ff fdae 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x20);
 8005ccc:	2020      	movs	r0, #32
 8005cce:	f7ff fdab 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x04);
 8005cd2:	2004      	movs	r0, #4
 8005cd4:	f7ff fda8 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8005cd8:	2010      	movs	r0, #16
 8005cda:	f7ff fda5 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8005cde:	2008      	movs	r0, #8
 8005ce0:	f7ff fda2 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8005ce4:	2034      	movs	r0, #52	; 0x34
 8005ce6:	f7ff fd9f 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x47);
 8005cea:	2047      	movs	r0, #71	; 0x47
 8005cec:	f7ff fd9c 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x44);
 8005cf0:	2044      	movs	r0, #68	; 0x44
 8005cf2:	f7ff fd99 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8005cf6:	2005      	movs	r0, #5
 8005cf8:	f7ff fd96 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x0B);
 8005cfc:	200b      	movs	r0, #11
 8005cfe:	f7ff fd93 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 8005d02:	2009      	movs	r0, #9
 8005d04:	f7ff fd90 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x2F);
 8005d08:	202f      	movs	r0, #47	; 0x2f
 8005d0a:	f7ff fd8d 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x36);
 8005d0e:	2036      	movs	r0, #54	; 0x36
 8005d10:	f7ff fd8a 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8005d14:	200f      	movs	r0, #15
 8005d16:	f7ff fd87 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8005d1a:	202b      	movs	r0, #43	; 0x2b
 8005d1c:	f7ff fd5a 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005d20:	2000      	movs	r0, #0
 8005d22:	f7ff fd81 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8005d26:	2000      	movs	r0, #0
 8005d28:	f7ff fd7e 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	f7ff fd7b 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8005d32:	203f      	movs	r0, #63	; 0x3f
 8005d34:	f7ff fd78 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8005d38:	202a      	movs	r0, #42	; 0x2a
 8005d3a:	f7ff fd4b 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8005d3e:	2000      	movs	r0, #0
 8005d40:	f7ff fd72 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8005d44:	2000      	movs	r0, #0
 8005d46:	f7ff fd6f 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f7ff fd6c 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8005d50:	20ef      	movs	r0, #239	; 0xef
 8005d52:	f7ff fd69 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8005d56:	2011      	movs	r0, #17
 8005d58:	f7ff fd3c 	bl	80057d4 <LCD_WR_REG>
	delay_ms(120);
 8005d5c:	2078      	movs	r0, #120	; 0x78
 8005d5e:	f001 ffa9 	bl	8007cb4 <delay_ms>
	LCD_WR_REG(0x29); //Display on
 8005d62:	2029      	movs	r0, #41	; 0x29
 8005d64:	f7ff fd36 	bl	80057d4 <LCD_WR_REG>

	LCD_direction(USE_HORIZONTAL);
 8005d68:	2000      	movs	r0, #0
 8005d6a:	f000 f881 	bl	8005e70 <LCD_direction>
	LCD_Clear(WHITE);
 8005d6e:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <LCD_Init+0x24c>)
 8005d70:	0018      	movs	r0, r3
 8005d72:	f7ff fdfb 	bl	800596c <LCD_Clear>
}
 8005d76:	46c0      	nop			; (mov r8, r8)
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	0000ffff 	.word	0x0000ffff

08005d80 <LCD_SetWindows>:
			yEnd:the endning y coordinate of the LCD display window
 * @retval	None
*/
void LCD_SetWindows(uint16_t xStar, uint16_t yStar, \
					uint16_t xEnd,  uint16_t yEnd)
{
 8005d80:	b5b0      	push	{r4, r5, r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	0005      	movs	r5, r0
 8005d88:	000c      	movs	r4, r1
 8005d8a:	0010      	movs	r0, r2
 8005d8c:	0019      	movs	r1, r3
 8005d8e:	1dbb      	adds	r3, r7, #6
 8005d90:	1c2a      	adds	r2, r5, #0
 8005d92:	801a      	strh	r2, [r3, #0]
 8005d94:	1d3b      	adds	r3, r7, #4
 8005d96:	1c22      	adds	r2, r4, #0
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	1cbb      	adds	r3, r7, #2
 8005d9c:	1c02      	adds	r2, r0, #0
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	003b      	movs	r3, r7
 8005da2:	1c0a      	adds	r2, r1, #0
 8005da4:	801a      	strh	r2, [r3, #0]
	LCD_WR_REG(lcddev.setxcmd);
 8005da6:	4b25      	ldr	r3, [pc, #148]	; (8005e3c <LCD_SetWindows+0xbc>)
 8005da8:	895b      	ldrh	r3, [r3, #10]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	0018      	movs	r0, r3
 8005dae:	f7ff fd11 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(xStar >> 8);
 8005db2:	1dbb      	adds	r3, r7, #6
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	0a1b      	lsrs	r3, r3, #8
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f7ff fd33 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF & xStar);
 8005dc2:	1dbb      	adds	r3, r7, #6
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f7ff fd2d 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd >> 8);
 8005dce:	1cbb      	adds	r3, r7, #2
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	0a1b      	lsrs	r3, r3, #8
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f7ff fd25 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF & xEnd);
 8005dde:	1cbb      	adds	r3, r7, #2
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	0018      	movs	r0, r3
 8005de6:	f7ff fd1f 	bl	8005828 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);
 8005dea:	4b14      	ldr	r3, [pc, #80]	; (8005e3c <LCD_SetWindows+0xbc>)
 8005dec:	899b      	ldrh	r3, [r3, #12]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	0018      	movs	r0, r3
 8005df2:	f7ff fcef 	bl	80057d4 <LCD_WR_REG>
	LCD_WR_DATA(yStar >> 8);
 8005df6:	1d3b      	adds	r3, r7, #4
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	0018      	movs	r0, r3
 8005e02:	f7ff fd11 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF & yStar);
 8005e06:	1d3b      	adds	r3, r7, #4
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f7ff fd0b 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd >> 8);
 8005e12:	003b      	movs	r3, r7
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f7ff fd03 	bl	8005828 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF & yEnd);
 8005e22:	003b      	movs	r3, r7
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7ff fcfd 	bl	8005828 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();
 8005e2e:	f7ff fd3d 	bl	80058ac <LCD_WriteRAM_Prepare>
}
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b002      	add	sp, #8
 8005e38:	bdb0      	pop	{r4, r5, r7, pc}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	20000128 	.word	0x20000128

08005e40 <LCD_SetCursor>:
 * @param	Xpos:the  x coordinate of the pixel
			Ypos:the  y coordinate of the pixel
 * @retval	None
*/
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8005e40:	b590      	push	{r4, r7, lr}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	0002      	movs	r2, r0
 8005e48:	1dbb      	adds	r3, r7, #6
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	1d3b      	adds	r3, r7, #4
 8005e4e:	1c0a      	adds	r2, r1, #0
 8005e50:	801a      	strh	r2, [r3, #0]
	LCD_SetWindows(Xpos, Ypos, Xpos, Ypos);
 8005e52:	1d3b      	adds	r3, r7, #4
 8005e54:	881c      	ldrh	r4, [r3, #0]
 8005e56:	1dbb      	adds	r3, r7, #6
 8005e58:	881a      	ldrh	r2, [r3, #0]
 8005e5a:	1d3b      	adds	r3, r7, #4
 8005e5c:	8819      	ldrh	r1, [r3, #0]
 8005e5e:	1dbb      	adds	r3, r7, #6
 8005e60:	8818      	ldrh	r0, [r3, #0]
 8005e62:	0023      	movs	r3, r4
 8005e64:	f7ff ff8c 	bl	8005d80 <LCD_SetWindows>
}
 8005e68:	46c0      	nop			; (mov r8, r8)
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b003      	add	sp, #12
 8005e6e:	bd90      	pop	{r4, r7, pc}

08005e70 <LCD_direction>:
					   2-180 degree
					   3-270 degree
 * @retval	None
*/
void LCD_direction(uint8_t direction)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	0002      	movs	r2, r0
 8005e78:	1dfb      	adds	r3, r7, #7
 8005e7a:	701a      	strb	r2, [r3, #0]
	lcddev.setxcmd = 0x2A;
 8005e7c:	4b25      	ldr	r3, [pc, #148]	; (8005f14 <LCD_direction+0xa4>)
 8005e7e:	222a      	movs	r2, #42	; 0x2a
 8005e80:	815a      	strh	r2, [r3, #10]
	lcddev.setycmd = 0x2B;
 8005e82:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <LCD_direction+0xa4>)
 8005e84:	222b      	movs	r2, #43	; 0x2b
 8005e86:	819a      	strh	r2, [r3, #12]
	lcddev.wramcmd = 0x2C;
 8005e88:	4b22      	ldr	r3, [pc, #136]	; (8005f14 <LCD_direction+0xa4>)
 8005e8a:	222c      	movs	r2, #44	; 0x2c
 8005e8c:	811a      	strh	r2, [r3, #8]

	switch(direction){
 8005e8e:	1dfb      	adds	r3, r7, #7
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d02c      	beq.n	8005ef0 <LCD_direction+0x80>
 8005e96:	dc37      	bgt.n	8005f08 <LCD_direction+0x98>
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d01d      	beq.n	8005ed8 <LCD_direction+0x68>
 8005e9c:	dc34      	bgt.n	8005f08 <LCD_direction+0x98>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <LCD_direction+0x38>
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d00c      	beq.n	8005ec0 <LCD_direction+0x50>
			lcddev.width = LCD_H;
			lcddev.height = LCD_W;
			LCD_WriteReg(0x36, (1 << 3) | (1 << 7) | (1 <<5 ));// BGR == 1, MY == 1, MX == 0, MV == 1
		    break;
		default:
			break;
 8005ea6:	e02f      	b.n	8005f08 <LCD_direction+0x98>
			lcddev.width = LCD_W;
 8005ea8:	4b1a      	ldr	r3, [pc, #104]	; (8005f14 <LCD_direction+0xa4>)
 8005eaa:	22f0      	movs	r2, #240	; 0xf0
 8005eac:	801a      	strh	r2, [r3, #0]
			lcddev.height = LCD_H;
 8005eae:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <LCD_direction+0xa4>)
 8005eb0:	22a0      	movs	r2, #160	; 0xa0
 8005eb2:	0052      	lsls	r2, r2, #1
 8005eb4:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36, (1 << 3) | (0 << 6)| (0 << 7));// BGR == 1, MY == 0, MX == 0, MV == 0
 8005eb6:	2108      	movs	r1, #8
 8005eb8:	2036      	movs	r0, #54	; 0x36
 8005eba:	f7ff fcdf 	bl	800587c <LCD_WriteReg>
		    break;
 8005ebe:	e024      	b.n	8005f0a <LCD_direction+0x9a>
			lcddev.width = LCD_H;
 8005ec0:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <LCD_direction+0xa4>)
 8005ec2:	22a0      	movs	r2, #160	; 0xa0
 8005ec4:	0052      	lsls	r2, r2, #1
 8005ec6:	801a      	strh	r2, [r3, #0]
			lcddev.height = LCD_W;
 8005ec8:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <LCD_direction+0xa4>)
 8005eca:	22f0      	movs	r2, #240	; 0xf0
 8005ecc:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36, (1 << 3) | (0 << 7)| (1 << 6) | (1 << 5));// BGR == 1, MY == 1, MX == 0, MV == 1
 8005ece:	2168      	movs	r1, #104	; 0x68
 8005ed0:	2036      	movs	r0, #54	; 0x36
 8005ed2:	f7ff fcd3 	bl	800587c <LCD_WriteReg>
		    break;
 8005ed6:	e018      	b.n	8005f0a <LCD_direction+0x9a>
			lcddev.width = LCD_W;
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <LCD_direction+0xa4>)
 8005eda:	22f0      	movs	r2, #240	; 0xf0
 8005edc:	801a      	strh	r2, [r3, #0]
			lcddev.height = LCD_H;
 8005ede:	4b0d      	ldr	r3, [pc, #52]	; (8005f14 <LCD_direction+0xa4>)
 8005ee0:	22a0      	movs	r2, #160	; 0xa0
 8005ee2:	0052      	lsls	r2, r2, #1
 8005ee4:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36, (1 << 3) | (1 << 6) | (1 << 7));// BGR == 1, MY == 0, MX == 0, MV == 0
 8005ee6:	21c8      	movs	r1, #200	; 0xc8
 8005ee8:	2036      	movs	r0, #54	; 0x36
 8005eea:	f7ff fcc7 	bl	800587c <LCD_WriteReg>
		    break;
 8005eee:	e00c      	b.n	8005f0a <LCD_direction+0x9a>
			lcddev.width = LCD_H;
 8005ef0:	4b08      	ldr	r3, [pc, #32]	; (8005f14 <LCD_direction+0xa4>)
 8005ef2:	22a0      	movs	r2, #160	; 0xa0
 8005ef4:	0052      	lsls	r2, r2, #1
 8005ef6:	801a      	strh	r2, [r3, #0]
			lcddev.height = LCD_W;
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <LCD_direction+0xa4>)
 8005efa:	22f0      	movs	r2, #240	; 0xf0
 8005efc:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36, (1 << 3) | (1 << 7) | (1 <<5 ));// BGR == 1, MY == 1, MX == 0, MV == 1
 8005efe:	21a8      	movs	r1, #168	; 0xa8
 8005f00:	2036      	movs	r0, #54	; 0x36
 8005f02:	f7ff fcbb 	bl	800587c <LCD_WriteReg>
		    break;
 8005f06:	e000      	b.n	8005f0a <LCD_direction+0x9a>
			break;
 8005f08:	46c0      	nop			; (mov r8, r8)
	}
}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	b002      	add	sp, #8
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	20000128 	.word	0x20000128

08005f18 <LCDGPIO_Config>:
 * @brief	Initialization LCD screen GPIO
 * @param	None
 * @retval	None
*/
static void LCDGPIO_Config(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHBPeriphClockCmd(LCD_RCC, ENABLE);
 8005f1e:	2380      	movs	r3, #128	; 0x80
 8005f20:	02db      	lsls	r3, r3, #11
 8005f22:	2101      	movs	r1, #1
 8005f24:	0018      	movs	r0, r3
 8005f26:	f7fd fd0d 	bl	8003944 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = RST_PIN | DC_PIN | CS_PIN;
 8005f2a:	003b      	movs	r3, r7
 8005f2c:	22e0      	movs	r2, #224	; 0xe0
 8005f2e:	01d2      	lsls	r2, r2, #7
 8005f30:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8005f32:	003b      	movs	r3, r7
 8005f34:	2201      	movs	r2, #1
 8005f36:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005f38:	003b      	movs	r3, r7
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005f3e:	003b      	movs	r3, r7
 8005f40:	2200      	movs	r2, #0
 8005f42:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8005f44:	003b      	movs	r3, r7
 8005f46:	2200      	movs	r2, #0
 8005f48:	71da      	strb	r2, [r3, #7]
	GPIO_Init(LCD_PORT, &GPIO_InitStructure);
 8005f4a:	003b      	movs	r3, r7
 8005f4c:	4a07      	ldr	r2, [pc, #28]	; (8005f6c <LCDGPIO_Config+0x54>)
 8005f4e:	0019      	movs	r1, r3
 8005f50:	0010      	movs	r0, r2
 8005f52:	f7fd f9fd 	bl	8003350 <GPIO_Init>

	GPIO_SetBits(LCD_PORT, CS_PIN);
 8005f56:	2380      	movs	r3, #128	; 0x80
 8005f58:	01db      	lsls	r3, r3, #7
 8005f5a:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <LCDGPIO_Config+0x54>)
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	0010      	movs	r0, r2
 8005f60:	f7fd faad 	bl	80034be <GPIO_SetBits>
}
 8005f64:	46c0      	nop			; (mov r8, r8)
 8005f66:	46bd      	mov	sp, r7
 8005f68:	b002      	add	sp, #8
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	48000400 	.word	0x48000400

08005f70 <LCDSPI_Config>:
 * @brief  Initializes peripheral SPI
 * @param  None
 * @retval None
 */
static void LCDSPI_Config(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	SPI_InitTypeDef SPI_InitStructure;

	/* Enable the SPI periph */
	RCC_APB2PeriphClockCmd(LCD_SPI_RCC, ENABLE);
 8005f76:	2380      	movs	r3, #128	; 0x80
 8005f78:	015b      	lsls	r3, r3, #5
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f7fd fd01 	bl	8003984 <RCC_APB2PeriphClockCmd>

	/* Enable SCK, MOSI, MISO and NSS GPIO clocks */
	RCC_AHBPeriphClockCmd(LCD_GPIO_RCC, ENABLE);
 8005f82:	2380      	movs	r3, #128	; 0x80
 8005f84:	029b      	lsls	r3, r3, #10
 8005f86:	2101      	movs	r1, #1
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f7fd fcdb 	bl	8003944 <RCC_AHBPeriphClockCmd>

	// Connect LCD_SPI pins to SPI Alternate Function
	GPIO_PinAFConfig(LCD_SPI_PORT, GPIO_PinSource5, LCD_SPI_AF);
 8005f8e:	2390      	movs	r3, #144	; 0x90
 8005f90:	05db      	lsls	r3, r3, #23
 8005f92:	2200      	movs	r2, #0
 8005f94:	2105      	movs	r1, #5
 8005f96:	0018      	movs	r0, r3
 8005f98:	f7fd faaf 	bl	80034fa <GPIO_PinAFConfig>
	GPIO_PinAFConfig(LCD_SPI_PORT, GPIO_PinSource6, LCD_SPI_AF);
 8005f9c:	2390      	movs	r3, #144	; 0x90
 8005f9e:	05db      	lsls	r3, r3, #23
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2106      	movs	r1, #6
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f7fd faa8 	bl	80034fa <GPIO_PinAFConfig>
	GPIO_PinAFConfig(LCD_SPI_PORT, GPIO_PinSource7, LCD_SPI_AF);
 8005faa:	2390      	movs	r3, #144	; 0x90
 8005fac:	05db      	lsls	r3, r3, #23
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2107      	movs	r1, #7
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f7fd faa1 	bl	80034fa <GPIO_PinAFConfig>

	// Initializes GPIO Use For SPI
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8005fb8:	2118      	movs	r1, #24
 8005fba:	187b      	adds	r3, r7, r1
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005fc0:	187b      	adds	r3, r7, r1
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8005fc6:	187b      	adds	r3, r7, r1
 8005fc8:	2200      	movs	r2, #0
 8005fca:	71da      	strb	r2, [r3, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005fcc:	187b      	adds	r3, r7, r1
 8005fce:	2203      	movs	r2, #3
 8005fd0:	715a      	strb	r2, [r3, #5]

	GPIO_InitStructure.GPIO_Pin = LCD_SPI_GPIO_SCK | LCD_SPI_GPIO_MOSI | LCD_SPI_GPIO_MISO;
 8005fd2:	187b      	adds	r3, r7, r1
 8005fd4:	22e0      	movs	r2, #224	; 0xe0
 8005fd6:	601a      	str	r2, [r3, #0]
	GPIO_Init(LCD_SPI_PORT, &GPIO_InitStructure);
 8005fd8:	187a      	adds	r2, r7, r1
 8005fda:	2390      	movs	r3, #144	; 0x90
 8005fdc:	05db      	lsls	r3, r3, #23
 8005fde:	0011      	movs	r1, r2
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f7fd f9b5 	bl	8003350 <GPIO_Init>

	/* SPI configuration -----------------------------------------------------*/
	SPI_I2S_DeInit(LCD_SPI);
 8005fe6:	4b18      	ldr	r3, [pc, #96]	; (8006048 <LCDSPI_Config+0xd8>)
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f7fd fd2b 	bl	8003a44 <SPI_I2S_DeInit>

	// Set to full duplex mode, separate MOSI and MISO lines
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8005fee:	1d3b      	adds	r3, r7, #4
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	801a      	strh	r2, [r3, #0]

	// Transmit in master mode
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	2282      	movs	r2, #130	; 0x82
 8005ff8:	0052      	lsls	r2, r2, #1
 8005ffa:	805a      	strh	r2, [r3, #2]

	// One packet of data is 8 bits wide
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8005ffc:	1d3b      	adds	r3, r7, #4
 8005ffe:	22e0      	movs	r2, #224	; 0xe0
 8006000:	00d2      	lsls	r2, r2, #3
 8006002:	809a      	strh	r2, [r3, #4]

	// Clock is low when idle
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8006004:	1d3b      	adds	r3, r7, #4
 8006006:	2200      	movs	r2, #0
 8006008:	80da      	strh	r2, [r3, #6]

	// Data sampled at first edge
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 800600a:	1d3b      	adds	r3, r7, #4
 800600c:	2200      	movs	r2, #0
 800600e:	811a      	strh	r2, [r3, #8]

	// Set NSS us software
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8006010:	1d3b      	adds	r3, r7, #4
 8006012:	2280      	movs	r2, #128	; 0x80
 8006014:	0092      	lsls	r2, r2, #2
 8006016:	815a      	strh	r2, [r3, #10]

	// SPI frequency is APB2 frequency / 2
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8006018:	1d3b      	adds	r3, r7, #4
 800601a:	2208      	movs	r2, #8
 800601c:	819a      	strh	r2, [r3, #12]

	// Data is transmitted MSB first
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800601e:	1d3b      	adds	r3, r7, #4
 8006020:	2200      	movs	r2, #0
 8006022:	81da      	strh	r2, [r3, #14]

	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8006024:	1d3b      	adds	r3, r7, #4
 8006026:	2207      	movs	r2, #7
 8006028:	821a      	strh	r2, [r3, #16]

	SPI_Init(LCD_SPI, &SPI_InitStructure);
 800602a:	1d3b      	adds	r3, r7, #4
 800602c:	4a06      	ldr	r2, [pc, #24]	; (8006048 <LCDSPI_Config+0xd8>)
 800602e:	0019      	movs	r1, r3
 8006030:	0010      	movs	r0, r2
 8006032:	f7fd fd35 	bl	8003aa0 <SPI_Init>

	// Enable LCD_SPI
	SPI_Cmd(LCD_SPI, ENABLE);
 8006036:	4b04      	ldr	r3, [pc, #16]	; (8006048 <LCDSPI_Config+0xd8>)
 8006038:	2101      	movs	r1, #1
 800603a:	0018      	movs	r0, r3
 800603c:	f7fd fda2 	bl	8003b84 <SPI_Cmd>
}
 8006040:	46c0      	nop			; (mov r8, r8)
 8006042:	46bd      	mov	sp, r7
 8006044:	b008      	add	sp, #32
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40013000 	.word	0x40013000

0800604c <LCDSPI_WriteByte>:
 * @brief  Write a byte of data using STM32's hardware SPI
 * @param  None
 * @retval None
 */
static uint8_t LCDSPI_WriteByte(SPI_TypeDef* SPIx, uint8_t data)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	000a      	movs	r2, r1
 8006056:	1cfb      	adds	r3, r7, #3
 8006058:	701a      	strb	r2, [r3, #0]
	/* Wait until the transmit buffer is empty */
//	while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) != SET)
//	{
//	}
	/* Send the byte */
	SPI_SendData8(LCD_SPI, data);
 800605a:	1cfb      	adds	r3, r7, #3
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	4a05      	ldr	r2, [pc, #20]	; (8006074 <LCDSPI_WriteByte+0x28>)
 8006060:	0019      	movs	r1, r3
 8006062:	0010      	movs	r0, r2
 8006064:	f7fd fdae 	bl	8003bc4 <SPI_SendData8>
//
//	while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
//	{
//	}

	return 1;
 8006068:	2301      	movs	r3, #1
}
 800606a:	0018      	movs	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	b002      	add	sp, #8
 8006070:	bd80      	pop	{r7, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	40013000 	.word	0x40013000

08006078 <LedControl_Init>:
 * @brief  Initializes module led
 * @param  None
 * @retval None
 */
void
LedControl_Init(void) {
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
	// Initialize pins GPIO led
	LEDGPIO_Config();
 800607c:	f000 f918 	bl	80062b0 <LEDGPIO_Config>
}
 8006080:	46c0      	nop			; (mov r8, r8)
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <LedControl_SetColorIndividual>:
void
LedControl_SetColorIndividual(
	uint8_t led_id,
	led_color_t led_color,
	uint8_t led_level
) {
 8006088:	b590      	push	{r4, r7, lr}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	0004      	movs	r4, r0
 8006090:	0008      	movs	r0, r1
 8006092:	0011      	movs	r1, r2
 8006094:	1dfb      	adds	r3, r7, #7
 8006096:	1c22      	adds	r2, r4, #0
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	1dbb      	adds	r3, r7, #6
 800609c:	1c02      	adds	r2, r0, #0
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	1d7b      	adds	r3, r7, #5
 80060a2:	1c0a      	adds	r2, r1, #0
 80060a4:	701a      	strb	r2, [r3, #0]
    if ((led_id >= NUM_OF_LED) || !isTypeLED(led_color) || (led_level > 100))
 80060a6:	1dfb      	adds	r3, r7, #7
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d161      	bne.n	8006172 <LedControl_SetColorIndividual+0xea>
 80060ae:	1dbb      	adds	r3, r7, #6
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <LedControl_SetColorIndividual+0x3e>
 80060b6:	1dbb      	adds	r3, r7, #6
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d003      	beq.n	80060c6 <LedControl_SetColorIndividual+0x3e>
 80060be:	1dbb      	adds	r3, r7, #6
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d155      	bne.n	8006172 <LedControl_SetColorIndividual+0xea>
 80060c6:	1d7b      	adds	r3, r7, #5
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b64      	cmp	r3, #100	; 0x64
 80060cc:	d851      	bhi.n	8006172 <LedControl_SetColorIndividual+0xea>
        return;
    
    // Get brightness current
    if (led_level == 0)
 80060ce:	1d7b      	adds	r3, r7, #5
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d103      	bne.n	80060de <LedControl_SetColorIndividual+0x56>
    {
    	g_brightnessLed = 100;
 80060d6:	4b29      	ldr	r3, [pc, #164]	; (800617c <LedControl_SetColorIndividual+0xf4>)
 80060d8:	2264      	movs	r2, #100	; 0x64
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	e003      	b.n	80060e6 <LedControl_SetColorIndividual+0x5e>
    }
    else
    {
    	g_brightnessLed = led_level;
 80060de:	4b27      	ldr	r3, [pc, #156]	; (800617c <LedControl_SetColorIndividual+0xf4>)
 80060e0:	1d7a      	adds	r2, r7, #5
 80060e2:	7812      	ldrb	r2, [r2, #0]
 80060e4:	701a      	strb	r2, [r3, #0]
    }

    if (led_id == LED_KIT_ID)
 80060e6:	1dfb      	adds	r3, r7, #7
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d142      	bne.n	8006174 <LedControl_SetColorIndividual+0xec>
	{
    	if (led_color == LED_COLOR_RED)
 80060ee:	1dbb      	adds	r3, r7, #6
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d115      	bne.n	8006122 <LedControl_SetColorIndividual+0x9a>
    	{
    		if (led_level != 0)
 80060f6:	1d7b      	adds	r3, r7, #5
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d008      	beq.n	8006110 <LedControl_SetColorIndividual+0x88>
			{
				GPIO_SetBits(LED_RED_PORT, LED_RED_PIN);
 80060fe:	2380      	movs	r3, #128	; 0x80
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	2390      	movs	r3, #144	; 0x90
 8006104:	05db      	lsls	r3, r3, #23
 8006106:	0011      	movs	r1, r2
 8006108:	0018      	movs	r0, r3
 800610a:	f7fd f9d8 	bl	80034be <GPIO_SetBits>
 800610e:	e031      	b.n	8006174 <LedControl_SetColorIndividual+0xec>
			}
			else
			{
				GPIO_ResetBits(LED_RED_PORT, LED_RED_PIN);
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	2390      	movs	r3, #144	; 0x90
 8006116:	05db      	lsls	r3, r3, #23
 8006118:	0011      	movs	r1, r2
 800611a:	0018      	movs	r0, r3
 800611c:	f7fd f9de 	bl	80034dc <GPIO_ResetBits>
 8006120:	e028      	b.n	8006174 <LedControl_SetColorIndividual+0xec>
			}
    	}
    	else if (led_color == LED_COLOR_GREEN)
 8006122:	1dbb      	adds	r3, r7, #6
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d10f      	bne.n	800614a <LedControl_SetColorIndividual+0xc2>
    	{
    		if (led_level != 0)
 800612a:	1d7b      	adds	r3, r7, #5
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d005      	beq.n	800613e <LedControl_SetColorIndividual+0xb6>
			{
				GPIO_SetBits(LED_GREEN_PORT, LED_GREEN_PIN);
 8006132:	4b13      	ldr	r3, [pc, #76]	; (8006180 <LedControl_SetColorIndividual+0xf8>)
 8006134:	2108      	movs	r1, #8
 8006136:	0018      	movs	r0, r3
 8006138:	f7fd f9c1 	bl	80034be <GPIO_SetBits>
 800613c:	e01a      	b.n	8006174 <LedControl_SetColorIndividual+0xec>
			}
			else
			{
				GPIO_ResetBits(LED_GREEN_PORT, LED_GREEN_PIN);
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <LedControl_SetColorIndividual+0xf8>)
 8006140:	2108      	movs	r1, #8
 8006142:	0018      	movs	r0, r3
 8006144:	f7fd f9ca 	bl	80034dc <GPIO_ResetBits>
 8006148:	e014      	b.n	8006174 <LedControl_SetColorIndividual+0xec>
			}
    	}
    	else /* (led_color == LED_COLOR_BLUE) */
    	{
    		if (led_level != 0)
 800614a:	1d7b      	adds	r3, r7, #5
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <LedControl_SetColorIndividual+0xda>
			{
				GPIO_SetBits(LED_BLUE_PORT, LED_BLUE_PIN);
 8006152:	2380      	movs	r3, #128	; 0x80
 8006154:	019b      	lsls	r3, r3, #6
 8006156:	4a0b      	ldr	r2, [pc, #44]	; (8006184 <LedControl_SetColorIndividual+0xfc>)
 8006158:	0019      	movs	r1, r3
 800615a:	0010      	movs	r0, r2
 800615c:	f7fd f9af 	bl	80034be <GPIO_SetBits>
 8006160:	e008      	b.n	8006174 <LedControl_SetColorIndividual+0xec>
			}
			else
			{
				GPIO_ResetBits(LED_BLUE_PORT, LED_BLUE_PIN);
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	019b      	lsls	r3, r3, #6
 8006166:	4a07      	ldr	r2, [pc, #28]	; (8006184 <LedControl_SetColorIndividual+0xfc>)
 8006168:	0019      	movs	r1, r3
 800616a:	0010      	movs	r0, r2
 800616c:	f7fd f9b6 	bl	80034dc <GPIO_ResetBits>
 8006170:	e000      	b.n	8006174 <LedControl_SetColorIndividual+0xec>
        return;
 8006172:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 8006174:	46bd      	mov	sp, r7
 8006176:	b003      	add	sp, #12
 8006178:	bd90      	pop	{r4, r7, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	20000138 	.word	0x20000138
 8006180:	48000400 	.word	0x48000400
 8006184:	48000800 	.word	0x48000800

08006188 <LedControl_SetColorGeneral>:
void
LedControl_SetColorGeneral(
	uint8_t led_id,
	led_color_t led_color,
	uint8_t led_level
) {
 8006188:	b590      	push	{r4, r7, lr}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	0004      	movs	r4, r0
 8006190:	0008      	movs	r0, r1
 8006192:	0011      	movs	r1, r2
 8006194:	1dfb      	adds	r3, r7, #7
 8006196:	1c22      	adds	r2, r4, #0
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	1dbb      	adds	r3, r7, #6
 800619c:	1c02      	adds	r2, r0, #0
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	1d7b      	adds	r3, r7, #5
 80061a2:	1c0a      	adds	r2, r1, #0
 80061a4:	701a      	strb	r2, [r3, #0]
    switch (led_color) {
 80061a6:	1dbb      	adds	r3, r7, #6
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d878      	bhi.n	80062a0 <LedControl_SetColorGeneral+0x118>
 80061ae:	009a      	lsls	r2, r3, #2
 80061b0:	4b3e      	ldr	r3, [pc, #248]	; (80062ac <LedControl_SetColorGeneral+0x124>)
 80061b2:	18d3      	adds	r3, r2, r3
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	469f      	mov	pc, r3
        case LED_COLOR_RED:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, led_level);
 80061b8:	1d7b      	adds	r3, r7, #5
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	1dfb      	adds	r3, r7, #7
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2100      	movs	r1, #0
 80061c2:	0018      	movs	r0, r3
 80061c4:	f7ff ff60 	bl	8006088 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 80061c8:	1dfb      	adds	r3, r7, #7
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2200      	movs	r2, #0
 80061ce:	2102      	movs	r1, #2
 80061d0:	0018      	movs	r0, r3
 80061d2:	f7ff ff59 	bl	8006088 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, 0);
 80061d6:	1dfb      	adds	r3, r7, #7
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2200      	movs	r2, #0
 80061dc:	2101      	movs	r1, #1
 80061de:	0018      	movs	r0, r3
 80061e0:	f7ff ff52 	bl	8006088 <LedControl_SetColorIndividual>
            break;
 80061e4:	e05d      	b.n	80062a2 <LedControl_SetColorGeneral+0x11a>

        case LED_COLOR_GREEN:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, led_level);
 80061e6:	1d7b      	adds	r3, r7, #5
 80061e8:	781a      	ldrb	r2, [r3, #0]
 80061ea:	1dfb      	adds	r3, r7, #7
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2101      	movs	r1, #1
 80061f0:	0018      	movs	r0, r3
 80061f2:	f7ff ff49 	bl	8006088 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, 0);
 80061f6:	1dfb      	adds	r3, r7, #7
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2200      	movs	r2, #0
 80061fc:	2100      	movs	r1, #0
 80061fe:	0018      	movs	r0, r3
 8006200:	f7ff ff42 	bl	8006088 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 8006204:	1dfb      	adds	r3, r7, #7
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2200      	movs	r2, #0
 800620a:	2102      	movs	r1, #2
 800620c:	0018      	movs	r0, r3
 800620e:	f7ff ff3b 	bl	8006088 <LedControl_SetColorIndividual>
			break;
 8006212:	e046      	b.n	80062a2 <LedControl_SetColorGeneral+0x11a>

        case LED_COLOR_BLUE:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, led_level);
 8006214:	1d7b      	adds	r3, r7, #5
 8006216:	781a      	ldrb	r2, [r3, #0]
 8006218:	1dfb      	adds	r3, r7, #7
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2102      	movs	r1, #2
 800621e:	0018      	movs	r0, r3
 8006220:	f7ff ff32 	bl	8006088 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, 0);
 8006224:	1dfb      	adds	r3, r7, #7
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2200      	movs	r2, #0
 800622a:	2100      	movs	r1, #0
 800622c:	0018      	movs	r0, r3
 800622e:	f7ff ff2b 	bl	8006088 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, 0);
 8006232:	1dfb      	adds	r3, r7, #7
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2200      	movs	r2, #0
 8006238:	2101      	movs	r1, #1
 800623a:	0018      	movs	r0, r3
 800623c:	f7ff ff24 	bl	8006088 <LedControl_SetColorIndividual>
            break;
 8006240:	e02f      	b.n	80062a2 <LedControl_SetColorGeneral+0x11a>

        case LED_COLOR_WHITE:
        	LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, led_level);
 8006242:	1d7b      	adds	r3, r7, #5
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	1dfb      	adds	r3, r7, #7
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2102      	movs	r1, #2
 800624c:	0018      	movs	r0, r3
 800624e:	f7ff ff1b 	bl	8006088 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_RED, led_level);
 8006252:	1d7b      	adds	r3, r7, #5
 8006254:	781a      	ldrb	r2, [r3, #0]
 8006256:	1dfb      	adds	r3, r7, #7
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2100      	movs	r1, #0
 800625c:	0018      	movs	r0, r3
 800625e:	f7ff ff13 	bl	8006088 <LedControl_SetColorIndividual>
        	LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, led_level);
 8006262:	1d7b      	adds	r3, r7, #5
 8006264:	781a      	ldrb	r2, [r3, #0]
 8006266:	1dfb      	adds	r3, r7, #7
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2101      	movs	r1, #1
 800626c:	0018      	movs	r0, r3
 800626e:	f7ff ff0b 	bl	8006088 <LedControl_SetColorIndividual>
        	break;
 8006272:	e016      	b.n	80062a2 <LedControl_SetColorGeneral+0x11a>

        case LED_COLOR_BLACK:
			LedControl_SetColorIndividual(led_id, LED_COLOR_BLUE, 0);
 8006274:	1dfb      	adds	r3, r7, #7
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2200      	movs	r2, #0
 800627a:	2102      	movs	r1, #2
 800627c:	0018      	movs	r0, r3
 800627e:	f7ff ff03 	bl	8006088 <LedControl_SetColorIndividual>
			LedControl_SetColorIndividual(led_id, LED_COLOR_RED, 0);
 8006282:	1dfb      	adds	r3, r7, #7
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2200      	movs	r2, #0
 8006288:	2100      	movs	r1, #0
 800628a:	0018      	movs	r0, r3
 800628c:	f7ff fefc 	bl	8006088 <LedControl_SetColorIndividual>
			LedControl_SetColorIndividual(led_id, LED_COLOR_GREEN, 0);
 8006290:	1dfb      	adds	r3, r7, #7
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2200      	movs	r2, #0
 8006296:	2101      	movs	r1, #1
 8006298:	0018      	movs	r0, r3
 800629a:	f7ff fef5 	bl	8006088 <LedControl_SetColorIndividual>
			break;
 800629e:	e000      	b.n	80062a2 <LedControl_SetColorGeneral+0x11a>

        default:
            break;
 80062a0:	46c0      	nop			; (mov r8, r8)
    }
}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	46bd      	mov	sp, r7
 80062a6:	b003      	add	sp, #12
 80062a8:	bd90      	pop	{r4, r7, pc}
 80062aa:	46c0      	nop			; (mov r8, r8)
 80062ac:	0800a5e8 	.word	0x0800a5e8

080062b0 <LEDGPIO_Config>:
  * @param  None
  * @retval None
  */
static
void LEDGPIO_Config(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA Clocks enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | RCC_AHBPeriph_GPIOC, ENABLE);
 80062b6:	23e0      	movs	r3, #224	; 0xe0
 80062b8:	031b      	lsls	r3, r3, #12
 80062ba:	2101      	movs	r1, #1
 80062bc:	0018      	movs	r0, r3
 80062be:	f7fd fb41 	bl	8003944 <RCC_AHBPeriphClockCmd>

	/* GPIOA Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED_RED_PIN;
 80062c2:	003b      	movs	r3, r7
 80062c4:	2280      	movs	r2, #128	; 0x80
 80062c6:	0152      	lsls	r2, r2, #5
 80062c8:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80062ca:	003b      	movs	r3, r7
 80062cc:	2201      	movs	r2, #1
 80062ce:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80062d0:	003b      	movs	r3, r7
 80062d2:	2203      	movs	r2, #3
 80062d4:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80062d6:	003b      	movs	r3, r7
 80062d8:	2200      	movs	r2, #0
 80062da:	719a      	strb	r2, [r3, #6]
	GPIO_Init(LED_RED_PORT, &GPIO_InitStructure);
 80062dc:	003a      	movs	r2, r7
 80062de:	2390      	movs	r3, #144	; 0x90
 80062e0:	05db      	lsls	r3, r3, #23
 80062e2:	0011      	movs	r1, r2
 80062e4:	0018      	movs	r0, r3
 80062e6:	f7fd f833 	bl	8003350 <GPIO_Init>

	/* GPIOB Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED_GREEN_PIN;
 80062ea:	003b      	movs	r3, r7
 80062ec:	2208      	movs	r2, #8
 80062ee:	601a      	str	r2, [r3, #0]
	GPIO_Init(LED_GREEN_PORT, &GPIO_InitStructure);
 80062f0:	003b      	movs	r3, r7
 80062f2:	4a09      	ldr	r2, [pc, #36]	; (8006318 <LEDGPIO_Config+0x68>)
 80062f4:	0019      	movs	r1, r3
 80062f6:	0010      	movs	r0, r2
 80062f8:	f7fd f82a 	bl	8003350 <GPIO_Init>

	/* GPIOC Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = LED_BLUE_PIN;
 80062fc:	003b      	movs	r3, r7
 80062fe:	2280      	movs	r2, #128	; 0x80
 8006300:	0192      	lsls	r2, r2, #6
 8006302:	601a      	str	r2, [r3, #0]
	GPIO_Init(LED_BLUE_PORT, &GPIO_InitStructure);
 8006304:	003b      	movs	r3, r7
 8006306:	4a05      	ldr	r2, [pc, #20]	; (800631c <LEDGPIO_Config+0x6c>)
 8006308:	0019      	movs	r1, r3
 800630a:	0010      	movs	r0, r2
 800630c:	f7fd f820 	bl	8003350 <GPIO_Init>
}
 8006310:	46c0      	nop			; (mov r8, r8)
 8006312:	46bd      	mov	sp, r7
 8006314:	b002      	add	sp, #8
 8006316:	bd80      	pop	{r7, pc}
 8006318:	48000400 	.word	0x48000400
 800631c:	48000800 	.word	0x48000800

08006320 <Encoder_Init>:
 * @param  None
 * @retval None
 */
void
Encoder_Init(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
	EncoderL_GPIO_Config();
 8006324:	f000 f808 	bl	8006338 <EncoderL_GPIO_Config>
	EncoderR_GPIO_Config();
 8006328:	f000 f84e 	bl	80063c8 <EncoderR_GPIO_Config>
	ScanTimer();
 800632c:	f000 fa0c 	bl	8006748 <ScanTimer>
}
 8006330:	46c0      	nop			; (mov r8, r8)
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <EncoderL_GPIO_Config>:
 * @param  None
 * @retval None
 */
static
void EncoderL_GPIO_Config(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 			GPIO_InitStructure;
	EXTI_InitTypeDef			EXTI_InitStructure;
	NVIC_InitTypeDef			NVIC_InitStructure;

	/* Enable clock GPIOB */
	RCC_AHBPeriphClockCmd(Encoder_RCC_GPIO, ENABLE);
 800633e:	2380      	movs	r3, #128	; 0x80
 8006340:	02db      	lsls	r3, r3, #11
 8006342:	2101      	movs	r1, #1
 8006344:	0018      	movs	r0, r3
 8006346:	f7fd fafd 	bl	8003944 <RCC_AHBPeriphClockCmd>

	/* Initializes GPIO Use Input */
	GPIO_InitStructure.GPIO_Pin = EncoderL1_GPIO_PIN | EncoderL2_GPIO_PIN;
 800634a:	2110      	movs	r1, #16
 800634c:	187b      	adds	r3, r7, r1
 800634e:	22c0      	movs	r2, #192	; 0xc0
 8006350:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8006352:	187b      	adds	r3, r7, r1
 8006354:	2200      	movs	r2, #0
 8006356:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006358:	187b      	adds	r3, r7, r1
 800635a:	2203      	movs	r2, #3
 800635c:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800635e:	187b      	adds	r3, r7, r1
 8006360:	2202      	movs	r2, #2
 8006362:	71da      	strb	r2, [r3, #7]
	GPIO_Init(Encoder_GPIO_PORT, &GPIO_InitStructure);
 8006364:	187b      	adds	r3, r7, r1
 8006366:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <EncoderL_GPIO_Config+0x8c>)
 8006368:	0019      	movs	r1, r3
 800636a:	0010      	movs	r0, r2
 800636c:	f7fc fff0 	bl	8003350 <GPIO_Init>

	/* Enable Clock Syscfg, Connect EXTI Line6 to PB6 pin */
	RCC_APB2PeriphClockCmd(Encoder_SYSCFG_CLOCK, ENABLE);
 8006370:	2101      	movs	r1, #1
 8006372:	2001      	movs	r0, #1
 8006374:	f7fd fb06 	bl	8003984 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(Encoder_EXTI_PORT, EncoderL1_EXTI_PinSource);
 8006378:	2107      	movs	r1, #7
 800637a:	2001      	movs	r0, #1
 800637c:	f7fd fc38 	bl	8003bf0 <SYSCFG_EXTILineConfig>

	/* Configure EXTI Line6 */
	EXTI_InitStructure.EXTI_Line =  EncoderL1_EXTI_Line;
 8006380:	2108      	movs	r1, #8
 8006382:	187b      	adds	r3, r7, r1
 8006384:	2280      	movs	r2, #128	; 0x80
 8006386:	601a      	str	r2, [r3, #0]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8006388:	187b      	adds	r3, r7, r1
 800638a:	2200      	movs	r2, #0
 800638c:	711a      	strb	r2, [r3, #4]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 800638e:	187b      	adds	r3, r7, r1
 8006390:	2210      	movs	r2, #16
 8006392:	715a      	strb	r2, [r3, #5]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8006394:	187b      	adds	r3, r7, r1
 8006396:	2201      	movs	r2, #1
 8006398:	719a      	strb	r2, [r3, #6]
	EXTI_Init(&EXTI_InitStructure);
 800639a:	187b      	adds	r3, r7, r1
 800639c:	0018      	movs	r0, r3
 800639e:	f7fc ff3b 	bl	8003218 <EXTI_Init>

	/* Configure NVIC for Encoder left Interface Update Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI4_15_IRQn;
 80063a2:	1d3b      	adds	r3, r7, #4
 80063a4:	2207      	movs	r2, #7
 80063a6:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 80063a8:	1d3b      	adds	r3, r7, #4
 80063aa:	2200      	movs	r2, #0
 80063ac:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE ;
 80063ae:	1d3b      	adds	r3, r7, #4
 80063b0:	2201      	movs	r2, #1
 80063b2:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStructure);
 80063b4:	1d3b      	adds	r3, r7, #4
 80063b6:	0018      	movs	r0, r3
 80063b8:	f7fd f8f2 	bl	80035a0 <NVIC_Init>
}
 80063bc:	46c0      	nop			; (mov r8, r8)
 80063be:	46bd      	mov	sp, r7
 80063c0:	b006      	add	sp, #24
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	48000400 	.word	0x48000400

080063c8 <EncoderR_GPIO_Config>:
 * @param  None
 * @retval None
 */
static
void EncoderR_GPIO_Config(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 			GPIO_InitStructure;
	EXTI_InitTypeDef			EXTI_InitStructure;
	NVIC_InitTypeDef			NVIC_InitStructure;

	/* Enable clock GPIOB */
	RCC_AHBPeriphClockCmd(Encoder_RCC_GPIO, ENABLE);
 80063ce:	2380      	movs	r3, #128	; 0x80
 80063d0:	02db      	lsls	r3, r3, #11
 80063d2:	2101      	movs	r1, #1
 80063d4:	0018      	movs	r0, r3
 80063d6:	f7fd fab5 	bl	8003944 <RCC_AHBPeriphClockCmd>

	/* Initializes GPIO Use Input */
	GPIO_InitStructure.GPIO_Pin = EncoderR1_GPIO_PIN | EncoderR2_GPIO_PIN;
 80063da:	2110      	movs	r1, #16
 80063dc:	187b      	adds	r3, r7, r1
 80063de:	2230      	movs	r2, #48	; 0x30
 80063e0:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80063e2:	187b      	adds	r3, r7, r1
 80063e4:	2200      	movs	r2, #0
 80063e6:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80063e8:	187b      	adds	r3, r7, r1
 80063ea:	2203      	movs	r2, #3
 80063ec:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 80063ee:	187b      	adds	r3, r7, r1
 80063f0:	2202      	movs	r2, #2
 80063f2:	71da      	strb	r2, [r3, #7]
	GPIO_Init(Encoder_GPIO_PORT, &GPIO_InitStructure);
 80063f4:	187b      	adds	r3, r7, r1
 80063f6:	4a17      	ldr	r2, [pc, #92]	; (8006454 <EncoderR_GPIO_Config+0x8c>)
 80063f8:	0019      	movs	r1, r3
 80063fa:	0010      	movs	r0, r2
 80063fc:	f7fc ffa8 	bl	8003350 <GPIO_Init>

	/* Enable Clock Syscfg, Connect EXTI Line4 to PB4 pin */
	RCC_APB2PeriphClockCmd(Encoder_SYSCFG_CLOCK, ENABLE);
 8006400:	2101      	movs	r1, #1
 8006402:	2001      	movs	r0, #1
 8006404:	f7fd fabe 	bl	8003984 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(Encoder_EXTI_PORT, EncoderR1_EXTI_PinSource);
 8006408:	2105      	movs	r1, #5
 800640a:	2001      	movs	r0, #1
 800640c:	f7fd fbf0 	bl	8003bf0 <SYSCFG_EXTILineConfig>

	/* Configure EXTI Line4 */
	EXTI_InitStructure.EXTI_Line = EncoderR1_EXTI_Line;
 8006410:	2108      	movs	r1, #8
 8006412:	187b      	adds	r3, r7, r1
 8006414:	2220      	movs	r2, #32
 8006416:	601a      	str	r2, [r3, #0]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8006418:	187b      	adds	r3, r7, r1
 800641a:	2200      	movs	r2, #0
 800641c:	711a      	strb	r2, [r3, #4]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 800641e:	187b      	adds	r3, r7, r1
 8006420:	2210      	movs	r2, #16
 8006422:	715a      	strb	r2, [r3, #5]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8006424:	187b      	adds	r3, r7, r1
 8006426:	2201      	movs	r2, #1
 8006428:	719a      	strb	r2, [r3, #6]
	EXTI_Init(&EXTI_InitStructure);
 800642a:	187b      	adds	r3, r7, r1
 800642c:	0018      	movs	r0, r3
 800642e:	f7fc fef3 	bl	8003218 <EXTI_Init>

	/* Configure NVIC for Encoder right Interface Update Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI4_15_IRQn;
 8006432:	1d3b      	adds	r3, r7, #4
 8006434:	2207      	movs	r2, #7
 8006436:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8006438:	1d3b      	adds	r3, r7, #4
 800643a:	2200      	movs	r2, #0
 800643c:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE ;
 800643e:	1d3b      	adds	r3, r7, #4
 8006440:	2201      	movs	r2, #1
 8006442:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStructure);
 8006444:	1d3b      	adds	r3, r7, #4
 8006446:	0018      	movs	r0, r3
 8006448:	f7fd f8aa 	bl	80035a0 <NVIC_Init>
}
 800644c:	46c0      	nop			; (mov r8, r8)
 800644e:	46bd      	mov	sp, r7
 8006450:	b006      	add	sp, #24
 8006452:	bd80      	pop	{r7, pc}
 8006454:	48000400 	.word	0x48000400

08006458 <binaryToDecimal>:
 * @brief  Convert Binary To Decimal
 * @param  Binary Number
 * @retval Decimal Number
 */
int16_t binaryToDecimal(int16_t binaryNumber)
{
 8006458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	0002      	movs	r2, r0
 8006460:	1dbb      	adds	r3, r7, #6
 8006462:	801a      	strh	r2, [r3, #0]
    int16_t decimalNumber = 0, i = 0, remainder;
 8006464:	230e      	movs	r3, #14
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	2200      	movs	r2, #0
 800646a:	801a      	strh	r2, [r3, #0]
 800646c:	230c      	movs	r3, #12
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	2200      	movs	r2, #0
 8006472:	801a      	strh	r2, [r3, #0]

    while (binaryNumber != 0) {
 8006474:	e051      	b.n	800651a <binaryToDecimal+0xc2>
        remainder = binaryNumber % 10;
 8006476:	250a      	movs	r5, #10
 8006478:	197c      	adds	r4, r7, r5
 800647a:	1dbb      	adds	r3, r7, #6
 800647c:	2200      	movs	r2, #0
 800647e:	5e9b      	ldrsh	r3, [r3, r2]
 8006480:	210a      	movs	r1, #10
 8006482:	0018      	movs	r0, r3
 8006484:	f7f9 ffb8 	bl	80003f8 <__aeabi_idivmod>
 8006488:	000b      	movs	r3, r1
 800648a:	8023      	strh	r3, [r4, #0]
        binaryNumber /= 10;
 800648c:	1dbc      	adds	r4, r7, #6
 800648e:	1dbb      	adds	r3, r7, #6
 8006490:	2200      	movs	r2, #0
 8006492:	5e9b      	ldrsh	r3, [r3, r2]
 8006494:	210a      	movs	r1, #10
 8006496:	0018      	movs	r0, r3
 8006498:	f7f9 fec8 	bl	800022c <__divsi3>
 800649c:	0003      	movs	r3, r0
 800649e:	8023      	strh	r3, [r4, #0]
        decimalNumber += remainder * pow(2, i);
 80064a0:	197b      	adds	r3, r7, r5
 80064a2:	2200      	movs	r2, #0
 80064a4:	5e9b      	ldrsh	r3, [r3, r2]
 80064a6:	0018      	movs	r0, r3
 80064a8:	f7fc fa5a 	bl	8002960 <__aeabi_i2d>
 80064ac:	0004      	movs	r4, r0
 80064ae:	000d      	movs	r5, r1
 80064b0:	260c      	movs	r6, #12
 80064b2:	19bb      	adds	r3, r7, r6
 80064b4:	2200      	movs	r2, #0
 80064b6:	5e9b      	ldrsh	r3, [r3, r2]
 80064b8:	0018      	movs	r0, r3
 80064ba:	f7fc fa51 	bl	8002960 <__aeabi_i2d>
 80064be:	0002      	movs	r2, r0
 80064c0:	000b      	movs	r3, r1
 80064c2:	2000      	movs	r0, #0
 80064c4:	2180      	movs	r1, #128	; 0x80
 80064c6:	05c9      	lsls	r1, r1, #23
 80064c8:	f001 fdbc 	bl	8008044 <pow>
 80064cc:	0002      	movs	r2, r0
 80064ce:	000b      	movs	r3, r1
 80064d0:	0020      	movs	r0, r4
 80064d2:	0029      	movs	r1, r5
 80064d4:	f7fb fbf2 	bl	8001cbc <__aeabi_dmul>
 80064d8:	0002      	movs	r2, r0
 80064da:	000b      	movs	r3, r1
 80064dc:	0014      	movs	r4, r2
 80064de:	001d      	movs	r5, r3
 80064e0:	230e      	movs	r3, #14
 80064e2:	18fb      	adds	r3, r7, r3
 80064e4:	2200      	movs	r2, #0
 80064e6:	5e9b      	ldrsh	r3, [r3, r2]
 80064e8:	0018      	movs	r0, r3
 80064ea:	f7fc fa39 	bl	8002960 <__aeabi_i2d>
 80064ee:	0002      	movs	r2, r0
 80064f0:	000b      	movs	r3, r1
 80064f2:	0020      	movs	r0, r4
 80064f4:	0029      	movs	r1, r5
 80064f6:	f7fa fca3 	bl	8000e40 <__aeabi_dadd>
 80064fa:	0002      	movs	r2, r0
 80064fc:	000b      	movs	r3, r1
 80064fe:	210e      	movs	r1, #14
 8006500:	187c      	adds	r4, r7, r1
 8006502:	0010      	movs	r0, r2
 8006504:	0019      	movs	r1, r3
 8006506:	f7fc f9f5 	bl	80028f4 <__aeabi_d2iz>
 800650a:	0003      	movs	r3, r0
 800650c:	8023      	strh	r3, [r4, #0]
        ++i;
 800650e:	19bb      	adds	r3, r7, r6
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	3301      	adds	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	19bb      	adds	r3, r7, r6
 8006518:	801a      	strh	r2, [r3, #0]
    while (binaryNumber != 0) {
 800651a:	1dbb      	adds	r3, r7, #6
 800651c:	2200      	movs	r2, #0
 800651e:	5e9b      	ldrsh	r3, [r3, r2]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1a8      	bne.n	8006476 <binaryToDecimal+0x1e>
    }

    return decimalNumber;
 8006524:	230e      	movs	r3, #14
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	2200      	movs	r2, #0
 800652a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800652c:	0018      	movs	r0, r3
 800652e:	46bd      	mov	sp, r7
 8006530:	b005      	add	sp, #20
 8006532:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006534 <EXTI4_15_IRQHandler>:
 * @brief  Handler interrupt of encoder for count pulse
 * @param  None
 * @retval None
 */
void EXTI4_15_IRQHandler(void)
{
 8006534:	b590      	push	{r4, r7, lr}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
	/* Count Pulse Encoder Left */
	char EncoderL_pinA = GPIO_ReadInputDataBit(Encoder_GPIO_PORT, EncoderL1_GPIO_PIN);
 800653a:	1dfc      	adds	r4, r7, #7
 800653c:	4b3f      	ldr	r3, [pc, #252]	; (800663c <EXTI4_15_IRQHandler+0x108>)
 800653e:	2180      	movs	r1, #128	; 0x80
 8006540:	0018      	movs	r0, r3
 8006542:	f7fc ff99 	bl	8003478 <GPIO_ReadInputDataBit>
 8006546:	0003      	movs	r3, r0
 8006548:	7023      	strb	r3, [r4, #0]
	char EncoderL_pinB = GPIO_ReadInputDataBit(Encoder_GPIO_PORT, EncoderL2_GPIO_PIN);
 800654a:	1dbc      	adds	r4, r7, #6
 800654c:	4b3b      	ldr	r3, [pc, #236]	; (800663c <EXTI4_15_IRQHandler+0x108>)
 800654e:	2140      	movs	r1, #64	; 0x40
 8006550:	0018      	movs	r0, r3
 8006552:	f7fc ff91 	bl	8003478 <GPIO_ReadInputDataBit>
 8006556:	0003      	movs	r3, r0
 8006558:	7023      	strb	r3, [r4, #0]

	/* Handler EXTI_Line7 to PB7 */
	if(EXTI_GetFlagStatus(EncoderL1_EXTI_Line) == SET) {
 800655a:	2080      	movs	r0, #128	; 0x80
 800655c:	f7fc fecc 	bl	80032f8 <EXTI_GetFlagStatus>
 8006560:	0003      	movs	r3, r0
 8006562:	2b01      	cmp	r3, #1
 8006564:	d127      	bne.n	80065b6 <EXTI4_15_IRQHandler+0x82>
		/* Pulse Noise Filtering */
		EncoderL_Val   = EncoderL_Val << 2;
 8006566:	4b36      	ldr	r3, [pc, #216]	; (8006640 <EXTI4_15_IRQHandler+0x10c>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	b2da      	uxtb	r2, r3
 800656e:	4b34      	ldr	r3, [pc, #208]	; (8006640 <EXTI4_15_IRQHandler+0x10c>)
 8006570:	701a      	strb	r2, [r3, #0]
		EncoderL_Val   = (( EncoderL_pinA | EncoderL_pinB) | EncoderL_Val ) & 0x0f;
 8006572:	1dfa      	adds	r2, r7, #7
 8006574:	1dbb      	adds	r3, r7, #6
 8006576:	7812      	ldrb	r2, [r2, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	4313      	orrs	r3, r2
 800657c:	b2da      	uxtb	r2, r3
 800657e:	4b30      	ldr	r3, [pc, #192]	; (8006640 <EXTI4_15_IRQHandler+0x10c>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	4313      	orrs	r3, r2
 8006584:	b2db      	uxtb	r3, r3
 8006586:	220f      	movs	r2, #15
 8006588:	4013      	ands	r3, r2
 800658a:	b2da      	uxtb	r2, r3
 800658c:	4b2c      	ldr	r3, [pc, #176]	; (8006640 <EXTI4_15_IRQHandler+0x10c>)
 800658e:	701a      	strb	r2, [r3, #0]
		encoderL_temp += State[binaryToDecimal(EncoderL_Val)];
 8006590:	4b2b      	ldr	r3, [pc, #172]	; (8006640 <EXTI4_15_IRQHandler+0x10c>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	b21b      	sxth	r3, r3
 8006596:	0018      	movs	r0, r3
 8006598:	f7ff ff5e 	bl	8006458 <binaryToDecimal>
 800659c:	0003      	movs	r3, r0
 800659e:	001a      	movs	r2, r3
 80065a0:	4b28      	ldr	r3, [pc, #160]	; (8006644 <EXTI4_15_IRQHandler+0x110>)
 80065a2:	5c9b      	ldrb	r3, [r3, r2]
 80065a4:	001a      	movs	r2, r3
 80065a6:	4b28      	ldr	r3, [pc, #160]	; (8006648 <EXTI4_15_IRQHandler+0x114>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	18d2      	adds	r2, r2, r3
 80065ac:	4b26      	ldr	r3, [pc, #152]	; (8006648 <EXTI4_15_IRQHandler+0x114>)
 80065ae:	601a      	str	r2, [r3, #0]

		EXTI_ClearITPendingBit(EncoderL1_EXTI_Line);
 80065b0:	2080      	movs	r0, #128	; 0x80
 80065b2:	f7fc febf 	bl	8003334 <EXTI_ClearITPendingBit>
	}

	/* Count Pulse Encoder Right */
	char EncoderR_pinA = GPIO_ReadInputDataBit(Encoder_GPIO_PORT, EncoderR1_GPIO_PIN);
 80065b6:	1d7c      	adds	r4, r7, #5
 80065b8:	4b20      	ldr	r3, [pc, #128]	; (800663c <EXTI4_15_IRQHandler+0x108>)
 80065ba:	2120      	movs	r1, #32
 80065bc:	0018      	movs	r0, r3
 80065be:	f7fc ff5b 	bl	8003478 <GPIO_ReadInputDataBit>
 80065c2:	0003      	movs	r3, r0
 80065c4:	7023      	strb	r3, [r4, #0]
	char EncoderR_pinB = GPIO_ReadInputDataBit(Encoder_GPIO_PORT, EncoderR2_GPIO_PIN);
 80065c6:	1d3c      	adds	r4, r7, #4
 80065c8:	4b1c      	ldr	r3, [pc, #112]	; (800663c <EXTI4_15_IRQHandler+0x108>)
 80065ca:	2110      	movs	r1, #16
 80065cc:	0018      	movs	r0, r3
 80065ce:	f7fc ff53 	bl	8003478 <GPIO_ReadInputDataBit>
 80065d2:	0003      	movs	r3, r0
 80065d4:	7023      	strb	r3, [r4, #0]

	/* Handler EXTI_Line5 to PB5 */
	if(EXTI_GetFlagStatus(EncoderR1_EXTI_Line) == SET) {
 80065d6:	2020      	movs	r0, #32
 80065d8:	f7fc fe8e 	bl	80032f8 <EXTI_GetFlagStatus>
 80065dc:	0003      	movs	r3, r0
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d127      	bne.n	8006632 <EXTI4_15_IRQHandler+0xfe>
		/* Pulse Noise Filtering */
		EncoderR_Val   = EncoderR_Val << 2;
 80065e2:	4b1a      	ldr	r3, [pc, #104]	; (800664c <EXTI4_15_IRQHandler+0x118>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	4b18      	ldr	r3, [pc, #96]	; (800664c <EXTI4_15_IRQHandler+0x118>)
 80065ec:	701a      	strb	r2, [r3, #0]
		EncoderR_Val   = (( EncoderR_pinA | EncoderR_pinB) | EncoderR_Val ) & 0x0f;
 80065ee:	1d7a      	adds	r2, r7, #5
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	7812      	ldrb	r2, [r2, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <EXTI4_15_IRQHandler+0x118>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	4313      	orrs	r3, r2
 8006600:	b2db      	uxtb	r3, r3
 8006602:	220f      	movs	r2, #15
 8006604:	4013      	ands	r3, r2
 8006606:	b2da      	uxtb	r2, r3
 8006608:	4b10      	ldr	r3, [pc, #64]	; (800664c <EXTI4_15_IRQHandler+0x118>)
 800660a:	701a      	strb	r2, [r3, #0]
		encoderR_temp += State[binaryToDecimal(EncoderR_Val)];
 800660c:	4b0f      	ldr	r3, [pc, #60]	; (800664c <EXTI4_15_IRQHandler+0x118>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	b21b      	sxth	r3, r3
 8006612:	0018      	movs	r0, r3
 8006614:	f7ff ff20 	bl	8006458 <binaryToDecimal>
 8006618:	0003      	movs	r3, r0
 800661a:	001a      	movs	r2, r3
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <EXTI4_15_IRQHandler+0x110>)
 800661e:	5c9b      	ldrb	r3, [r3, r2]
 8006620:	001a      	movs	r2, r3
 8006622:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <EXTI4_15_IRQHandler+0x11c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	18d2      	adds	r2, r2, r3
 8006628:	4b09      	ldr	r3, [pc, #36]	; (8006650 <EXTI4_15_IRQHandler+0x11c>)
 800662a:	601a      	str	r2, [r3, #0]

		EXTI_ClearITPendingBit(EncoderR1_EXTI_Line);
 800662c:	2020      	movs	r0, #32
 800662e:	f7fc fe81 	bl	8003334 <EXTI_ClearITPendingBit>
	}
}
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	46bd      	mov	sp, r7
 8006636:	b003      	add	sp, #12
 8006638:	bd90      	pop	{r4, r7, pc}
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	48000400 	.word	0x48000400
 8006640:	20000139 	.word	0x20000139
 8006644:	2000003c 	.word	0x2000003c
 8006648:	2000013c 	.word	0x2000013c
 800664c:	2000013a 	.word	0x2000013a
 8006650:	20000140 	.word	0x20000140

08006654 <CalculateSpeed>:
 * @param  None
 * @retval None
 */
static
void CalculateSpeed(void *arg)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	/* Calculate speed encoder in 1ms */
	if (stateEncoder == false) {
 800665c:	4b32      	ldr	r3, [pc, #200]	; (8006728 <CalculateSpeed+0xd4>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2201      	movs	r2, #1
 8006662:	4053      	eors	r3, r2
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d059      	beq.n	800671e <CalculateSpeed+0xca>
		SpeedL_1ms += (uint32_t)((encoderL_temp * 1000) / ENCODER_PULSE_ROUND);	// v/s
 800666a:	4b30      	ldr	r3, [pc, #192]	; (800672c <CalculateSpeed+0xd8>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	0013      	movs	r3, r2
 8006670:	015b      	lsls	r3, r3, #5
 8006672:	1a9b      	subs	r3, r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	189b      	adds	r3, r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	21d2      	movs	r1, #210	; 0xd2
 800667c:	0018      	movs	r0, r3
 800667e:	f7f9 fd4b 	bl	8000118 <__udivsi3>
 8006682:	0003      	movs	r3, r0
 8006684:	001a      	movs	r2, r3
 8006686:	4b2a      	ldr	r3, [pc, #168]	; (8006730 <CalculateSpeed+0xdc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	18d2      	adds	r2, r2, r3
 800668c:	4b28      	ldr	r3, [pc, #160]	; (8006730 <CalculateSpeed+0xdc>)
 800668e:	601a      	str	r2, [r3, #0]
		SpeedR_1ms += (uint32_t)((encoderR_temp * 1000) / ENCODER_PULSE_ROUND);	// v/s
 8006690:	4b28      	ldr	r3, [pc, #160]	; (8006734 <CalculateSpeed+0xe0>)
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	0013      	movs	r3, r2
 8006696:	015b      	lsls	r3, r3, #5
 8006698:	1a9b      	subs	r3, r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	189b      	adds	r3, r3, r2
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	21d2      	movs	r1, #210	; 0xd2
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7f9 fd38 	bl	8000118 <__udivsi3>
 80066a8:	0003      	movs	r3, r0
 80066aa:	001a      	movs	r2, r3
 80066ac:	4b22      	ldr	r3, [pc, #136]	; (8006738 <CalculateSpeed+0xe4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	18d2      	adds	r2, r2, r3
 80066b2:	4b21      	ldr	r3, [pc, #132]	; (8006738 <CalculateSpeed+0xe4>)
 80066b4:	601a      	str	r2, [r3, #0]
		count++;
 80066b6:	4b21      	ldr	r3, [pc, #132]	; (800673c <CalculateSpeed+0xe8>)
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	3301      	adds	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	4b1f      	ldr	r3, [pc, #124]	; (800673c <CalculateSpeed+0xe8>)
 80066c0:	801a      	strh	r2, [r3, #0]

		/* Calculate speed encoder in 4ms */
		if(count >= 5) {
 80066c2:	4b1e      	ldr	r3, [pc, #120]	; (800673c <CalculateSpeed+0xe8>)
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d929      	bls.n	800671e <CalculateSpeed+0xca>
			stateEncoder = true;
 80066ca:	4b17      	ldr	r3, [pc, #92]	; (8006728 <CalculateSpeed+0xd4>)
 80066cc:	2201      	movs	r2, #1
 80066ce:	701a      	strb	r2, [r3, #0]
			encoderL_speed = (uint32_t)(SpeedL_1ms / count);	// v/s
 80066d0:	4b17      	ldr	r3, [pc, #92]	; (8006730 <CalculateSpeed+0xdc>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4b19      	ldr	r3, [pc, #100]	; (800673c <CalculateSpeed+0xe8>)
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	0019      	movs	r1, r3
 80066da:	0010      	movs	r0, r2
 80066dc:	f7f9 fd1c 	bl	8000118 <__udivsi3>
 80066e0:	0003      	movs	r3, r0
 80066e2:	001a      	movs	r2, r3
 80066e4:	4b16      	ldr	r3, [pc, #88]	; (8006740 <CalculateSpeed+0xec>)
 80066e6:	601a      	str	r2, [r3, #0]
			encoderR_speed = (uint32_t)(SpeedR_1ms / count);	// v/s
 80066e8:	4b13      	ldr	r3, [pc, #76]	; (8006738 <CalculateSpeed+0xe4>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	4b13      	ldr	r3, [pc, #76]	; (800673c <CalculateSpeed+0xe8>)
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	0019      	movs	r1, r3
 80066f2:	0010      	movs	r0, r2
 80066f4:	f7f9 fd10 	bl	8000118 <__udivsi3>
 80066f8:	0003      	movs	r3, r0
 80066fa:	001a      	movs	r2, r3
 80066fc:	4b11      	ldr	r3, [pc, #68]	; (8006744 <CalculateSpeed+0xf0>)
 80066fe:	601a      	str	r2, [r3, #0]

			/* Reset Count Pulse, Speed, Count */
			encoderL_temp = 0;
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <CalculateSpeed+0xd8>)
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
			encoderR_temp = 0;
 8006706:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <CalculateSpeed+0xe0>)
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
			SpeedL_1ms = 0;
 800670c:	4b08      	ldr	r3, [pc, #32]	; (8006730 <CalculateSpeed+0xdc>)
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
			SpeedR_1ms = 0;
 8006712:	4b09      	ldr	r3, [pc, #36]	; (8006738 <CalculateSpeed+0xe4>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]
			count = 0;
 8006718:	4b08      	ldr	r3, [pc, #32]	; (800673c <CalculateSpeed+0xe8>)
 800671a:	2200      	movs	r2, #0
 800671c:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	46bd      	mov	sp, r7
 8006722:	b002      	add	sp, #8
 8006724:	bd80      	pop	{r7, pc}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	2000014e 	.word	0x2000014e
 800672c:	2000013c 	.word	0x2000013c
 8006730:	20000144 	.word	0x20000144
 8006734:	20000140 	.word	0x20000140
 8006738:	20000148 	.word	0x20000148
 800673c:	2000014c 	.word	0x2000014c
 8006740:	20000570 	.word	0x20000570
 8006744:	20000574 	.word	0x20000574

08006748 <ScanTimer>:
 * @param  None
 * @retval None
 */
static
void ScanTimer(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af02      	add	r7, sp, #8
	if(idTimerScanSpeed != NO_TIMER) {
 800674e:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <ScanTimer+0x3c>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2bff      	cmp	r3, #255	; 0xff
 8006754:	d007      	beq.n	8006766 <ScanTimer+0x1e>
		TimerStop(idTimerScanSpeed);
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <ScanTimer+0x3c>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	0018      	movs	r0, r3
 800675c:	f000 fd3e 	bl	80071dc <TimerStop>
		idTimerScanSpeed = NO_TIMER;
 8006760:	4b08      	ldr	r3, [pc, #32]	; (8006784 <ScanTimer+0x3c>)
 8006762:	22ff      	movs	r2, #255	; 0xff
 8006764:	701a      	strb	r2, [r3, #0]
	}

	idTimerScanSpeed = TimerStart("CalculateSpeed", 	\
 8006766:	4b08      	ldr	r3, [pc, #32]	; (8006788 <ScanTimer+0x40>)
 8006768:	4808      	ldr	r0, [pc, #32]	; (800678c <ScanTimer+0x44>)
 800676a:	2200      	movs	r2, #0
 800676c:	9200      	str	r2, [sp, #0]
 800676e:	22ff      	movs	r2, #255	; 0xff
 8006770:	2101      	movs	r1, #1
 8006772:	f000 fcbf 	bl	80070f4 <TimerStart>
 8006776:	0003      	movs	r3, r0
 8006778:	001a      	movs	r2, r3
 800677a:	4b02      	ldr	r3, [pc, #8]	; (8006784 <ScanTimer+0x3c>)
 800677c:	701a      	strb	r2, [r3, #0]
								  SAMPLE_TIME, 			\
								  TIMER_REPEAT_FOREVER, \
							 	  CalculateSpeed,       \
								  NULL);
}
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	2000004c 	.word	0x2000004c
 8006788:	08006655 	.word	0x08006655
 800678c:	08008e1c 	.word	0x08008e1c

08006790 <MotorControl_Init>:
 * @param  None
 * @retval None
 */
void
MotorControl_Init(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
	// Initialize pins GPIO motor
	ML_GPIO_Config();
 8006794:	f000 f8ae 	bl	80068f4 <ML_GPIO_Config>
	MR_GPIO_Config();
 8006798:	f000 f804 	bl	80067a4 <MR_GPIO_Config>
}
 800679c:	46c0      	nop			; (mov r8, r8)
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <MR_GPIO_Config>:
 * @brief  Configure GPIO for motor right
 * @param  None
 * @retval None
 */
static
void MR_GPIO_Config(void) {
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b08b      	sub	sp, #44	; 0x2c
 80067a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 			GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef 	TIM_TimeBaseInitStructure;
	TIM_OCInitTypeDef 			TIM_OCInitStructure;

	/* Enable clock GPIOB, GPIOA */
	RCC_AHBPeriphClockCmd(MotorR1_RCC_GPIO | MotorR2_RCC_GPIO, ENABLE);
 80067aa:	23c0      	movs	r3, #192	; 0xc0
 80067ac:	02db      	lsls	r3, r3, #11
 80067ae:	2101      	movs	r1, #1
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7fd f8c7 	bl	8003944 <RCC_AHBPeriphClockCmd>

	/* Initializes GPIO Use Output Compare */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80067b6:	2120      	movs	r1, #32
 80067b8:	187b      	adds	r3, r7, r1
 80067ba:	2202      	movs	r2, #2
 80067bc:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80067be:	187b      	adds	r3, r7, r1
 80067c0:	2200      	movs	r2, #0
 80067c2:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80067c4:	187b      	adds	r3, r7, r1
 80067c6:	2200      	movs	r2, #0
 80067c8:	71da      	strb	r2, [r3, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80067ca:	187b      	adds	r3, r7, r1
 80067cc:	2203      	movs	r2, #3
 80067ce:	715a      	strb	r2, [r3, #5]

	/* GPIOB Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = MotorR1_GPIO_PIN;
 80067d0:	187b      	adds	r3, r7, r1
 80067d2:	2280      	movs	r2, #128	; 0x80
 80067d4:	0212      	lsls	r2, r2, #8
 80067d6:	601a      	str	r2, [r3, #0]
	GPIO_Init(MotorR1_GPIO_PORT, &GPIO_InitStructure);
 80067d8:	000c      	movs	r4, r1
 80067da:	187b      	adds	r3, r7, r1
 80067dc:	4a41      	ldr	r2, [pc, #260]	; (80068e4 <MR_GPIO_Config+0x140>)
 80067de:	0019      	movs	r1, r3
 80067e0:	0010      	movs	r0, r2
 80067e2:	f7fc fdb5 	bl	8003350 <GPIO_Init>

	/* GPIOA Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = MotorR2_GPIO_PIN;
 80067e6:	0021      	movs	r1, r4
 80067e8:	187b      	adds	r3, r7, r1
 80067ea:	2280      	movs	r2, #128	; 0x80
 80067ec:	0052      	lsls	r2, r2, #1
 80067ee:	601a      	str	r2, [r3, #0]
	GPIO_Init(MotorR2_GPIO_PORT, &GPIO_InitStructure);
 80067f0:	187a      	adds	r2, r7, r1
 80067f2:	2390      	movs	r3, #144	; 0x90
 80067f4:	05db      	lsls	r3, r3, #23
 80067f6:	0011      	movs	r1, r2
 80067f8:	0018      	movs	r0, r3
 80067fa:	f7fc fda9 	bl	8003350 <GPIO_Init>

	GPIO_PinAFConfig(MotorR1_GPIO_PORT, MotorR1_PinSource, MotorR1_GPIO_AF);
 80067fe:	4b39      	ldr	r3, [pc, #228]	; (80068e4 <MR_GPIO_Config+0x140>)
 8006800:	2201      	movs	r2, #1
 8006802:	210f      	movs	r1, #15
 8006804:	0018      	movs	r0, r3
 8006806:	f7fc fe78 	bl	80034fa <GPIO_PinAFConfig>
	GPIO_PinAFConfig(MotorR2_GPIO_PORT, MotorR2_PinSource, MotorR2_GPIO_AF);
 800680a:	2390      	movs	r3, #144	; 0x90
 800680c:	05db      	lsls	r3, r3, #23
 800680e:	2202      	movs	r2, #2
 8006810:	2108      	movs	r1, #8
 8006812:	0018      	movs	r0, r3
 8006814:	f7fc fe71 	bl	80034fa <GPIO_PinAFConfig>

	/* Enable TIM1, TIM15 clock */
	RCC_APB2PeriphClockCmd(MotorR1_RCC_TIM, ENABLE);
 8006818:	2380      	movs	r3, #128	; 0x80
 800681a:	025b      	lsls	r3, r3, #9
 800681c:	2101      	movs	r1, #1
 800681e:	0018      	movs	r0, r3
 8006820:	f7fd f8b0 	bl	8003984 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(MotorR2_RCC_TIM, ENABLE);
 8006824:	2380      	movs	r3, #128	; 0x80
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	2101      	movs	r1, #1
 800682a:	0018      	movs	r0, r3
 800682c:	f7fd f8aa 	bl	8003984 <RCC_APB2PeriphClockCmd>

	/* Initializes Use Timer Base */
	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8006830:	2114      	movs	r1, #20
 8006832:	187b      	adds	r3, r7, r1
 8006834:	2200      	movs	r2, #0
 8006836:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInitStructure.TIM_Prescaler = MOTOR_TIM_PRESCALE - 1;
 8006838:	187b      	adds	r3, r7, r1
 800683a:	222f      	movs	r2, #47	; 0x2f
 800683c:	801a      	strh	r2, [r3, #0]
	TIM_TimeBaseInitStructure.TIM_Period = MOTOR_TIM_PERIOD - 1;
 800683e:	187b      	adds	r3, r7, r1
 8006840:	4a29      	ldr	r2, [pc, #164]	; (80068e8 <MR_GPIO_Config+0x144>)
 8006842:	605a      	str	r2, [r3, #4]
	TIM_TimeBaseInitStructure.TIM_ClockDivision = 0;
 8006844:	187b      	adds	r3, r7, r1
 8006846:	2200      	movs	r2, #0
 8006848:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseInitStructure.TIM_RepetitionCounter = 0;
 800684a:	187b      	adds	r3, r7, r1
 800684c:	2200      	movs	r2, #0
 800684e:	729a      	strb	r2, [r3, #10]

	TIM_TimeBaseInit(MotorR1_TIM, &TIM_TimeBaseInitStructure);
 8006850:	000c      	movs	r4, r1
 8006852:	187b      	adds	r3, r7, r1
 8006854:	4a25      	ldr	r2, [pc, #148]	; (80068ec <MR_GPIO_Config+0x148>)
 8006856:	0019      	movs	r1, r3
 8006858:	0010      	movs	r0, r2
 800685a:	f7fd fa11 	bl	8003c80 <TIM_TimeBaseInit>
	TIM_TimeBaseInit(MotorR2_TIM, &TIM_TimeBaseInitStructure);
 800685e:	193b      	adds	r3, r7, r4
 8006860:	4a23      	ldr	r2, [pc, #140]	; (80068f0 <MR_GPIO_Config+0x14c>)
 8006862:	0019      	movs	r1, r3
 8006864:	0010      	movs	r0, r2
 8006866:	f7fd fa0b 	bl	8003c80 <TIM_TimeBaseInit>

	//Timer OC Configure
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800686a:	003b      	movs	r3, r7
 800686c:	2260      	movs	r2, #96	; 0x60
 800686e:	801a      	strh	r2, [r3, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8006870:	003b      	movs	r3, r7
 8006872:	2201      	movs	r2, #1
 8006874:	805a      	strh	r2, [r3, #2]
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 8006876:	003b      	movs	r3, r7
 8006878:	2204      	movs	r2, #4
 800687a:	809a      	strh	r2, [r3, #4]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800687c:	003b      	movs	r3, r7
 800687e:	2200      	movs	r2, #0
 8006880:	819a      	strh	r2, [r3, #12]
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
 8006882:	003b      	movs	r3, r7
 8006884:	2208      	movs	r2, #8
 8006886:	81da      	strh	r2, [r3, #14]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 8006888:	003b      	movs	r3, r7
 800688a:	2280      	movs	r2, #128	; 0x80
 800688c:	0052      	lsls	r2, r2, #1
 800688e:	821a      	strh	r2, [r3, #16]
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 8006890:	003b      	movs	r3, r7
 8006892:	2200      	movs	r2, #0
 8006894:	825a      	strh	r2, [r3, #18]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8006896:	003b      	movs	r3, r7
 8006898:	2200      	movs	r2, #0
 800689a:	609a      	str	r2, [r3, #8]

	TIM_OC2Init(MotorR1_TIM, &TIM_OCInitStructure);
 800689c:	003b      	movs	r3, r7
 800689e:	4a13      	ldr	r2, [pc, #76]	; (80068ec <MR_GPIO_Config+0x148>)
 80068a0:	0019      	movs	r1, r3
 80068a2:	0010      	movs	r0, r2
 80068a4:	f7fd fb68 	bl	8003f78 <TIM_OC2Init>
	TIM_OC1Init(MotorR2_TIM, &TIM_OCInitStructure);
 80068a8:	003b      	movs	r3, r7
 80068aa:	4a11      	ldr	r2, [pc, #68]	; (80068f0 <MR_GPIO_Config+0x14c>)
 80068ac:	0019      	movs	r1, r3
 80068ae:	0010      	movs	r0, r2
 80068b0:	f7fd faaa 	bl	8003e08 <TIM_OC1Init>

	TIM_Cmd(MotorR1_TIM, ENABLE);
 80068b4:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <MR_GPIO_Config+0x148>)
 80068b6:	2101      	movs	r1, #1
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7fd fa5f 	bl	8003d7c <TIM_Cmd>
	TIM_Cmd(MotorR2_TIM, ENABLE);
 80068be:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <MR_GPIO_Config+0x14c>)
 80068c0:	2101      	movs	r1, #1
 80068c2:	0018      	movs	r0, r3
 80068c4:	f7fd fa5a 	bl	8003d7c <TIM_Cmd>

	TIM_CtrlPWMOutputs(MotorR1_TIM, ENABLE);
 80068c8:	4b08      	ldr	r3, [pc, #32]	; (80068ec <MR_GPIO_Config+0x148>)
 80068ca:	2101      	movs	r1, #1
 80068cc:	0018      	movs	r0, r3
 80068ce:	f7fd fa75 	bl	8003dbc <TIM_CtrlPWMOutputs>
	TIM_CtrlPWMOutputs(MotorR2_TIM, ENABLE);
 80068d2:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <MR_GPIO_Config+0x14c>)
 80068d4:	2101      	movs	r1, #1
 80068d6:	0018      	movs	r0, r3
 80068d8:	f7fd fa70 	bl	8003dbc <TIM_CtrlPWMOutputs>
}
 80068dc:	46c0      	nop			; (mov r8, r8)
 80068de:	46bd      	mov	sp, r7
 80068e0:	b00b      	add	sp, #44	; 0x2c
 80068e2:	bd90      	pop	{r4, r7, pc}
 80068e4:	48000400 	.word	0x48000400
 80068e8:	000003e7 	.word	0x000003e7
 80068ec:	40014000 	.word	0x40014000
 80068f0:	40012c00 	.word	0x40012c00

080068f4 <ML_GPIO_Config>:
 * @func   ML_GPIO_Config
 * @brief  Configure GPIO for motor left
 * @param  None
 * @retval None
 */
static void ML_GPIO_Config(void) {
 80068f4:	b590      	push	{r4, r7, lr}
 80068f6:	b08b      	sub	sp, #44	; 0x2c
 80068f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 			GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef 	TIM_TimeBaseInitStructure;
	TIM_OCInitTypeDef			TIM_OCInitStructure;

	/* Enable clock GPIOB */
	RCC_AHBPeriphClockCmd(MotorL_RCC_GPIO, ENABLE);
 80068fa:	2380      	movs	r3, #128	; 0x80
 80068fc:	02db      	lsls	r3, r3, #11
 80068fe:	2101      	movs	r1, #1
 8006900:	0018      	movs	r0, r3
 8006902:	f7fd f81f 	bl	8003944 <RCC_AHBPeriphClockCmd>

	/* Initializes GPIO Use Output Compare */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006906:	2120      	movs	r1, #32
 8006908:	187b      	adds	r3, r7, r1
 800690a:	2202      	movs	r2, #2
 800690c:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800690e:	187b      	adds	r3, r7, r1
 8006910:	2200      	movs	r2, #0
 8006912:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8006914:	187b      	adds	r3, r7, r1
 8006916:	2200      	movs	r2, #0
 8006918:	71da      	strb	r2, [r3, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800691a:	187b      	adds	r3, r7, r1
 800691c:	2203      	movs	r2, #3
 800691e:	715a      	strb	r2, [r3, #5]

	/* GPIOB Configuration as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = MotorL1_GPIO_PIN | MotorL2_GPIO_PIN;
 8006920:	187b      	adds	r3, r7, r1
 8006922:	22c0      	movs	r2, #192	; 0xc0
 8006924:	0092      	lsls	r2, r2, #2
 8006926:	601a      	str	r2, [r3, #0]
	GPIO_Init(MotorL_GPIO_PORT, &GPIO_InitStructure);
 8006928:	187b      	adds	r3, r7, r1
 800692a:	4a3b      	ldr	r2, [pc, #236]	; (8006a18 <ML_GPIO_Config+0x124>)
 800692c:	0019      	movs	r1, r3
 800692e:	0010      	movs	r0, r2
 8006930:	f7fc fd0e 	bl	8003350 <GPIO_Init>

	GPIO_PinAFConfig(MotorL_GPIO_PORT, MotorL1_PinSource, MotorL_GPIO_AF);
 8006934:	4b38      	ldr	r3, [pc, #224]	; (8006a18 <ML_GPIO_Config+0x124>)
 8006936:	2202      	movs	r2, #2
 8006938:	2108      	movs	r1, #8
 800693a:	0018      	movs	r0, r3
 800693c:	f7fc fddd 	bl	80034fa <GPIO_PinAFConfig>
	GPIO_PinAFConfig(MotorL_GPIO_PORT, MotorL2_PinSource, MotorL_GPIO_AF);
 8006940:	4b35      	ldr	r3, [pc, #212]	; (8006a18 <ML_GPIO_Config+0x124>)
 8006942:	2202      	movs	r2, #2
 8006944:	2109      	movs	r1, #9
 8006946:	0018      	movs	r0, r3
 8006948:	f7fc fdd7 	bl	80034fa <GPIO_PinAFConfig>

	/* Enable TIM16, TIM17 clock */
	RCC_APB2PeriphClockCmd(MotorL1_RCC_TIM, ENABLE);
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	029b      	lsls	r3, r3, #10
 8006950:	2101      	movs	r1, #1
 8006952:	0018      	movs	r0, r3
 8006954:	f7fd f816 	bl	8003984 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(MotorL2_RCC_TIM, ENABLE);
 8006958:	2380      	movs	r3, #128	; 0x80
 800695a:	02db      	lsls	r3, r3, #11
 800695c:	2101      	movs	r1, #1
 800695e:	0018      	movs	r0, r3
 8006960:	f7fd f810 	bl	8003984 <RCC_APB2PeriphClockCmd>

	/* Initializes Use Timer Base */
	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8006964:	2114      	movs	r1, #20
 8006966:	187b      	adds	r3, r7, r1
 8006968:	2200      	movs	r2, #0
 800696a:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInitStructure.TIM_Prescaler = MOTOR_TIM_PRESCALE - 1;
 800696c:	187b      	adds	r3, r7, r1
 800696e:	222f      	movs	r2, #47	; 0x2f
 8006970:	801a      	strh	r2, [r3, #0]
	TIM_TimeBaseInitStructure.TIM_Period = MOTOR_TIM_PERIOD - 1;
 8006972:	187b      	adds	r3, r7, r1
 8006974:	4a29      	ldr	r2, [pc, #164]	; (8006a1c <ML_GPIO_Config+0x128>)
 8006976:	605a      	str	r2, [r3, #4]
	TIM_TimeBaseInitStructure.TIM_ClockDivision = 0;
 8006978:	187b      	adds	r3, r7, r1
 800697a:	2200      	movs	r2, #0
 800697c:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseInitStructure.TIM_RepetitionCounter = 0;
 800697e:	187b      	adds	r3, r7, r1
 8006980:	2200      	movs	r2, #0
 8006982:	729a      	strb	r2, [r3, #10]

	TIM_TimeBaseInit(MotorL1_TIM, &TIM_TimeBaseInitStructure);
 8006984:	000c      	movs	r4, r1
 8006986:	187b      	adds	r3, r7, r1
 8006988:	4a25      	ldr	r2, [pc, #148]	; (8006a20 <ML_GPIO_Config+0x12c>)
 800698a:	0019      	movs	r1, r3
 800698c:	0010      	movs	r0, r2
 800698e:	f7fd f977 	bl	8003c80 <TIM_TimeBaseInit>
	TIM_TimeBaseInit(MotorL2_TIM, &TIM_TimeBaseInitStructure);
 8006992:	193b      	adds	r3, r7, r4
 8006994:	4a23      	ldr	r2, [pc, #140]	; (8006a24 <ML_GPIO_Config+0x130>)
 8006996:	0019      	movs	r1, r3
 8006998:	0010      	movs	r0, r2
 800699a:	f7fd f971 	bl	8003c80 <TIM_TimeBaseInit>

	//Timer OC Configure
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800699e:	003b      	movs	r3, r7
 80069a0:	2260      	movs	r2, #96	; 0x60
 80069a2:	801a      	strh	r2, [r3, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80069a4:	003b      	movs	r3, r7
 80069a6:	2201      	movs	r2, #1
 80069a8:	805a      	strh	r2, [r3, #2]
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 80069aa:	003b      	movs	r3, r7
 80069ac:	2204      	movs	r2, #4
 80069ae:	809a      	strh	r2, [r3, #4]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80069b0:	003b      	movs	r3, r7
 80069b2:	2200      	movs	r2, #0
 80069b4:	819a      	strh	r2, [r3, #12]
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;
 80069b6:	003b      	movs	r3, r7
 80069b8:	2208      	movs	r2, #8
 80069ba:	81da      	strh	r2, [r3, #14]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 80069bc:	003b      	movs	r3, r7
 80069be:	2280      	movs	r2, #128	; 0x80
 80069c0:	0052      	lsls	r2, r2, #1
 80069c2:	821a      	strh	r2, [r3, #16]
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
 80069c4:	003b      	movs	r3, r7
 80069c6:	2200      	movs	r2, #0
 80069c8:	825a      	strh	r2, [r3, #18]
	TIM_OCInitStructure.TIM_Pulse = 0;
 80069ca:	003b      	movs	r3, r7
 80069cc:	2200      	movs	r2, #0
 80069ce:	609a      	str	r2, [r3, #8]

	TIM_OC1Init(MotorL1_TIM, &TIM_OCInitStructure);
 80069d0:	003b      	movs	r3, r7
 80069d2:	4a13      	ldr	r2, [pc, #76]	; (8006a20 <ML_GPIO_Config+0x12c>)
 80069d4:	0019      	movs	r1, r3
 80069d6:	0010      	movs	r0, r2
 80069d8:	f7fd fa16 	bl	8003e08 <TIM_OC1Init>
	TIM_OC1Init(MotorL2_TIM, &TIM_OCInitStructure);
 80069dc:	003b      	movs	r3, r7
 80069de:	4a11      	ldr	r2, [pc, #68]	; (8006a24 <ML_GPIO_Config+0x130>)
 80069e0:	0019      	movs	r1, r3
 80069e2:	0010      	movs	r0, r2
 80069e4:	f7fd fa10 	bl	8003e08 <TIM_OC1Init>

	TIM_Cmd(MotorL1_TIM, ENABLE);
 80069e8:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <ML_GPIO_Config+0x12c>)
 80069ea:	2101      	movs	r1, #1
 80069ec:	0018      	movs	r0, r3
 80069ee:	f7fd f9c5 	bl	8003d7c <TIM_Cmd>
	TIM_Cmd(MotorL2_TIM, ENABLE);
 80069f2:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <ML_GPIO_Config+0x130>)
 80069f4:	2101      	movs	r1, #1
 80069f6:	0018      	movs	r0, r3
 80069f8:	f7fd f9c0 	bl	8003d7c <TIM_Cmd>

	TIM_CtrlPWMOutputs(MotorL1_TIM, ENABLE);
 80069fc:	4b08      	ldr	r3, [pc, #32]	; (8006a20 <ML_GPIO_Config+0x12c>)
 80069fe:	2101      	movs	r1, #1
 8006a00:	0018      	movs	r0, r3
 8006a02:	f7fd f9db 	bl	8003dbc <TIM_CtrlPWMOutputs>
	TIM_CtrlPWMOutputs(MotorL2_TIM, ENABLE);
 8006a06:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <ML_GPIO_Config+0x130>)
 8006a08:	2101      	movs	r1, #1
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f7fd f9d6 	bl	8003dbc <TIM_CtrlPWMOutputs>
}
 8006a10:	46c0      	nop			; (mov r8, r8)
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b00b      	add	sp, #44	; 0x2c
 8006a16:	bd90      	pop	{r4, r7, pc}
 8006a18:	48000400 	.word	0x48000400
 8006a1c:	000003e7 	.word	0x000003e7
 8006a20:	40014400 	.word	0x40014400
 8006a24:	40014800 	.word	0x40014800

08006a28 <MotorControl_ForwardRotating>:
 * @param  id:
 *         dutycycle:
 * @retval None
 */
void MotorControl_ForwardRotating(motor_id_e id, uint32_t dutycycle)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	0002      	movs	r2, r0
 8006a30:	6039      	str	r1, [r7, #0]
 8006a32:	1dfb      	adds	r3, r7, #7
 8006a34:	701a      	strb	r2, [r3, #0]
	uint32_t compare;

	switch (id) {
 8006a36:	1dfb      	adds	r3, r7, #7
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <MotorControl_ForwardRotating+0x1c>
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d023      	beq.n	8006a8a <MotorControl_ForwardRotating+0x62>
			TIM_SetCompare1(MotorR2_TIM, compare);
			TIM_SetCompare2(MotorR1_TIM, 0);
			break;

		default:
			break;
 8006a42:	e045      	b.n	8006ad0 <MotorControl_ForwardRotating+0xa8>
			compare = (dutycycle * MOTOR_TIM_PERIOD) / 100;
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	0013      	movs	r3, r2
 8006a48:	015b      	lsls	r3, r3, #5
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	189b      	adds	r3, r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	2164      	movs	r1, #100	; 0x64
 8006a54:	0018      	movs	r0, r3
 8006a56:	f7f9 fb5f 	bl	8000118 <__udivsi3>
 8006a5a:	0003      	movs	r3, r0
 8006a5c:	60fb      	str	r3, [r7, #12]
			TIM_SetCounter(MotorL1_TIM, 0);
 8006a5e:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <MotorControl_ForwardRotating+0xb0>)
 8006a60:	2100      	movs	r1, #0
 8006a62:	0018      	movs	r0, r3
 8006a64:	f7fd f97e 	bl	8003d64 <TIM_SetCounter>
			TIM_SetCounter(MotorL2_TIM, 0);
 8006a68:	4b1c      	ldr	r3, [pc, #112]	; (8006adc <MotorControl_ForwardRotating+0xb4>)
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f7fd f979 	bl	8003d64 <TIM_SetCounter>
			TIM_SetCompare1(MotorL1_TIM, compare);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <MotorControl_ForwardRotating+0xb0>)
 8006a76:	0019      	movs	r1, r3
 8006a78:	0010      	movs	r0, r2
 8006a7a:	f7fd fbc9 	bl	8004210 <TIM_SetCompare1>
			TIM_SetCompare1(MotorL2_TIM, 0);
 8006a7e:	4b17      	ldr	r3, [pc, #92]	; (8006adc <MotorControl_ForwardRotating+0xb4>)
 8006a80:	2100      	movs	r1, #0
 8006a82:	0018      	movs	r0, r3
 8006a84:	f7fd fbc4 	bl	8004210 <TIM_SetCompare1>
			break;
 8006a88:	e022      	b.n	8006ad0 <MotorControl_ForwardRotating+0xa8>
			compare = (dutycycle * MOTOR_TIM_PERIOD) / 100;
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	0013      	movs	r3, r2
 8006a8e:	015b      	lsls	r3, r3, #5
 8006a90:	1a9b      	subs	r3, r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	189b      	adds	r3, r3, r2
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	2164      	movs	r1, #100	; 0x64
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f7f9 fb3c 	bl	8000118 <__udivsi3>
 8006aa0:	0003      	movs	r3, r0
 8006aa2:	60fb      	str	r3, [r7, #12]
			TIM_SetCounter(MotorR1_TIM, 0);
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <MotorControl_ForwardRotating+0xb8>)
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f7fd f95b 	bl	8003d64 <TIM_SetCounter>
			TIM_SetCounter(MotorR2_TIM, 0);
 8006aae:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <MotorControl_ForwardRotating+0xbc>)
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f7fd f956 	bl	8003d64 <TIM_SetCounter>
			TIM_SetCompare1(MotorR2_TIM, compare);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4a0a      	ldr	r2, [pc, #40]	; (8006ae4 <MotorControl_ForwardRotating+0xbc>)
 8006abc:	0019      	movs	r1, r3
 8006abe:	0010      	movs	r0, r2
 8006ac0:	f7fd fba6 	bl	8004210 <TIM_SetCompare1>
			TIM_SetCompare2(MotorR1_TIM, 0);
 8006ac4:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <MotorControl_ForwardRotating+0xb8>)
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f7fd fbad 	bl	8004228 <TIM_SetCompare2>
			break;
 8006ace:	46c0      	nop			; (mov r8, r8)
	}
}
 8006ad0:	46c0      	nop			; (mov r8, r8)
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	b004      	add	sp, #16
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40014400 	.word	0x40014400
 8006adc:	40014800 	.word	0x40014800
 8006ae0:	40014000 	.word	0x40014000
 8006ae4:	40012c00 	.word	0x40012c00

08006ae8 <MotorControl_ReverseRotating>:
 * @param  id:
 *         dutycycle:
 * @retval None
 */
void MotorControl_ReverseRotating(motor_id_e id, uint32_t dutycycle)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	0002      	movs	r2, r0
 8006af0:	6039      	str	r1, [r7, #0]
 8006af2:	1dfb      	adds	r3, r7, #7
 8006af4:	701a      	strb	r2, [r3, #0]
	uint32_t compare;

	switch (id) {
 8006af6:	1dfb      	adds	r3, r7, #7
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <MotorControl_ReverseRotating+0x1c>
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d023      	beq.n	8006b4a <MotorControl_ReverseRotating+0x62>
			TIM_SetCompare2(MotorR1_TIM, compare);
			TIM_SetCompare1(MotorR2_TIM, 0);
			break;

		default:
			break;
 8006b02:	e045      	b.n	8006b90 <MotorControl_ReverseRotating+0xa8>
			compare = (dutycycle * MOTOR_TIM_PERIOD) / 100;
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	0013      	movs	r3, r2
 8006b08:	015b      	lsls	r3, r3, #5
 8006b0a:	1a9b      	subs	r3, r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	189b      	adds	r3, r3, r2
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	2164      	movs	r1, #100	; 0x64
 8006b14:	0018      	movs	r0, r3
 8006b16:	f7f9 faff 	bl	8000118 <__udivsi3>
 8006b1a:	0003      	movs	r3, r0
 8006b1c:	60fb      	str	r3, [r7, #12]
			TIM_SetCounter(MotorL1_TIM, 0);
 8006b1e:	4b1e      	ldr	r3, [pc, #120]	; (8006b98 <MotorControl_ReverseRotating+0xb0>)
 8006b20:	2100      	movs	r1, #0
 8006b22:	0018      	movs	r0, r3
 8006b24:	f7fd f91e 	bl	8003d64 <TIM_SetCounter>
			TIM_SetCounter(MotorL2_TIM, 0);
 8006b28:	4b1c      	ldr	r3, [pc, #112]	; (8006b9c <MotorControl_ReverseRotating+0xb4>)
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f7fd f919 	bl	8003d64 <TIM_SetCounter>
			TIM_SetCompare1(MotorL2_TIM, compare);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4a19      	ldr	r2, [pc, #100]	; (8006b9c <MotorControl_ReverseRotating+0xb4>)
 8006b36:	0019      	movs	r1, r3
 8006b38:	0010      	movs	r0, r2
 8006b3a:	f7fd fb69 	bl	8004210 <TIM_SetCompare1>
			TIM_SetCompare1(MotorL1_TIM, 0);
 8006b3e:	4b16      	ldr	r3, [pc, #88]	; (8006b98 <MotorControl_ReverseRotating+0xb0>)
 8006b40:	2100      	movs	r1, #0
 8006b42:	0018      	movs	r0, r3
 8006b44:	f7fd fb64 	bl	8004210 <TIM_SetCompare1>
			break;
 8006b48:	e022      	b.n	8006b90 <MotorControl_ReverseRotating+0xa8>
			compare = (dutycycle * MOTOR_TIM_PERIOD) / 100;
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	0013      	movs	r3, r2
 8006b4e:	015b      	lsls	r3, r3, #5
 8006b50:	1a9b      	subs	r3, r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	189b      	adds	r3, r3, r2
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	2164      	movs	r1, #100	; 0x64
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f7f9 fadc 	bl	8000118 <__udivsi3>
 8006b60:	0003      	movs	r3, r0
 8006b62:	60fb      	str	r3, [r7, #12]
			TIM_SetCounter(MotorR1_TIM, 0);
 8006b64:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <MotorControl_ReverseRotating+0xb8>)
 8006b66:	2100      	movs	r1, #0
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f7fd f8fb 	bl	8003d64 <TIM_SetCounter>
			TIM_SetCounter(MotorR2_TIM, 0);
 8006b6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ba4 <MotorControl_ReverseRotating+0xbc>)
 8006b70:	2100      	movs	r1, #0
 8006b72:	0018      	movs	r0, r3
 8006b74:	f7fd f8f6 	bl	8003d64 <TIM_SetCounter>
			TIM_SetCompare2(MotorR1_TIM, compare);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4a09      	ldr	r2, [pc, #36]	; (8006ba0 <MotorControl_ReverseRotating+0xb8>)
 8006b7c:	0019      	movs	r1, r3
 8006b7e:	0010      	movs	r0, r2
 8006b80:	f7fd fb52 	bl	8004228 <TIM_SetCompare2>
			TIM_SetCompare1(MotorR2_TIM, 0);
 8006b84:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <MotorControl_ReverseRotating+0xbc>)
 8006b86:	2100      	movs	r1, #0
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f7fd fb41 	bl	8004210 <TIM_SetCompare1>
			break;
 8006b8e:	46c0      	nop			; (mov r8, r8)
	}
}
 8006b90:	46c0      	nop			; (mov r8, r8)
 8006b92:	46bd      	mov	sp, r7
 8006b94:	b004      	add	sp, #16
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40014400 	.word	0x40014400
 8006b9c:	40014800 	.word	0x40014800
 8006ba0:	40014000 	.word	0x40014000
 8006ba4:	40012c00 	.word	0x40012c00

08006ba8 <LineFollow>:
 * @brief
 * @param  None
 * @retval None
 */
void LineFollow(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0
	/* IR sensor is in the leftmost position */
    if (OpticalSensor_MeasureUseDMAMode(0) > AdcValuesThreshold[0] &&
 8006bac:	2000      	movs	r0, #0
 8006bae:	f000 fd65 	bl	800767c <OpticalSensor_MeasureUseDMAMode>
 8006bb2:	0003      	movs	r3, r0
 8006bb4:	001a      	movs	r2, r3
 8006bb6:	4b31      	ldr	r3, [pc, #196]	; (8006c7c <LineFollow+0xd4>)
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d911      	bls.n	8006be2 <LineFollow+0x3a>
		OpticalSensor_MeasureUseDMAMode(6) < AdcValuesThreshold[6])
 8006bbe:	2006      	movs	r0, #6
 8006bc0:	f000 fd5c 	bl	800767c <OpticalSensor_MeasureUseDMAMode>
 8006bc4:	0003      	movs	r3, r0
 8006bc6:	001a      	movs	r2, r3
 8006bc8:	4b2c      	ldr	r3, [pc, #176]	; (8006c7c <LineFollow+0xd4>)
 8006bca:	899b      	ldrh	r3, [r3, #12]
    if (OpticalSensor_MeasureUseDMAMode(0) > AdcValuesThreshold[0] &&
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d208      	bcs.n	8006be2 <LineFollow+0x3a>
    {
    	/* Turn left */
		MotorControl_ForwardRotating(MOTOR_ID_R, 25);
 8006bd0:	2119      	movs	r1, #25
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	f7ff ff28 	bl	8006a28 <MotorControl_ForwardRotating>
		MotorControl_ReverseRotating(MOTOR_ID_L, 25);
 8006bd8:	2119      	movs	r1, #25
 8006bda:	2000      	movs	r0, #0
 8006bdc:	f7ff ff84 	bl	8006ae8 <MotorControl_ReverseRotating>
 8006be0:	e048      	b.n	8006c74 <LineFollow+0xcc>

    }

    /* IR sensor is in the rightmost position */
    else if (OpticalSensor_MeasureUseDMAMode(0) < AdcValuesThreshold[0] &&
 8006be2:	2000      	movs	r0, #0
 8006be4:	f000 fd4a 	bl	800767c <OpticalSensor_MeasureUseDMAMode>
 8006be8:	0003      	movs	r3, r0
 8006bea:	001a      	movs	r2, r3
 8006bec:	4b23      	ldr	r3, [pc, #140]	; (8006c7c <LineFollow+0xd4>)
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d211      	bcs.n	8006c18 <LineFollow+0x70>
    		 OpticalSensor_MeasureUseDMAMode(6) > AdcValuesThreshold[6])
 8006bf4:	2006      	movs	r0, #6
 8006bf6:	f000 fd41 	bl	800767c <OpticalSensor_MeasureUseDMAMode>
 8006bfa:	0003      	movs	r3, r0
 8006bfc:	001a      	movs	r2, r3
 8006bfe:	4b1f      	ldr	r3, [pc, #124]	; (8006c7c <LineFollow+0xd4>)
 8006c00:	899b      	ldrh	r3, [r3, #12]
    else if (OpticalSensor_MeasureUseDMAMode(0) < AdcValuesThreshold[0] &&
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d908      	bls.n	8006c18 <LineFollow+0x70>
    {
    	/* Turn right */
		MotorControl_ReverseRotating(MOTOR_ID_R, 25);
 8006c06:	2119      	movs	r1, #25
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f7ff ff6d 	bl	8006ae8 <MotorControl_ReverseRotating>
		MotorControl_ForwardRotating(MOTOR_ID_L, 25);
 8006c0e:	2119      	movs	r1, #25
 8006c10:	2000      	movs	r0, #0
 8006c12:	f7ff ff09 	bl	8006a28 <MotorControl_ForwardRotating>
 8006c16:	e02d      	b.n	8006c74 <LineFollow+0xcc>
    }

    /* IR sensor is in the center position */
    else if (OpticalSensor_MeasureUseDMAMode(3) > AdcValuesThreshold[3])
 8006c18:	2003      	movs	r0, #3
 8006c1a:	f000 fd2f 	bl	800767c <OpticalSensor_MeasureUseDMAMode>
 8006c1e:	0003      	movs	r3, r0
 8006c20:	001a      	movs	r2, r3
 8006c22:	4b16      	ldr	r3, [pc, #88]	; (8006c7c <LineFollow+0xd4>)
 8006c24:	88db      	ldrh	r3, [r3, #6]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d924      	bls.n	8006c74 <LineFollow+0xcc>
    {
    	/* Calculate Kp, Ki, Kd used to Follow Line */
		Kp = 0.00001 * (1000 - OpticalSensor_MeasureUseDMAMode(3));
 8006c2a:	2003      	movs	r0, #3
 8006c2c:	f000 fd26 	bl	800767c <OpticalSensor_MeasureUseDMAMode>
 8006c30:	0003      	movs	r3, r0
 8006c32:	001a      	movs	r2, r3
 8006c34:	23fa      	movs	r3, #250	; 0xfa
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f7fb fe90 	bl	8002960 <__aeabi_i2d>
 8006c40:	4a0f      	ldr	r2, [pc, #60]	; (8006c80 <LineFollow+0xd8>)
 8006c42:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <LineFollow+0xdc>)
 8006c44:	f7fb f83a 	bl	8001cbc <__aeabi_dmul>
 8006c48:	0002      	movs	r2, r0
 8006c4a:	000b      	movs	r3, r1
 8006c4c:	0010      	movs	r0, r2
 8006c4e:	0019      	movs	r1, r3
 8006c50:	f7fb feb6 	bl	80029c0 <__aeabi_d2f>
 8006c54:	1c02      	adds	r2, r0, #0
 8006c56:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <LineFollow+0xe0>)
 8006c58:	601a      	str	r2, [r3, #0]
		Kd = 50 * Kp;
 8006c5a:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <LineFollow+0xe0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	490b      	ldr	r1, [pc, #44]	; (8006c8c <LineFollow+0xe4>)
 8006c60:	1c18      	adds	r0, r3, #0
 8006c62:	f7f9 fdab 	bl	80007bc <__aeabi_fmul>
 8006c66:	1c03      	adds	r3, r0, #0
 8006c68:	1c1a      	adds	r2, r3, #0
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <LineFollow+0xe8>)
 8006c6c:	601a      	str	r2, [r3, #0]
//      Ki = 0.0000001;
		PID_Control();
 8006c6e:	f000 f811 	bl	8006c94 <PID_Control>
    }
}
 8006c72:	e7ff      	b.n	8006c74 <LineFollow+0xcc>
 8006c74:	46c0      	nop			; (mov r8, r8)
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	20000150 	.word	0x20000150
 8006c80:	88e368f1 	.word	0x88e368f1
 8006c84:	3ee4f8b5 	.word	0x3ee4f8b5
 8006c88:	20000174 	.word	0x20000174
 8006c8c:	42480000 	.word	0x42480000
 8006c90:	2000017c 	.word	0x2000017c

08006c94 <PID_Control>:
 * @brief
 * @param  None
 * @retval None
 */
void PID_Control(void)
{
 8006c94:	b590      	push	{r4, r7, lr}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
	/* Calculate error */
	int error = (OpticalSensor_MeasureUseDMAMode(1) - OpticalSensor_MeasureUseDMAMode(5));
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	f000 fcee 	bl	800767c <OpticalSensor_MeasureUseDMAMode>
 8006ca0:	0003      	movs	r3, r0
 8006ca2:	001c      	movs	r4, r3
 8006ca4:	2005      	movs	r0, #5
 8006ca6:	f000 fce9 	bl	800767c <OpticalSensor_MeasureUseDMAMode>
 8006caa:	0003      	movs	r3, r0
 8006cac:	1ae3      	subs	r3, r4, r3
 8006cae:	607b      	str	r3, [r7, #4]

	P =  error;
 8006cb0:	4b4c      	ldr	r3, [pc, #304]	; (8006de4 <PID_Control+0x150>)
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	601a      	str	r2, [r3, #0]
	I += error;
 8006cb6:	4b4c      	ldr	r3, [pc, #304]	; (8006de8 <PID_Control+0x154>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	18d2      	adds	r2, r2, r3
 8006cbe:	4b4a      	ldr	r3, [pc, #296]	; (8006de8 <PID_Control+0x154>)
 8006cc0:	601a      	str	r2, [r3, #0]
	D =  error - previousError;
 8006cc2:	4b4a      	ldr	r3, [pc, #296]	; (8006dec <PID_Control+0x158>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	1ad2      	subs	r2, r2, r3
 8006cca:	4b49      	ldr	r3, [pc, #292]	; (8006df0 <PID_Control+0x15c>)
 8006ccc:	601a      	str	r2, [r3, #0]

	PIDvalue = ((Kp * P) + (Ki * I) + (Kd * D));
 8006cce:	4b45      	ldr	r3, [pc, #276]	; (8006de4 <PID_Control+0x150>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f7fa f866 	bl	8000da4 <__aeabi_i2f>
 8006cd8:	1c02      	adds	r2, r0, #0
 8006cda:	4b46      	ldr	r3, [pc, #280]	; (8006df4 <PID_Control+0x160>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	1c19      	adds	r1, r3, #0
 8006ce0:	1c10      	adds	r0, r2, #0
 8006ce2:	f7f9 fd6b 	bl	80007bc <__aeabi_fmul>
 8006ce6:	1c03      	adds	r3, r0, #0
 8006ce8:	1c1c      	adds	r4, r3, #0
 8006cea:	4b3f      	ldr	r3, [pc, #252]	; (8006de8 <PID_Control+0x154>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	0018      	movs	r0, r3
 8006cf0:	f7fa f858 	bl	8000da4 <__aeabi_i2f>
 8006cf4:	1c02      	adds	r2, r0, #0
 8006cf6:	4b40      	ldr	r3, [pc, #256]	; (8006df8 <PID_Control+0x164>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	1c19      	adds	r1, r3, #0
 8006cfc:	1c10      	adds	r0, r2, #0
 8006cfe:	f7f9 fd5d 	bl	80007bc <__aeabi_fmul>
 8006d02:	1c03      	adds	r3, r0, #0
 8006d04:	1c19      	adds	r1, r3, #0
 8006d06:	1c20      	adds	r0, r4, #0
 8006d08:	f7f9 fbba 	bl	8000480 <__aeabi_fadd>
 8006d0c:	1c03      	adds	r3, r0, #0
 8006d0e:	1c1c      	adds	r4, r3, #0
 8006d10:	4b37      	ldr	r3, [pc, #220]	; (8006df0 <PID_Control+0x15c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	0018      	movs	r0, r3
 8006d16:	f7fa f845 	bl	8000da4 <__aeabi_i2f>
 8006d1a:	1c02      	adds	r2, r0, #0
 8006d1c:	4b37      	ldr	r3, [pc, #220]	; (8006dfc <PID_Control+0x168>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	1c19      	adds	r1, r3, #0
 8006d22:	1c10      	adds	r0, r2, #0
 8006d24:	f7f9 fd4a 	bl	80007bc <__aeabi_fmul>
 8006d28:	1c03      	adds	r3, r0, #0
 8006d2a:	1c19      	adds	r1, r3, #0
 8006d2c:	1c20      	adds	r0, r4, #0
 8006d2e:	f7f9 fba7 	bl	8000480 <__aeabi_fadd>
 8006d32:	1c03      	adds	r3, r0, #0
 8006d34:	1c1a      	adds	r2, r3, #0
 8006d36:	4b32      	ldr	r3, [pc, #200]	; (8006e00 <PID_Control+0x16c>)
 8006d38:	601a      	str	r2, [r3, #0]
	previousError = error;
 8006d3a:	4b2c      	ldr	r3, [pc, #176]	; (8006dec <PID_Control+0x158>)
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	601a      	str	r2, [r3, #0]

	lsp = lfspeed - PIDvalue;
 8006d40:	4b30      	ldr	r3, [pc, #192]	; (8006e04 <PID_Control+0x170>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	0018      	movs	r0, r3
 8006d46:	f7fa f82d 	bl	8000da4 <__aeabi_i2f>
 8006d4a:	1c02      	adds	r2, r0, #0
 8006d4c:	4b2c      	ldr	r3, [pc, #176]	; (8006e00 <PID_Control+0x16c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	1c19      	adds	r1, r3, #0
 8006d52:	1c10      	adds	r0, r2, #0
 8006d54:	f7f9 fe58 	bl	8000a08 <__aeabi_fsub>
 8006d58:	1c03      	adds	r3, r0, #0
 8006d5a:	1c18      	adds	r0, r3, #0
 8006d5c:	f7fa f802 	bl	8000d64 <__aeabi_f2iz>
 8006d60:	0002      	movs	r2, r0
 8006d62:	4b29      	ldr	r3, [pc, #164]	; (8006e08 <PID_Control+0x174>)
 8006d64:	601a      	str	r2, [r3, #0]
	rsp = lfspeed + PIDvalue;
 8006d66:	4b27      	ldr	r3, [pc, #156]	; (8006e04 <PID_Control+0x170>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	f7fa f81a 	bl	8000da4 <__aeabi_i2f>
 8006d70:	1c02      	adds	r2, r0, #0
 8006d72:	4b23      	ldr	r3, [pc, #140]	; (8006e00 <PID_Control+0x16c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	1c19      	adds	r1, r3, #0
 8006d78:	1c10      	adds	r0, r2, #0
 8006d7a:	f7f9 fb81 	bl	8000480 <__aeabi_fadd>
 8006d7e:	1c03      	adds	r3, r0, #0
 8006d80:	1c18      	adds	r0, r3, #0
 8006d82:	f7f9 ffef 	bl	8000d64 <__aeabi_f2iz>
 8006d86:	0002      	movs	r2, r0
 8006d88:	4b20      	ldr	r3, [pc, #128]	; (8006e0c <PID_Control+0x178>)
 8006d8a:	601a      	str	r2, [r3, #0]

	if (lsp > 100) 	lsp = 100;
 8006d8c:	4b1e      	ldr	r3, [pc, #120]	; (8006e08 <PID_Control+0x174>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b64      	cmp	r3, #100	; 0x64
 8006d92:	dd02      	ble.n	8006d9a <PID_Control+0x106>
 8006d94:	4b1c      	ldr	r3, [pc, #112]	; (8006e08 <PID_Control+0x174>)
 8006d96:	2264      	movs	r2, #100	; 0x64
 8006d98:	601a      	str	r2, [r3, #0]

	if (lsp < 0) 	lsp = 0;
 8006d9a:	4b1b      	ldr	r3, [pc, #108]	; (8006e08 <PID_Control+0x174>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da02      	bge.n	8006da8 <PID_Control+0x114>
 8006da2:	4b19      	ldr	r3, [pc, #100]	; (8006e08 <PID_Control+0x174>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

	if (rsp > 100) 	rsp = 100;
 8006da8:	4b18      	ldr	r3, [pc, #96]	; (8006e0c <PID_Control+0x178>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b64      	cmp	r3, #100	; 0x64
 8006dae:	dd02      	ble.n	8006db6 <PID_Control+0x122>
 8006db0:	4b16      	ldr	r3, [pc, #88]	; (8006e0c <PID_Control+0x178>)
 8006db2:	2264      	movs	r2, #100	; 0x64
 8006db4:	601a      	str	r2, [r3, #0]

	if (rsp < 0) 	rsp = 0;
 8006db6:	4b15      	ldr	r3, [pc, #84]	; (8006e0c <PID_Control+0x178>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	da02      	bge.n	8006dc4 <PID_Control+0x130>
 8006dbe:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <PID_Control+0x178>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]

	MotorControl_ForwardRotating(MOTOR_ID_R, rsp);
 8006dc4:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <PID_Control+0x178>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	0019      	movs	r1, r3
 8006dca:	2001      	movs	r0, #1
 8006dcc:	f7ff fe2c 	bl	8006a28 <MotorControl_ForwardRotating>
	MotorControl_ForwardRotating(MOTOR_ID_L, lsp);
 8006dd0:	4b0d      	ldr	r3, [pc, #52]	; (8006e08 <PID_Control+0x174>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	0019      	movs	r1, r3
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	f7ff fe26 	bl	8006a28 <MotorControl_ForwardRotating>
}
 8006ddc:	46c0      	nop			; (mov r8, r8)
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b003      	add	sp, #12
 8006de2:	bd90      	pop	{r4, r7, pc}
 8006de4:	20000160 	.word	0x20000160
 8006de8:	20000164 	.word	0x20000164
 8006dec:	2000016c 	.word	0x2000016c
 8006df0:	20000168 	.word	0x20000168
 8006df4:	20000174 	.word	0x20000174
 8006df8:	20000178 	.word	0x20000178
 8006dfc:	2000017c 	.word	0x2000017c
 8006e00:	20000170 	.word	0x20000170
 8006e04:	20000050 	.word	0x20000050
 8006e08:	20000180 	.word	0x20000180
 8006e0c:	20000184 	.word	0x20000184

08006e10 <Check_InLine>:
 * @brief  Check IR sensor In Line or Out Line
 * @param  None
 * @retval Number IR sensor In Line and Out Line
 */
uint8_t Check_InLine(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++){
 8006e16:	1dfb      	adds	r3, r7, #7
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e01f      	b.n	8006e5e <Check_InLine+0x4e>
		if(OpticalSensor_MeasureUseDMAMode(i) > AdcValuesThreshold[i]) {
 8006e1e:	1dfb      	adds	r3, r7, #7
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	0018      	movs	r0, r3
 8006e24:	f000 fc2a 	bl	800767c <OpticalSensor_MeasureUseDMAMode>
 8006e28:	0003      	movs	r3, r0
 8006e2a:	0019      	movs	r1, r3
 8006e2c:	1dfb      	adds	r3, r7, #7
 8006e2e:	781a      	ldrb	r2, [r3, #0]
 8006e30:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <Check_InLine+0x78>)
 8006e32:	0052      	lsls	r2, r2, #1
 8006e34:	5ad3      	ldrh	r3, [r2, r3]
 8006e36:	4299      	cmp	r1, r3
 8006e38:	d906      	bls.n	8006e48 <Check_InLine+0x38>
			count++;
 8006e3a:	4b14      	ldr	r3, [pc, #80]	; (8006e8c <Check_InLine+0x7c>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	4b12      	ldr	r3, [pc, #72]	; (8006e8c <Check_InLine+0x7c>)
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	e005      	b.n	8006e54 <Check_InLine+0x44>
		}
		else {
			count--;
 8006e48:	4b10      	ldr	r3, [pc, #64]	; (8006e8c <Check_InLine+0x7c>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	4b0e      	ldr	r3, [pc, #56]	; (8006e8c <Check_InLine+0x7c>)
 8006e52:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++){
 8006e54:	1dfb      	adds	r3, r7, #7
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	1dfb      	adds	r3, r7, #7
 8006e5a:	3201      	adds	r2, #1
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	1dfb      	adds	r3, r7, #7
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b06      	cmp	r3, #6
 8006e64:	d9db      	bls.n	8006e1e <Check_InLine+0xe>
		}
	}

	if (count == 6 || count == -6){
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <Check_InLine+0x7c>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b06      	cmp	r3, #6
 8006e6c:	d104      	bne.n	8006e78 <Check_InLine+0x68>
		count = 0;
 8006e6e:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <Check_InLine+0x7c>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]
		return 1;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e003      	b.n	8006e80 <Check_InLine+0x70>
	}
	else {
		count = 0;
 8006e78:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <Check_InLine+0x7c>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
		return 0;
 8006e7e:	2300      	movs	r3, #0
	}
}
 8006e80:	0018      	movs	r0, r3
 8006e82:	46bd      	mov	sp, r7
 8006e84:	b002      	add	sp, #8
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20000150 	.word	0x20000150
 8006e8c:	20000188 	.word	0x20000188

08006e90 <MotorControl_PID>:
 * @brief
 * @param  None
 * @retval None
 */
void MotorControl_PID(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
	if (Check_InLine()){
 8006e94:	f7ff ffbc 	bl	8006e10 <Check_InLine>
 8006e98:	1e03      	subs	r3, r0, #0
 8006e9a:	d019      	beq.n	8006ed0 <MotorControl_PID+0x40>
		if (previousError > 0) {
 8006e9c:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <MotorControl_PID+0x4c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dd08      	ble.n	8006eb6 <MotorControl_PID+0x26>
			MotorControl_ForwardRotating(MOTOR_ID_R, 40);
 8006ea4:	2128      	movs	r1, #40	; 0x28
 8006ea6:	2001      	movs	r0, #1
 8006ea8:	f7ff fdbe 	bl	8006a28 <MotorControl_ForwardRotating>
			MotorControl_ForwardRotating(MOTOR_ID_L, 0);
 8006eac:	2100      	movs	r1, #0
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f7ff fdba 	bl	8006a28 <MotorControl_ForwardRotating>
	}

	else {
		LineFollow();
	}
}
 8006eb4:	e00e      	b.n	8006ed4 <MotorControl_PID+0x44>
		else if (previousError < 0) {
 8006eb6:	4b09      	ldr	r3, [pc, #36]	; (8006edc <MotorControl_PID+0x4c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	da0a      	bge.n	8006ed4 <MotorControl_PID+0x44>
			MotorControl_ForwardRotating(MOTOR_ID_R, 0);
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	2001      	movs	r0, #1
 8006ec2:	f7ff fdb1 	bl	8006a28 <MotorControl_ForwardRotating>
			MotorControl_ForwardRotating(MOTOR_ID_L, 40);
 8006ec6:	2128      	movs	r1, #40	; 0x28
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f7ff fdad 	bl	8006a28 <MotorControl_ForwardRotating>
}
 8006ece:	e001      	b.n	8006ed4 <MotorControl_PID+0x44>
		LineFollow();
 8006ed0:	f7ff fe6a 	bl	8006ba8 <LineFollow>
}
 8006ed4:	46c0      	nop			; (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	2000016c 	.word	0x2000016c

08006ee0 <EventSchedulerInit>:
 * @retval None
 */
void
EventSchedulerInit(
    app_state_callback func
) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
    if (func != NULL) {
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <EventSchedulerInit+0x22>
        pAppStateFunc = func;
 8006eee:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <EventSchedulerInit+0x2c>)
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]
        bufInit(pBuffEvent, &eventQueue, sizeof(uint8_t), SIZE_EVENT_QUEUE);
 8006ef4:	2380      	movs	r3, #128	; 0x80
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	4905      	ldr	r1, [pc, #20]	; (8006f10 <EventSchedulerInit+0x30>)
 8006efa:	4806      	ldr	r0, [pc, #24]	; (8006f14 <EventSchedulerInit+0x34>)
 8006efc:	2201      	movs	r2, #1
 8006efe:	f000 fda9 	bl	8007a54 <bufInit>
    }
}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	46bd      	mov	sp, r7
 8006f06:	b002      	add	sp, #8
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	2000018c 	.word	0x2000018c
 8006f10:	20000290 	.word	0x20000290
 8006f14:	20000190 	.word	0x20000190

08006f18 <EventSchedulerAdd>:
 * @retval None
 */
type_status_t
EventSchedulerAdd(
    const uint8_t pvItemToQueue
) {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	0002      	movs	r2, r0
 8006f20:	1dfb      	adds	r3, r7, #7
 8006f22:	701a      	strb	r2, [r3, #0]
    if (bufEnDat(&eventQueue, (uint8_t *)&pvItemToQueue) == ERR_OK) {
 8006f24:	1dfa      	adds	r2, r7, #7
 8006f26:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <EventSchedulerAdd+0x2c>)
 8006f28:	0011      	movs	r1, r2
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f000 fde9 	bl	8007b02 <bufEnDat>
 8006f30:	1e03      	subs	r3, r0, #0
 8006f32:	d101      	bne.n	8006f38 <EventSchedulerAdd+0x20>
        return EVT_SUCCESS;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e000      	b.n	8006f3a <EventSchedulerAdd+0x22>
    }
    
    return EVT_FAIL;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	b002      	add	sp, #8
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	20000290 	.word	0x20000290

08006f48 <processEventScheduler>:
 * @brief  Proccess event in queue
 * @param  None
 * @retval None
 */
void
processEventScheduler(void) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
	uint8_t event;
    
    if (pAppStateFunc != NULL) {
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <processEventScheduler+0x34>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00d      	beq.n	8006f72 <processEventScheduler+0x2a>
        if (bufDeDat(&eventQueue, (uint8_t *)&event) == ERR_OK) {
 8006f56:	1dfa      	adds	r2, r7, #7
 8006f58:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <processEventScheduler+0x38>)
 8006f5a:	0011      	movs	r1, r2
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f000 fe28 	bl	8007bb2 <bufDeDat>
 8006f62:	1e03      	subs	r3, r0, #0
 8006f64:	d105      	bne.n	8006f72 <processEventScheduler+0x2a>
            pAppStateFunc(event);
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <processEventScheduler+0x34>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	1dfa      	adds	r2, r7, #7
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	0010      	movs	r0, r2
 8006f70:	4798      	blx	r3
        }
    }
}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	46bd      	mov	sp, r7
 8006f76:	b002      	add	sp, #8
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	2000018c 	.word	0x2000018c
 8006f80:	20000290 	.word	0x20000290

08006f84 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f84:	b590      	push	{r4, r7, lr}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	0002      	movs	r2, r0
 8006f8c:	6039      	str	r1, [r7, #0]
 8006f8e:	1dfb      	adds	r3, r7, #7
 8006f90:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 8006f92:	1dfb      	adds	r3, r7, #7
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b7f      	cmp	r3, #127	; 0x7f
 8006f98:	d932      	bls.n	8007000 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8006f9a:	4a2f      	ldr	r2, [pc, #188]	; (8007058 <NVIC_SetPriority+0xd4>)
 8006f9c:	1dfb      	adds	r3, r7, #7
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	0019      	movs	r1, r3
 8006fa2:	230f      	movs	r3, #15
 8006fa4:	400b      	ands	r3, r1
 8006fa6:	3b08      	subs	r3, #8
 8006fa8:	089b      	lsrs	r3, r3, #2
 8006faa:	3306      	adds	r3, #6
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	18d3      	adds	r3, r2, r3
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	1dfa      	adds	r2, r7, #7
 8006fb6:	7812      	ldrb	r2, [r2, #0]
 8006fb8:	0011      	movs	r1, r2
 8006fba:	2203      	movs	r2, #3
 8006fbc:	400a      	ands	r2, r1
 8006fbe:	00d2      	lsls	r2, r2, #3
 8006fc0:	21ff      	movs	r1, #255	; 0xff
 8006fc2:	4091      	lsls	r1, r2
 8006fc4:	000a      	movs	r2, r1
 8006fc6:	43d2      	mvns	r2, r2
 8006fc8:	401a      	ands	r2, r3
 8006fca:	0011      	movs	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	019b      	lsls	r3, r3, #6
 8006fd0:	22ff      	movs	r2, #255	; 0xff
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	1dfb      	adds	r3, r7, #7
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	0018      	movs	r0, r3
 8006fda:	2303      	movs	r3, #3
 8006fdc:	4003      	ands	r3, r0
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8006fe2:	481d      	ldr	r0, [pc, #116]	; (8007058 <NVIC_SetPriority+0xd4>)
 8006fe4:	1dfb      	adds	r3, r7, #7
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	001c      	movs	r4, r3
 8006fea:	230f      	movs	r3, #15
 8006fec:	4023      	ands	r3, r4
 8006fee:	3b08      	subs	r3, #8
 8006ff0:	089b      	lsrs	r3, r3, #2
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	3306      	adds	r3, #6
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	18c3      	adds	r3, r0, r3
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 8006ffe:	e027      	b.n	8007050 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8007000:	4a16      	ldr	r2, [pc, #88]	; (800705c <NVIC_SetPriority+0xd8>)
 8007002:	1dfb      	adds	r3, r7, #7
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b25b      	sxtb	r3, r3
 8007008:	089b      	lsrs	r3, r3, #2
 800700a:	33c0      	adds	r3, #192	; 0xc0
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	589b      	ldr	r3, [r3, r2]
 8007010:	1dfa      	adds	r2, r7, #7
 8007012:	7812      	ldrb	r2, [r2, #0]
 8007014:	0011      	movs	r1, r2
 8007016:	2203      	movs	r2, #3
 8007018:	400a      	ands	r2, r1
 800701a:	00d2      	lsls	r2, r2, #3
 800701c:	21ff      	movs	r1, #255	; 0xff
 800701e:	4091      	lsls	r1, r2
 8007020:	000a      	movs	r2, r1
 8007022:	43d2      	mvns	r2, r2
 8007024:	401a      	ands	r2, r3
 8007026:	0011      	movs	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	019b      	lsls	r3, r3, #6
 800702c:	22ff      	movs	r2, #255	; 0xff
 800702e:	401a      	ands	r2, r3
 8007030:	1dfb      	adds	r3, r7, #7
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	0018      	movs	r0, r3
 8007036:	2303      	movs	r3, #3
 8007038:	4003      	ands	r3, r0
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800703e:	4807      	ldr	r0, [pc, #28]	; (800705c <NVIC_SetPriority+0xd8>)
 8007040:	1dfb      	adds	r3, r7, #7
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	b25b      	sxtb	r3, r3
 8007046:	089b      	lsrs	r3, r3, #2
 8007048:	430a      	orrs	r2, r1
 800704a:	33c0      	adds	r3, #192	; 0xc0
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	501a      	str	r2, [r3, r0]
}
 8007050:	46c0      	nop			; (mov r8, r8)
 8007052:	46bd      	mov	sp, r7
 8007054:	b003      	add	sp, #12
 8007056:	bd90      	pop	{r4, r7, pc}
 8007058:	e000ed00 	.word	0xe000ed00
 800705c:	e000e100 	.word	0xe000e100

08007060 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	2380      	movs	r3, #128	; 0x80
 800706e:	045b      	lsls	r3, r3, #17
 8007070:	429a      	cmp	r2, r3
 8007072:	d301      	bcc.n	8007078 <SysTick_Config+0x18>
 8007074:	2301      	movs	r3, #1
 8007076:	e010      	b.n	800709a <SysTick_Config+0x3a>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8007078:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <SysTick_Config+0x44>)
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	3a01      	subs	r2, #1
 800707e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8007080:	2301      	movs	r3, #1
 8007082:	425b      	negs	r3, r3
 8007084:	2103      	movs	r1, #3
 8007086:	0018      	movs	r0, r3
 8007088:	f7ff ff7c 	bl	8006f84 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <SysTick_Config+0x44>)
 800708e:	2200      	movs	r2, #0
 8007090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007092:	4b04      	ldr	r3, [pc, #16]	; (80070a4 <SysTick_Config+0x44>)
 8007094:	2207      	movs	r2, #7
 8007096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8007098:	2300      	movs	r3, #0
}
 800709a:	0018      	movs	r0, r3
 800709c:	46bd      	mov	sp, r7
 800709e:	b002      	add	sp, #8
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	e000e010 	.word	0xe000e010

080070a8 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08a      	sub	sp, #40	; 0x28
 80070ac:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 80070ae:	003b      	movs	r3, r7
 80070b0:	0018      	movs	r0, r3
 80070b2:	f7fc facb 	bl	800364c <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 80070b6:	003b      	movs	r3, r7
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	22fa      	movs	r2, #250	; 0xfa
 80070bc:	0091      	lsls	r1, r2, #2
 80070be:	0018      	movs	r0, r3
 80070c0:	f7f9 f82a 	bl	8000118 <__udivsi3>
 80070c4:	0003      	movs	r3, r0
 80070c6:	0018      	movs	r0, r3
 80070c8:	f7ff ffca 	bl	8007060 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 80070cc:	2301      	movs	r3, #1
 80070ce:	425b      	negs	r3, r3
 80070d0:	2101      	movs	r1, #1
 80070d2:	0018      	movs	r0, r3
 80070d4:	f7ff ff56 	bl	8006f84 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 80070d8:	23c0      	movs	r3, #192	; 0xc0
 80070da:	005a      	lsls	r2, r3, #1
 80070dc:	4b04      	ldr	r3, [pc, #16]	; (80070f0 <TimerInit+0x48>)
 80070de:	2100      	movs	r1, #0
 80070e0:	0018      	movs	r0, r3
 80070e2:	f000 fdb3 	bl	8007c4c <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	46bd      	mov	sp, r7
 80070ea:	b00a      	add	sp, #40	; 0x28
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	200002a0 	.word	0x200002a0

080070f4 <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 80070f4:	b5b0      	push	{r4, r5, r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	1dfb      	adds	r3, r7, #7
 8007102:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8007104:	2317      	movs	r3, #23
 8007106:	18fb      	adds	r3, r7, r3
 8007108:	2200      	movs	r2, #0
 800710a:	701a      	strb	r2, [r3, #0]
 800710c:	e05a      	b.n	80071c4 <TimerStart+0xd0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 800710e:	2017      	movs	r0, #23
 8007110:	183b      	adds	r3, r7, r0
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	4930      	ldr	r1, [pc, #192]	; (80071d8 <TimerStart+0xe4>)
 8007116:	0013      	movs	r3, r2
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	189b      	adds	r3, r3, r2
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	18cb      	adds	r3, r1, r3
 8007120:	3310      	adds	r3, #16
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d147      	bne.n	80071b8 <TimerStart+0xc4>
        {
            g_pTimerHandle[i].name = name;
 8007128:	183b      	adds	r3, r7, r0
 800712a:	781a      	ldrb	r2, [r3, #0]
 800712c:	492a      	ldr	r1, [pc, #168]	; (80071d8 <TimerStart+0xe4>)
 800712e:	0013      	movs	r3, r2
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	189b      	adds	r3, r3, r2
 8007134:	00db      	lsls	r3, r3, #3
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	505a      	str	r2, [r3, r1]
            g_pTimerHandle[i].callbackFunc = callback;
 800713a:	183b      	adds	r3, r7, r0
 800713c:	781a      	ldrb	r2, [r3, #0]
 800713e:	4926      	ldr	r1, [pc, #152]	; (80071d8 <TimerStart+0xe4>)
 8007140:	0013      	movs	r3, r2
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	189b      	adds	r3, r3, r2
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	18cb      	adds	r3, r1, r3
 800714a:	3310      	adds	r3, #16
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 8007150:	183b      	adds	r3, r7, r0
 8007152:	781a      	ldrb	r2, [r3, #0]
 8007154:	4920      	ldr	r1, [pc, #128]	; (80071d8 <TimerStart+0xe4>)
 8007156:	0013      	movs	r3, r2
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	189b      	adds	r3, r3, r2
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	18cb      	adds	r3, r1, r3
 8007160:	330c      	adds	r3, #12
 8007162:	1dfa      	adds	r2, r7, #7
 8007164:	7812      	ldrb	r2, [r2, #0]
 8007166:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 8007168:	183b      	adds	r3, r7, r0
 800716a:	781a      	ldrb	r2, [r3, #0]
 800716c:	491a      	ldr	r1, [pc, #104]	; (80071d8 <TimerStart+0xe4>)
 800716e:	0013      	movs	r3, r2
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	189b      	adds	r3, r3, r2
 8007174:	00db      	lsls	r3, r3, #3
 8007176:	18cb      	adds	r3, r1, r3
 8007178:	3314      	adds	r3, #20
 800717a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800717c:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 800717e:	0005      	movs	r5, r0
 8007180:	183b      	adds	r3, r7, r0
 8007182:	781c      	ldrb	r4, [r3, #0]
 8007184:	f000 f87e 	bl	8007284 <GetMilSecTick>
 8007188:	0001      	movs	r1, r0
 800718a:	4a13      	ldr	r2, [pc, #76]	; (80071d8 <TimerStart+0xe4>)
 800718c:	0023      	movs	r3, r4
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	191b      	adds	r3, r3, r4
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	18d3      	adds	r3, r2, r3
 8007196:	3304      	adds	r3, #4
 8007198:	6019      	str	r1, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 800719a:	0028      	movs	r0, r5
 800719c:	183b      	adds	r3, r7, r0
 800719e:	781a      	ldrb	r2, [r3, #0]
 80071a0:	490d      	ldr	r1, [pc, #52]	; (80071d8 <TimerStart+0xe4>)
 80071a2:	0013      	movs	r3, r2
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	189b      	adds	r3, r3, r2
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	18cb      	adds	r3, r1, r3
 80071ac:	3308      	adds	r3, #8
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 80071b2:	183b      	adds	r3, r7, r0
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	e00b      	b.n	80071d0 <TimerStart+0xdc>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80071b8:	2117      	movs	r1, #23
 80071ba:	187b      	adds	r3, r7, r1
 80071bc:	781a      	ldrb	r2, [r3, #0]
 80071be:	187b      	adds	r3, r7, r1
 80071c0:	3201      	adds	r2, #1
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	2317      	movs	r3, #23
 80071c6:	18fb      	adds	r3, r7, r3
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b0f      	cmp	r3, #15
 80071cc:	d99f      	bls.n	800710e <TimerStart+0x1a>
        }
    }
    
    return NO_TIMER;
 80071ce:	23ff      	movs	r3, #255	; 0xff
}
 80071d0:	0018      	movs	r0, r3
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b006      	add	sp, #24
 80071d6:	bdb0      	pop	{r4, r5, r7, pc}
 80071d8:	200002a0 	.word	0x200002a0

080071dc <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	0002      	movs	r2, r0
 80071e4:	1dfb      	adds	r3, r7, #7
 80071e6:	701a      	strb	r2, [r3, #0]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 80071e8:	1dfb      	adds	r3, r7, #7
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b0f      	cmp	r3, #15
 80071ee:	d80b      	bhi.n	8007208 <TimerStop+0x2c>
 80071f0:	1dfb      	adds	r3, r7, #7
 80071f2:	781a      	ldrb	r2, [r3, #0]
 80071f4:	4922      	ldr	r1, [pc, #136]	; (8007280 <TimerStop+0xa4>)
 80071f6:	0013      	movs	r3, r2
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	189b      	adds	r3, r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	18cb      	adds	r3, r1, r3
 8007200:	3310      	adds	r3, #16
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <TimerStop+0x30>
        return 0;
 8007208:	2300      	movs	r3, #0
 800720a:	e035      	b.n	8007278 <TimerStop+0x9c>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 800720c:	1dfb      	adds	r3, r7, #7
 800720e:	781a      	ldrb	r2, [r3, #0]
 8007210:	491b      	ldr	r1, [pc, #108]	; (8007280 <TimerStop+0xa4>)
 8007212:	0013      	movs	r3, r2
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	189b      	adds	r3, r3, r2
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	2200      	movs	r2, #0
 800721c:	505a      	str	r2, [r3, r1]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 800721e:	1dfb      	adds	r3, r7, #7
 8007220:	781a      	ldrb	r2, [r3, #0]
 8007222:	4917      	ldr	r1, [pc, #92]	; (8007280 <TimerStop+0xa4>)
 8007224:	0013      	movs	r3, r2
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	189b      	adds	r3, r3, r2
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	18cb      	adds	r3, r1, r3
 800722e:	3310      	adds	r3, #16
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 8007234:	1dfb      	adds	r3, r7, #7
 8007236:	781a      	ldrb	r2, [r3, #0]
 8007238:	4911      	ldr	r1, [pc, #68]	; (8007280 <TimerStop+0xa4>)
 800723a:	0013      	movs	r3, r2
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	189b      	adds	r3, r3, r2
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	18cb      	adds	r3, r1, r3
 8007244:	330c      	adds	r3, #12
 8007246:	2200      	movs	r2, #0
 8007248:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 800724a:	1dfb      	adds	r3, r7, #7
 800724c:	781a      	ldrb	r2, [r3, #0]
 800724e:	490c      	ldr	r1, [pc, #48]	; (8007280 <TimerStop+0xa4>)
 8007250:	0013      	movs	r3, r2
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	189b      	adds	r3, r3, r2
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	18cb      	adds	r3, r1, r3
 800725a:	3308      	adds	r3, #8
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 8007260:	1dfb      	adds	r3, r7, #7
 8007262:	781a      	ldrb	r2, [r3, #0]
 8007264:	4906      	ldr	r1, [pc, #24]	; (8007280 <TimerStop+0xa4>)
 8007266:	0013      	movs	r3, r2
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	189b      	adds	r3, r3, r2
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	18cb      	adds	r3, r1, r3
 8007270:	3304      	adds	r3, #4
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]
    
    return 1;
 8007276:	2301      	movs	r3, #1
}
 8007278:	0018      	movs	r0, r3
 800727a:	46bd      	mov	sp, r7
 800727c:	b002      	add	sp, #8
 800727e:	bd80      	pop	{r7, pc}
 8007280:	200002a0 	.word	0x200002a0

08007284 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8007288:	4b02      	ldr	r3, [pc, #8]	; (8007294 <GetMilSecTick+0x10>)
 800728a:	681b      	ldr	r3, [r3, #0]
}
 800728c:	0018      	movs	r0, r3
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	20000420 	.word	0x20000420

08007298 <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 8007298:	b590      	push	{r4, r7, lr}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 800729e:	230f      	movs	r3, #15
 80072a0:	18fb      	adds	r3, r7, r3
 80072a2:	2200      	movs	r2, #0
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	e078      	b.n	800739a <processTimerScheduler+0x102>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 80072a8:	200f      	movs	r0, #15
 80072aa:	183b      	adds	r3, r7, r0
 80072ac:	781a      	ldrb	r2, [r3, #0]
 80072ae:	4940      	ldr	r1, [pc, #256]	; (80073b0 <processTimerScheduler+0x118>)
 80072b0:	0013      	movs	r3, r2
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	189b      	adds	r3, r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	18cb      	adds	r3, r1, r3
 80072ba:	3310      	adds	r3, #16
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d065      	beq.n	800738e <processTimerScheduler+0xf6>
 80072c2:	0004      	movs	r4, r0
 80072c4:	183b      	adds	r3, r7, r0
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	0018      	movs	r0, r3
 80072ca:	f000 f873 	bl	80073b4 <TimeExpired>
 80072ce:	1e03      	subs	r3, r0, #0
 80072d0:	d05d      	beq.n	800738e <processTimerScheduler+0xf6>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 80072d2:	0020      	movs	r0, r4
 80072d4:	183b      	adds	r3, r7, r0
 80072d6:	781a      	ldrb	r2, [r3, #0]
 80072d8:	4935      	ldr	r1, [pc, #212]	; (80073b0 <processTimerScheduler+0x118>)
 80072da:	0013      	movs	r3, r2
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	189b      	adds	r3, r3, r2
 80072e0:	00db      	lsls	r3, r3, #3
 80072e2:	18cb      	adds	r3, r1, r3
 80072e4:	3310      	adds	r3, #16
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 80072ea:	183b      	adds	r3, r7, r0
 80072ec:	781a      	ldrb	r2, [r3, #0]
 80072ee:	4930      	ldr	r1, [pc, #192]	; (80073b0 <processTimerScheduler+0x118>)
 80072f0:	0013      	movs	r3, r2
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	189b      	adds	r3, r3, r2
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	18cb      	adds	r3, r1, r3
 80072fa:	3314      	adds	r3, #20
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8007300:	183b      	adds	r3, r7, r0
 8007302:	781a      	ldrb	r2, [r3, #0]
 8007304:	492a      	ldr	r1, [pc, #168]	; (80073b0 <processTimerScheduler+0x118>)
 8007306:	0013      	movs	r3, r2
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	189b      	adds	r3, r3, r2
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	18cb      	adds	r3, r1, r3
 8007310:	330c      	adds	r3, #12
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2bff      	cmp	r3, #255	; 0xff
 8007318:	d022      	beq.n	8007360 <processTimerScheduler+0xc8>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 800731a:	183b      	adds	r3, r7, r0
 800731c:	781a      	ldrb	r2, [r3, #0]
 800731e:	4924      	ldr	r1, [pc, #144]	; (80073b0 <processTimerScheduler+0x118>)
 8007320:	0013      	movs	r3, r2
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	189b      	adds	r3, r3, r2
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	18cb      	adds	r3, r1, r3
 800732a:	330c      	adds	r3, #12
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8007330:	2b00      	cmp	r3, #0
 8007332:	d015      	beq.n	8007360 <processTimerScheduler+0xc8>
                 g_pTimerHandle[i].repeats--;
 8007334:	183b      	adds	r3, r7, r0
 8007336:	781a      	ldrb	r2, [r3, #0]
 8007338:	491d      	ldr	r1, [pc, #116]	; (80073b0 <processTimerScheduler+0x118>)
 800733a:	0013      	movs	r3, r2
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	189b      	adds	r3, r3, r2
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	18cb      	adds	r3, r1, r3
 8007344:	330c      	adds	r3, #12
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	b2db      	uxtb	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b2d8      	uxtb	r0, r3
 800734e:	4918      	ldr	r1, [pc, #96]	; (80073b0 <processTimerScheduler+0x118>)
 8007350:	0013      	movs	r3, r2
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	189b      	adds	r3, r3, r2
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	18cb      	adds	r3, r1, r3
 800735a:	330c      	adds	r3, #12
 800735c:	1c02      	adds	r2, r0, #0
 800735e:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 8007360:	200f      	movs	r0, #15
 8007362:	183b      	adds	r3, r7, r0
 8007364:	781a      	ldrb	r2, [r3, #0]
 8007366:	4912      	ldr	r1, [pc, #72]	; (80073b0 <processTimerScheduler+0x118>)
 8007368:	0013      	movs	r3, r2
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	189b      	adds	r3, r3, r2
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	18cb      	adds	r3, r1, r3
 8007372:	330c      	adds	r3, #12
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <processTimerScheduler+0xee>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 800737c:	183b      	adds	r3, r7, r0
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	0018      	movs	r0, r3
 8007382:	f7ff ff2b 	bl	80071dc <TimerStop>
            }
            
            callbackfunc(pPrameter);
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	0010      	movs	r0, r2
 800738c:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 800738e:	210f      	movs	r1, #15
 8007390:	187b      	adds	r3, r7, r1
 8007392:	781a      	ldrb	r2, [r3, #0]
 8007394:	187b      	adds	r3, r7, r1
 8007396:	3201      	adds	r2, #1
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	230f      	movs	r3, #15
 800739c:	18fb      	adds	r3, r7, r3
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b0f      	cmp	r3, #15
 80073a2:	d981      	bls.n	80072a8 <processTimerScheduler+0x10>
        }
    }
}
 80073a4:	46c0      	nop			; (mov r8, r8)
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	46bd      	mov	sp, r7
 80073aa:	b005      	add	sp, #20
 80073ac:	bd90      	pop	{r4, r7, pc}
 80073ae:	46c0      	nop			; (mov r8, r8)
 80073b0:	200002a0 	.word	0x200002a0

080073b4 <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	0002      	movs	r2, r0
 80073bc:	1dfb      	adds	r3, r7, #7
 80073be:	701a      	strb	r2, [r3, #0]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	60fb      	str	r3, [r7, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80073c4:	b672      	cpsid	i
}
 80073c6:	46c0      	nop			; (mov r8, r8)
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 80073c8:	f7ff ff5c 	bl	8007284 <GetMilSecTick>
 80073cc:	0003      	movs	r3, r0
 80073ce:	60bb      	str	r3, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 80073d0:	1dfb      	adds	r3, r7, #7
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b0f      	cmp	r3, #15
 80073d6:	d80b      	bhi.n	80073f0 <TimeExpired+0x3c>
 80073d8:	1dfb      	adds	r3, r7, #7
 80073da:	781a      	ldrb	r2, [r3, #0]
 80073dc:	492d      	ldr	r1, [pc, #180]	; (8007494 <TimeExpired+0xe0>)
 80073de:	0013      	movs	r3, r2
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	189b      	adds	r3, r3, r2
 80073e4:	00db      	lsls	r3, r3, #3
 80073e6:	18cb      	adds	r3, r1, r3
 80073e8:	3310      	adds	r3, #16
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d103      	bne.n	80073f8 <TimeExpired+0x44>
  __ASM volatile ("cpsie i" : : : "memory");
 80073f0:	b662      	cpsie	i
}
 80073f2:	46c0      	nop			; (mov r8, r8)
    {
    	__enable_irq();
        return 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	e049      	b.n	800748c <TimeExpired+0xd8>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 80073f8:	1dfb      	adds	r3, r7, #7
 80073fa:	781a      	ldrb	r2, [r3, #0]
 80073fc:	4925      	ldr	r1, [pc, #148]	; (8007494 <TimeExpired+0xe0>)
 80073fe:	0013      	movs	r3, r2
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	189b      	adds	r3, r3, r2
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	18cb      	adds	r3, r1, r3
 8007408:	3304      	adds	r3, #4
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	429a      	cmp	r2, r3
 8007410:	d30d      	bcc.n	800742e <TimeExpired+0x7a>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 8007412:	1dfb      	adds	r3, r7, #7
 8007414:	781a      	ldrb	r2, [r3, #0]
 8007416:	491f      	ldr	r1, [pc, #124]	; (8007494 <TimeExpired+0xe0>)
 8007418:	0013      	movs	r3, r2
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	189b      	adds	r3, r3, r2
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	18cb      	adds	r3, r1, r3
 8007422:	3304      	adds	r3, #4
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	e00f      	b.n	800744e <TimeExpired+0x9a>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 800742e:	1dfb      	adds	r3, r7, #7
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	4918      	ldr	r1, [pc, #96]	; (8007494 <TimeExpired+0xe0>)
 8007434:	0013      	movs	r3, r2
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	189b      	adds	r3, r3, r2
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	18cb      	adds	r3, r1, r3
 800743e:	3304      	adds	r3, #4
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	43db      	mvns	r3, r3
 800744c:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 800744e:	1dfb      	adds	r3, r7, #7
 8007450:	781a      	ldrb	r2, [r3, #0]
 8007452:	4910      	ldr	r1, [pc, #64]	; (8007494 <TimeExpired+0xe0>)
 8007454:	0013      	movs	r3, r2
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	189b      	adds	r3, r3, r2
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	18cb      	adds	r3, r1, r3
 800745e:	3308      	adds	r3, #8
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	429a      	cmp	r2, r3
 8007466:	d203      	bcs.n	8007470 <TimeExpired+0xbc>
  __ASM volatile ("cpsie i" : : : "memory");
 8007468:	b662      	cpsie	i
}
 800746a:	46c0      	nop			; (mov r8, r8)
    {
    	__enable_irq();
        return 0;
 800746c:	2300      	movs	r3, #0
 800746e:	e00d      	b.n	800748c <TimeExpired+0xd8>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 8007470:	1dfb      	adds	r3, r7, #7
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	4907      	ldr	r1, [pc, #28]	; (8007494 <TimeExpired+0xe0>)
 8007476:	0013      	movs	r3, r2
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	189b      	adds	r3, r3, r2
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	18cb      	adds	r3, r1, r3
 8007480:	3304      	adds	r3, #4
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007486:	b662      	cpsie	i
}
 8007488:	46c0      	nop			; (mov r8, r8)
    
    __enable_irq();
    
    return 1;
 800748a:	2301      	movs	r3, #1
}
 800748c:	0018      	movs	r0, r3
 800748e:	46bd      	mov	sp, r7
 8007490:	b004      	add	sp, #16
 8007492:	bd80      	pop	{r7, pc}
 8007494:	200002a0 	.word	0x200002a0

08007498 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 800749c:	4b03      	ldr	r3, [pc, #12]	; (80074ac <SysTick_Handler+0x14>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	4b02      	ldr	r3, [pc, #8]	; (80074ac <SysTick_Handler+0x14>)
 80074a4:	601a      	str	r2, [r3, #0]
}
 80074a6:	46c0      	nop			; (mov r8, r8)
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20000420 	.word	0x20000420

080074b0 <OpticalSensor_Init>:
 * @retval None
 */
void
OpticalSensor_Init(
	ADC_READ_MODE adc_read_mode
) {
 80074b0:	b590      	push	{r4, r7, lr}
 80074b2:	b097      	sub	sp, #92	; 0x5c
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	0002      	movs	r2, r0
 80074b8:	1dfb      	adds	r3, r7, #7
 80074ba:	701a      	strb	r2, [r3, #0]
	ADC_InitTypeDef 	ADC_InitStructure;
	GPIO_InitTypeDef 	GPIO_InitStructure;
	DMA_InitTypeDef 	DMA_InitStructure;

	/* Enable peripheral clocks ***********************************************/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80074bc:	2380      	movs	r3, #128	; 0x80
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	2101      	movs	r1, #1
 80074c2:	0018      	movs	r0, r3
 80074c4:	f7fc fa5e 	bl	8003984 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80074c8:	2380      	movs	r3, #128	; 0x80
 80074ca:	029b      	lsls	r3, r3, #10
 80074cc:	2101      	movs	r1, #1
 80074ce:	0018      	movs	r0, r3
 80074d0:	f7fc fa38 	bl	8003944 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80074d4:	2380      	movs	r3, #128	; 0x80
 80074d6:	02db      	lsls	r3, r3, #11
 80074d8:	2101      	movs	r1, #1
 80074da:	0018      	movs	r0, r3
 80074dc:	f7fc fa32 	bl	8003944 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 80074e0:	2101      	movs	r1, #1
 80074e2:	2001      	movs	r0, #1
 80074e4:	f7fc fa2e 	bl	8003944 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 |
 80074e8:	2438      	movs	r4, #56	; 0x38
 80074ea:	193b      	adds	r3, r7, r4
 80074ec:	221f      	movs	r2, #31
 80074ee:	601a      	str	r2, [r3, #0]
								  GPIO_Pin_2 | GPIO_Pin_3 |
								  GPIO_Pin_4;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80074f0:	193b      	adds	r3, r7, r4
 80074f2:	2203      	movs	r2, #3
 80074f4:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80074f6:	193b      	adds	r3, r7, r4
 80074f8:	2200      	movs	r2, #0
 80074fa:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80074fc:	193a      	adds	r2, r7, r4
 80074fe:	2390      	movs	r3, #144	; 0x90
 8007500:	05db      	lsls	r3, r3, #23
 8007502:	0011      	movs	r1, r2
 8007504:	0018      	movs	r0, r3
 8007506:	f7fb ff23 	bl	8003350 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 800750a:	193b      	adds	r3, r7, r4
 800750c:	2203      	movs	r2, #3
 800750e:	601a      	str	r2, [r3, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007510:	193b      	adds	r3, r7, r4
 8007512:	4a55      	ldr	r2, [pc, #340]	; (8007668 <OpticalSensor_Init+0x1b8>)
 8007514:	0019      	movs	r1, r3
 8007516:	0010      	movs	r0, r2
 8007518:	f7fb ff1a 	bl	8003350 <GPIO_Init>

	/* ADC De-initialization ***************************************************/
	ADC_DeInit(ADC1);
 800751c:	4b53      	ldr	r3, [pc, #332]	; (800766c <OpticalSensor_Init+0x1bc>)
 800751e:	0018      	movs	r0, r3
 8007520:	f7fb fc20 	bl	8002d64 <ADC_DeInit>

	/* Initialize ADC structure */
	ADC_StructInit(&ADC_InitStructure);
 8007524:	2440      	movs	r4, #64	; 0x40
 8007526:	193b      	adds	r3, r7, r4
 8007528:	0018      	movs	r0, r3
 800752a:	f7fb fc61 	bl	8002df0 <ADC_StructInit>

	/* Configure the ADC1 in continuous mode with a resolution equal to 12 bits  */
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 800752e:	0021      	movs	r1, r4
 8007530:	187b      	adds	r3, r7, r1
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8007536:	187b      	adds	r3, r7, r1
 8007538:	2201      	movs	r2, #1
 800753a:	711a      	strb	r2, [r3, #4]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800753c:	187b      	adds	r3, r7, r1
 800753e:	2200      	movs	r2, #0
 8007540:	609a      	str	r2, [r3, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8007542:	187b      	adds	r3, r7, r1
 8007544:	2200      	movs	r2, #0
 8007546:	611a      	str	r2, [r3, #16]
	ADC_InitStructure.ADC_ScanDirection = ADC_ScanDirection_Upward;
 8007548:	187b      	adds	r3, r7, r1
 800754a:	2200      	movs	r2, #0
 800754c:	615a      	str	r2, [r3, #20]
	ADC_Init(ADC1, &ADC_InitStructure);
 800754e:	187b      	adds	r3, r7, r1
 8007550:	4a46      	ldr	r2, [pc, #280]	; (800766c <OpticalSensor_Init+0x1bc>)
 8007552:	0019      	movs	r1, r3
 8007554:	0010      	movs	r0, r2
 8007556:	f7fb fc1f 	bl	8002d98 <ADC_Init>

	/* Convert the ADC1 Channel 11 with 239.5 Cycles as sampling time */
	ADC_ChannelConfig(ADC1, ADC_Channel_0, ADC_SampleTime_239_5Cycles);
 800755a:	4b44      	ldr	r3, [pc, #272]	; (800766c <OpticalSensor_Init+0x1bc>)
 800755c:	2207      	movs	r2, #7
 800755e:	2101      	movs	r1, #1
 8007560:	0018      	movs	r0, r3
 8007562:	f7fb fc7b 	bl	8002e5c <ADC_ChannelConfig>
	ADC_ChannelConfig(ADC1, ADC_Channel_1, ADC_SampleTime_239_5Cycles);
 8007566:	4b41      	ldr	r3, [pc, #260]	; (800766c <OpticalSensor_Init+0x1bc>)
 8007568:	2207      	movs	r2, #7
 800756a:	2102      	movs	r1, #2
 800756c:	0018      	movs	r0, r3
 800756e:	f7fb fc75 	bl	8002e5c <ADC_ChannelConfig>
	ADC_ChannelConfig(ADC1, ADC_Channel_2, ADC_SampleTime_239_5Cycles);
 8007572:	4b3e      	ldr	r3, [pc, #248]	; (800766c <OpticalSensor_Init+0x1bc>)
 8007574:	2207      	movs	r2, #7
 8007576:	2104      	movs	r1, #4
 8007578:	0018      	movs	r0, r3
 800757a:	f7fb fc6f 	bl	8002e5c <ADC_ChannelConfig>
	ADC_ChannelConfig(ADC1, ADC_Channel_3, ADC_SampleTime_239_5Cycles);
 800757e:	4b3b      	ldr	r3, [pc, #236]	; (800766c <OpticalSensor_Init+0x1bc>)
 8007580:	2207      	movs	r2, #7
 8007582:	2108      	movs	r1, #8
 8007584:	0018      	movs	r0, r3
 8007586:	f7fb fc69 	bl	8002e5c <ADC_ChannelConfig>
	ADC_ChannelConfig(ADC1, ADC_Channel_4, ADC_SampleTime_239_5Cycles);
 800758a:	4b38      	ldr	r3, [pc, #224]	; (800766c <OpticalSensor_Init+0x1bc>)
 800758c:	2207      	movs	r2, #7
 800758e:	2110      	movs	r1, #16
 8007590:	0018      	movs	r0, r3
 8007592:	f7fb fc63 	bl	8002e5c <ADC_ChannelConfig>
	ADC_ChannelConfig(ADC1, ADC_Channel_8, ADC_SampleTime_239_5Cycles);
 8007596:	2380      	movs	r3, #128	; 0x80
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	4834      	ldr	r0, [pc, #208]	; (800766c <OpticalSensor_Init+0x1bc>)
 800759c:	2207      	movs	r2, #7
 800759e:	0019      	movs	r1, r3
 80075a0:	f7fb fc5c 	bl	8002e5c <ADC_ChannelConfig>
	ADC_ChannelConfig(ADC1, ADC_Channel_9, ADC_SampleTime_239_5Cycles);
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4830      	ldr	r0, [pc, #192]	; (800766c <OpticalSensor_Init+0x1bc>)
 80075aa:	2207      	movs	r2, #7
 80075ac:	0019      	movs	r1, r3
 80075ae:	f7fb fc55 	bl	8002e5c <ADC_ChannelConfig>

	/* ADC Calibration */
	ADC_GetCalibrationFactor(ADC1);
 80075b2:	4b2e      	ldr	r3, [pc, #184]	; (800766c <OpticalSensor_Init+0x1bc>)
 80075b4:	0018      	movs	r0, r3
 80075b6:	f7fb fc6e 	bl	8002e96 <ADC_GetCalibrationFactor>

	/* Enable the ADC peripheral */
	ADC_Cmd(ADC1, ENABLE);
 80075ba:	4b2c      	ldr	r3, [pc, #176]	; (800766c <OpticalSensor_Init+0x1bc>)
 80075bc:	2101      	movs	r1, #1
 80075be:	0018      	movs	r0, r3
 80075c0:	f7fb fc30 	bl	8002e24 <ADC_Cmd>

	/* Wait the ADRDY flag */
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_ADRDY));
 80075c4:	46c0      	nop			; (mov r8, r8)
 80075c6:	4b29      	ldr	r3, [pc, #164]	; (800766c <OpticalSensor_Init+0x1bc>)
 80075c8:	2101      	movs	r1, #1
 80075ca:	0018      	movs	r0, r3
 80075cc:	f7fb fcd4 	bl	8002f78 <ADC_GetFlagStatus>
 80075d0:	1e03      	subs	r3, r0, #0
 80075d2:	d0f8      	beq.n	80075c6 <OpticalSensor_Init+0x116>

	/* ADC1 regular Software Start Conv */
	ADC_StartOfConversion(ADC1);
 80075d4:	4b25      	ldr	r3, [pc, #148]	; (800766c <OpticalSensor_Init+0x1bc>)
 80075d6:	0018      	movs	r0, r3
 80075d8:	f7fb fc8d 	bl	8002ef6 <ADC_StartOfConversion>

	if (adc_read_mode == ADC_READ_MODE_DMA)
 80075dc:	1dfb      	adds	r3, r7, #7
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d13d      	bne.n	8007660 <OpticalSensor_Init+0x1b0>
	{
		/* ADC DMA request in circular mode */
		ADC_DMARequestModeConfig(ADC1, ADC_DMAMode_Circular);
 80075e4:	4b21      	ldr	r3, [pc, #132]	; (800766c <OpticalSensor_Init+0x1bc>)
 80075e6:	2102      	movs	r1, #2
 80075e8:	0018      	movs	r0, r3
 80075ea:	f7fb fcaf 	bl	8002f4c <ADC_DMARequestModeConfig>

		/* Enable ADC_DMA */
		ADC_DMACmd(ADC1, ENABLE);
 80075ee:	4b1f      	ldr	r3, [pc, #124]	; (800766c <OpticalSensor_Init+0x1bc>)
 80075f0:	2101      	movs	r1, #1
 80075f2:	0018      	movs	r0, r3
 80075f4:	f7fb fc8d 	bl	8002f12 <ADC_DMACmd>

		/* DMA2_Stream0 channel0 configuration ********************************/
		DMA_DeInit(DMA1_Channel1);
 80075f8:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <OpticalSensor_Init+0x1c0>)
 80075fa:	0018      	movs	r0, r3
 80075fc:	f7fb fcec 	bl	8002fd8 <DMA_DeInit>
		DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC1_DR_Address;
 8007600:	210c      	movs	r1, #12
 8007602:	187b      	adds	r3, r7, r1
 8007604:	4a1b      	ldr	r2, [pc, #108]	; (8007674 <OpticalSensor_Init+0x1c4>)
 8007606:	601a      	str	r2, [r3, #0]
		DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)RegularConvData_Tab;
 8007608:	4a1b      	ldr	r2, [pc, #108]	; (8007678 <OpticalSensor_Init+0x1c8>)
 800760a:	187b      	adds	r3, r7, r1
 800760c:	605a      	str	r2, [r3, #4]
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 800760e:	187b      	adds	r3, r7, r1
 8007610:	2200      	movs	r2, #0
 8007612:	609a      	str	r2, [r3, #8]
		DMA_InitStructure.DMA_BufferSize = 7;
 8007614:	187b      	adds	r3, r7, r1
 8007616:	2207      	movs	r2, #7
 8007618:	60da      	str	r2, [r3, #12]
		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800761a:	187b      	adds	r3, r7, r1
 800761c:	2200      	movs	r2, #0
 800761e:	611a      	str	r2, [r3, #16]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8007620:	187b      	adds	r3, r7, r1
 8007622:	2280      	movs	r2, #128	; 0x80
 8007624:	615a      	str	r2, [r3, #20]
		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8007626:	187b      	adds	r3, r7, r1
 8007628:	2280      	movs	r2, #128	; 0x80
 800762a:	0052      	lsls	r2, r2, #1
 800762c:	619a      	str	r2, [r3, #24]
		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 800762e:	187b      	adds	r3, r7, r1
 8007630:	2280      	movs	r2, #128	; 0x80
 8007632:	00d2      	lsls	r2, r2, #3
 8007634:	61da      	str	r2, [r3, #28]
		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8007636:	187b      	adds	r3, r7, r1
 8007638:	2220      	movs	r2, #32
 800763a:	621a      	str	r2, [r3, #32]
		DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800763c:	187b      	adds	r3, r7, r1
 800763e:	2280      	movs	r2, #128	; 0x80
 8007640:	0192      	lsls	r2, r2, #6
 8007642:	625a      	str	r2, [r3, #36]	; 0x24
		DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8007644:	187b      	adds	r3, r7, r1
 8007646:	2200      	movs	r2, #0
 8007648:	629a      	str	r2, [r3, #40]	; 0x28
		DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 800764a:	187b      	adds	r3, r7, r1
 800764c:	4a08      	ldr	r2, [pc, #32]	; (8007670 <OpticalSensor_Init+0x1c0>)
 800764e:	0019      	movs	r1, r3
 8007650:	0010      	movs	r0, r2
 8007652:	f7fb fd85 	bl	8003160 <DMA_Init>
		/* DMA1 Channel1 enable */
		DMA_Cmd(DMA1_Channel1, ENABLE);
 8007656:	4b06      	ldr	r3, [pc, #24]	; (8007670 <OpticalSensor_Init+0x1c0>)
 8007658:	2101      	movs	r1, #1
 800765a:	0018      	movs	r0, r3
 800765c:	f7fb fdbe 	bl	80031dc <DMA_Cmd>
	}
}
 8007660:	46c0      	nop			; (mov r8, r8)
 8007662:	46bd      	mov	sp, r7
 8007664:	b017      	add	sp, #92	; 0x5c
 8007666:	bd90      	pop	{r4, r7, pc}
 8007668:	48000400 	.word	0x48000400
 800766c:	40012400 	.word	0x40012400
 8007670:	40020008 	.word	0x40020008
 8007674:	40012440 	.word	0x40012440
 8007678:	20000424 	.word	0x20000424

0800767c <OpticalSensor_MeasureUseDMAMode>:
 * @param  None
 * @retval Value of ADC
 */
uint16_t
OpticalSensor_MeasureUseDMAMode(uint8_t irSensID)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	0002      	movs	r2, r0
 8007684:	1dfb      	adds	r3, r7, #7
 8007686:	701a      	strb	r2, [r3, #0]
	if (irSensID >= (sizeof(RegularConvData_Tab) / sizeof(RegularConvData_Tab[0])))
 8007688:	1dfb      	adds	r3, r7, #7
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b06      	cmp	r3, #6
 800768e:	d901      	bls.n	8007694 <OpticalSensor_MeasureUseDMAMode+0x18>
		return 0;
 8007690:	2300      	movs	r3, #0
 8007692:	e005      	b.n	80076a0 <OpticalSensor_MeasureUseDMAMode+0x24>

	return RegularConvData_Tab[irSensID];
 8007694:	1dfb      	adds	r3, r7, #7
 8007696:	781a      	ldrb	r2, [r3, #0]
 8007698:	4b03      	ldr	r3, [pc, #12]	; (80076a8 <OpticalSensor_MeasureUseDMAMode+0x2c>)
 800769a:	0052      	lsls	r2, r2, #1
 800769c:	5ad3      	ldrh	r3, [r2, r3]
 800769e:	b29b      	uxth	r3, r3
}
 80076a0:	0018      	movs	r0, r3
 80076a2:	46bd      	mov	sp, r7
 80076a4:	b002      	add	sp, #8
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000424 	.word	0x20000424

080076ac <SamplingWhite>:
 * @brief  Sampling White line
 * @param  None
 * @retval None
 */
void SamplingWhite(void)
{
 80076ac:	b590      	push	{r4, r7, lr}
 80076ae:	b089      	sub	sp, #36	; 0x24
 80076b0:	af00      	add	r7, sp, #0
	uint32_t sample[IR_SENSOR_MAX] = {0};
 80076b2:	003b      	movs	r3, r7
 80076b4:	0018      	movs	r0, r3
 80076b6:	231c      	movs	r3, #28
 80076b8:	001a      	movs	r2, r3
 80076ba:	2100      	movs	r1, #0
 80076bc:	f000 fcba 	bl	8008034 <memset>

	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++)
 80076c0:	231f      	movs	r3, #31
 80076c2:	18fb      	adds	r3, r7, r3
 80076c4:	2200      	movs	r2, #0
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	e03a      	b.n	8007740 <SamplingWhite+0x94>
	{
		for(uint8_t j = 0; j < IRSENSOR_NUM_SAMPLING; j++)
 80076ca:	231e      	movs	r3, #30
 80076cc:	18fb      	adds	r3, r7, r3
 80076ce:	2200      	movs	r2, #0
 80076d0:	701a      	strb	r2, [r3, #0]
 80076d2:	e019      	b.n	8007708 <SamplingWhite+0x5c>
		{
			sample[i] += OpticalSensor_MeasureUseDMAMode(i);
 80076d4:	241f      	movs	r4, #31
 80076d6:	193b      	adds	r3, r7, r4
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	0018      	movs	r0, r3
 80076dc:	f7ff ffce 	bl	800767c <OpticalSensor_MeasureUseDMAMode>
 80076e0:	0003      	movs	r3, r0
 80076e2:	0019      	movs	r1, r3
 80076e4:	0020      	movs	r0, r4
 80076e6:	183b      	adds	r3, r7, r0
 80076e8:	781a      	ldrb	r2, [r3, #0]
 80076ea:	003b      	movs	r3, r7
 80076ec:	0092      	lsls	r2, r2, #2
 80076ee:	58d3      	ldr	r3, [r2, r3]
 80076f0:	183a      	adds	r2, r7, r0
 80076f2:	7812      	ldrb	r2, [r2, #0]
 80076f4:	1859      	adds	r1, r3, r1
 80076f6:	003b      	movs	r3, r7
 80076f8:	0092      	lsls	r2, r2, #2
 80076fa:	50d1      	str	r1, [r2, r3]
		for(uint8_t j = 0; j < IRSENSOR_NUM_SAMPLING; j++)
 80076fc:	211e      	movs	r1, #30
 80076fe:	187b      	adds	r3, r7, r1
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	187b      	adds	r3, r7, r1
 8007704:	3201      	adds	r2, #1
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	231e      	movs	r3, #30
 800770a:	18fb      	adds	r3, r7, r3
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2bc7      	cmp	r3, #199	; 0xc7
 8007710:	d9e0      	bls.n	80076d4 <SamplingWhite+0x28>

		}

		AdcValues_White[i] = sample[i] / IRSENSOR_NUM_SAMPLING;
 8007712:	241f      	movs	r4, #31
 8007714:	193b      	adds	r3, r7, r4
 8007716:	781a      	ldrb	r2, [r3, #0]
 8007718:	003b      	movs	r3, r7
 800771a:	0092      	lsls	r2, r2, #2
 800771c:	58d3      	ldr	r3, [r2, r3]
 800771e:	21c8      	movs	r1, #200	; 0xc8
 8007720:	0018      	movs	r0, r3
 8007722:	f7f8 fcf9 	bl	8000118 <__udivsi3>
 8007726:	0003      	movs	r3, r0
 8007728:	0019      	movs	r1, r3
 800772a:	193b      	adds	r3, r7, r4
 800772c:	781a      	ldrb	r2, [r3, #0]
 800772e:	b289      	uxth	r1, r1
 8007730:	4b08      	ldr	r3, [pc, #32]	; (8007754 <SamplingWhite+0xa8>)
 8007732:	0052      	lsls	r2, r2, #1
 8007734:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++)
 8007736:	193b      	adds	r3, r7, r4
 8007738:	781a      	ldrb	r2, [r3, #0]
 800773a:	193b      	adds	r3, r7, r4
 800773c:	3201      	adds	r2, #1
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	231f      	movs	r3, #31
 8007742:	18fb      	adds	r3, r7, r3
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b06      	cmp	r3, #6
 8007748:	d9bf      	bls.n	80076ca <SamplingWhite+0x1e>
	}
}
 800774a:	46c0      	nop			; (mov r8, r8)
 800774c:	46c0      	nop			; (mov r8, r8)
 800774e:	46bd      	mov	sp, r7
 8007750:	b009      	add	sp, #36	; 0x24
 8007752:	bd90      	pop	{r4, r7, pc}
 8007754:	20000434 	.word	0x20000434

08007758 <SamplingBlack>:
 * @brief  Sampling Black Line
 * @param  None
 * @retval None
 */
void SamplingBlack(void)
{
 8007758:	b590      	push	{r4, r7, lr}
 800775a:	b089      	sub	sp, #36	; 0x24
 800775c:	af00      	add	r7, sp, #0
	uint32_t sample[IR_SENSOR_MAX] = {0};
 800775e:	003b      	movs	r3, r7
 8007760:	0018      	movs	r0, r3
 8007762:	231c      	movs	r3, #28
 8007764:	001a      	movs	r2, r3
 8007766:	2100      	movs	r1, #0
 8007768:	f000 fc64 	bl	8008034 <memset>

	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++)
 800776c:	231f      	movs	r3, #31
 800776e:	18fb      	adds	r3, r7, r3
 8007770:	2200      	movs	r2, #0
 8007772:	701a      	strb	r2, [r3, #0]
 8007774:	e03a      	b.n	80077ec <SamplingBlack+0x94>
	{
		for(uint8_t j = 0; j < IRSENSOR_NUM_SAMPLING; j++)
 8007776:	231e      	movs	r3, #30
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	e019      	b.n	80077b4 <SamplingBlack+0x5c>
		{
			sample[i] += OpticalSensor_MeasureUseDMAMode(i);
 8007780:	241f      	movs	r4, #31
 8007782:	193b      	adds	r3, r7, r4
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	0018      	movs	r0, r3
 8007788:	f7ff ff78 	bl	800767c <OpticalSensor_MeasureUseDMAMode>
 800778c:	0003      	movs	r3, r0
 800778e:	0019      	movs	r1, r3
 8007790:	0020      	movs	r0, r4
 8007792:	183b      	adds	r3, r7, r0
 8007794:	781a      	ldrb	r2, [r3, #0]
 8007796:	003b      	movs	r3, r7
 8007798:	0092      	lsls	r2, r2, #2
 800779a:	58d3      	ldr	r3, [r2, r3]
 800779c:	183a      	adds	r2, r7, r0
 800779e:	7812      	ldrb	r2, [r2, #0]
 80077a0:	1859      	adds	r1, r3, r1
 80077a2:	003b      	movs	r3, r7
 80077a4:	0092      	lsls	r2, r2, #2
 80077a6:	50d1      	str	r1, [r2, r3]
		for(uint8_t j = 0; j < IRSENSOR_NUM_SAMPLING; j++)
 80077a8:	211e      	movs	r1, #30
 80077aa:	187b      	adds	r3, r7, r1
 80077ac:	781a      	ldrb	r2, [r3, #0]
 80077ae:	187b      	adds	r3, r7, r1
 80077b0:	3201      	adds	r2, #1
 80077b2:	701a      	strb	r2, [r3, #0]
 80077b4:	231e      	movs	r3, #30
 80077b6:	18fb      	adds	r3, r7, r3
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2bc7      	cmp	r3, #199	; 0xc7
 80077bc:	d9e0      	bls.n	8007780 <SamplingBlack+0x28>

		}

		AdcValues_Black[i] = sample[i] / IRSENSOR_NUM_SAMPLING;
 80077be:	241f      	movs	r4, #31
 80077c0:	193b      	adds	r3, r7, r4
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	003b      	movs	r3, r7
 80077c6:	0092      	lsls	r2, r2, #2
 80077c8:	58d3      	ldr	r3, [r2, r3]
 80077ca:	21c8      	movs	r1, #200	; 0xc8
 80077cc:	0018      	movs	r0, r3
 80077ce:	f7f8 fca3 	bl	8000118 <__udivsi3>
 80077d2:	0003      	movs	r3, r0
 80077d4:	0019      	movs	r1, r3
 80077d6:	193b      	adds	r3, r7, r4
 80077d8:	781a      	ldrb	r2, [r3, #0]
 80077da:	b289      	uxth	r1, r1
 80077dc:	4b08      	ldr	r3, [pc, #32]	; (8007800 <SamplingBlack+0xa8>)
 80077de:	0052      	lsls	r2, r2, #1
 80077e0:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++)
 80077e2:	193b      	adds	r3, r7, r4
 80077e4:	781a      	ldrb	r2, [r3, #0]
 80077e6:	193b      	adds	r3, r7, r4
 80077e8:	3201      	adds	r2, #1
 80077ea:	701a      	strb	r2, [r3, #0]
 80077ec:	231f      	movs	r3, #31
 80077ee:	18fb      	adds	r3, r7, r3
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	2b06      	cmp	r3, #6
 80077f4:	d9bf      	bls.n	8007776 <SamplingBlack+0x1e>
	}
}
 80077f6:	46c0      	nop			; (mov r8, r8)
 80077f8:	46c0      	nop			; (mov r8, r8)
 80077fa:	46bd      	mov	sp, r7
 80077fc:	b009      	add	sp, #36	; 0x24
 80077fe:	bd90      	pop	{r4, r7, pc}
 8007800:	20000444 	.word	0x20000444

08007804 <Calculate_AdcThreshold>:
 * @brief
 * @param  None
 * @retval Threshold of per Adc Values
 */
void Calculate_AdcThreshold(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++) {
 800780a:	1dfb      	adds	r3, r7, #7
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	e01b      	b.n	800784a <Calculate_AdcThreshold+0x46>
		AdcValuesThreshold[i] = ((AdcValues_White[i] + AdcValues_Black[i]) / 2);
 8007812:	1dfb      	adds	r3, r7, #7
 8007814:	781a      	ldrb	r2, [r3, #0]
 8007816:	4b11      	ldr	r3, [pc, #68]	; (800785c <Calculate_AdcThreshold+0x58>)
 8007818:	0052      	lsls	r2, r2, #1
 800781a:	5ad3      	ldrh	r3, [r2, r3]
 800781c:	0019      	movs	r1, r3
 800781e:	1dfb      	adds	r3, r7, #7
 8007820:	781a      	ldrb	r2, [r3, #0]
 8007822:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <Calculate_AdcThreshold+0x5c>)
 8007824:	0052      	lsls	r2, r2, #1
 8007826:	5ad3      	ldrh	r3, [r2, r3]
 8007828:	18cb      	adds	r3, r1, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	da00      	bge.n	8007830 <Calculate_AdcThreshold+0x2c>
 800782e:	3301      	adds	r3, #1
 8007830:	105b      	asrs	r3, r3, #1
 8007832:	0019      	movs	r1, r3
 8007834:	1dfb      	adds	r3, r7, #7
 8007836:	781a      	ldrb	r2, [r3, #0]
 8007838:	b289      	uxth	r1, r1
 800783a:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <Calculate_AdcThreshold+0x60>)
 800783c:	0052      	lsls	r2, r2, #1
 800783e:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < IR_SENSOR_MAX; i++) {
 8007840:	1dfb      	adds	r3, r7, #7
 8007842:	781a      	ldrb	r2, [r3, #0]
 8007844:	1dfb      	adds	r3, r7, #7
 8007846:	3201      	adds	r2, #1
 8007848:	701a      	strb	r2, [r3, #0]
 800784a:	1dfb      	adds	r3, r7, #7
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	2b06      	cmp	r3, #6
 8007850:	d9df      	bls.n	8007812 <Calculate_AdcThreshold+0xe>
	}
}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	46c0      	nop			; (mov r8, r8)
 8007856:	46bd      	mov	sp, r7
 8007858:	b002      	add	sp, #8
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20000434 	.word	0x20000434
 8007860:	20000444 	.word	0x20000444
 8007864:	20000150 	.word	0x20000150

08007868 <Serial_Init>:
 * @brief  Initialize UART and receive buffer register
 * @param  None
 * @retval None
 */
void
Serial_Init(void) {
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
    /* Initializes receive register buffer  */
    bufInit(pBuffDataRx, &serialQueueRx, sizeof(pBuffDataRx[0]), SIZE_BUFF_DATA_RX);
 800786c:	2380      	movs	r3, #128	; 0x80
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	490b      	ldr	r1, [pc, #44]	; (80078a0 <Serial_Init+0x38>)
 8007872:	480c      	ldr	r0, [pc, #48]	; (80078a4 <Serial_Init+0x3c>)
 8007874:	2201      	movs	r2, #1
 8007876:	f000 f8ed 	bl	8007a54 <bufInit>
	UART_RegBufferRx(USART1_IDX, &serialQueueRx);
 800787a:	4b09      	ldr	r3, [pc, #36]	; (80078a0 <Serial_Init+0x38>)
 800787c:	0019      	movs	r1, r3
 800787e:	2001      	movs	r0, #1
 8007880:	f000 f814 	bl	80078ac <UART_RegBufferRx>

    /* Initializes UART */
    UART_Init(USART1_IDX, BAUD57600, NO_PARITY, ONE_STOP_BIT);
 8007884:	23e1      	movs	r3, #225	; 0xe1
 8007886:	0219      	lsls	r1, r3, #8
 8007888:	2300      	movs	r3, #0
 800788a:	2200      	movs	r2, #0
 800788c:	2001      	movs	r0, #1
 800788e:	f000 f821 	bl	80078d4 <UART_Init>
	byRxBufState = (uint8_t)RX_STATE_START_BYTE;
 8007892:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <Serial_Init+0x40>)
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]
}
 8007898:	46c0      	nop			; (mov r8, r8)
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	20000454 	.word	0x20000454
 80078a4:	20000464 	.word	0x20000464
 80078a8:	20000452 	.word	0x20000452

080078ac <UART_RegBufferRx>:
 */
void
UART_RegBufferRx(
    uint8_t byUartNumber,
    buffqueue_p pQueueRx
) {
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	0002      	movs	r2, r0
 80078b4:	6039      	str	r1, [r7, #0]
 80078b6:	1dfb      	adds	r3, r7, #7
 80078b8:	701a      	strb	r2, [r3, #0]
    g_pUartQueueRx[byUartNumber] = pQueueRx;
 80078ba:	1dfb      	adds	r3, r7, #7
 80078bc:	781a      	ldrb	r2, [r3, #0]
 80078be:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <UART_RegBufferRx+0x24>)
 80078c0:	0092      	lsls	r2, r2, #2
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	50d1      	str	r1, [r2, r3]
}
 80078c6:	46c0      	nop			; (mov r8, r8)
 80078c8:	46bd      	mov	sp, r7
 80078ca:	b002      	add	sp, #8
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	20000564 	.word	0x20000564

080078d4 <UART_Init>:
UART_Init(
    uint8_t byUartNumber,
	uint32_t dwBaudRate,
	uint8_t byParity,
	uint8_t byStopBit
) {
 80078d4:	b590      	push	{r4, r7, lr}
 80078d6:	b08d      	sub	sp, #52	; 0x34
 80078d8:	af00      	add	r7, sp, #0
 80078da:	0004      	movs	r4, r0
 80078dc:	6039      	str	r1, [r7, #0]
 80078de:	0010      	movs	r0, r2
 80078e0:	0019      	movs	r1, r3
 80078e2:	1dfb      	adds	r3, r7, #7
 80078e4:	1c22      	adds	r2, r4, #0
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	1dbb      	adds	r3, r7, #6
 80078ea:	1c02      	adds	r2, r0, #0
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	1d7b      	adds	r3, r7, #5
 80078f0:	1c0a      	adds	r2, r1, #0
 80078f2:	701a      	strb	r2, [r3, #0]
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable GPIO clock */
    RCC_AHBPeriphClockCmd(USARTx_TX_GPIO_CLK | USARTx_RX_GPIO_CLK, ENABLE);
 80078f4:	2380      	movs	r3, #128	; 0x80
 80078f6:	029b      	lsls	r3, r3, #10
 80078f8:	2101      	movs	r1, #1
 80078fa:	0018      	movs	r0, r3
 80078fc:	f7fc f822 	bl	8003944 <RCC_AHBPeriphClockCmd>

    /* Configure USART Tx, Rx as alternate function push-pull */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007900:	2428      	movs	r4, #40	; 0x28
 8007902:	193b      	adds	r3, r7, r4
 8007904:	2202      	movs	r2, #2
 8007906:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007908:	193b      	adds	r3, r7, r4
 800790a:	2203      	movs	r2, #3
 800790c:	715a      	strb	r2, [r3, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800790e:	193b      	adds	r3, r7, r4
 8007910:	2200      	movs	r2, #0
 8007912:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8007914:	193b      	adds	r3, r7, r4
 8007916:	2201      	movs	r2, #1
 8007918:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Pin = USARTx_TX_PIN;
 800791a:	193b      	adds	r3, r7, r4
 800791c:	2280      	movs	r2, #128	; 0x80
 800791e:	0092      	lsls	r2, r2, #2
 8007920:	601a      	str	r2, [r3, #0]
    GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 8007922:	193a      	adds	r2, r7, r4
 8007924:	2390      	movs	r3, #144	; 0x90
 8007926:	05db      	lsls	r3, r3, #23
 8007928:	0011      	movs	r1, r2
 800792a:	0018      	movs	r0, r3
 800792c:	f7fb fd10 	bl	8003350 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = USARTx_RX_PIN;
 8007930:	0021      	movs	r1, r4
 8007932:	187b      	adds	r3, r7, r1
 8007934:	2280      	movs	r2, #128	; 0x80
 8007936:	00d2      	lsls	r2, r2, #3
 8007938:	601a      	str	r2, [r3, #0]
    GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 800793a:	187a      	adds	r2, r7, r1
 800793c:	2390      	movs	r3, #144	; 0x90
 800793e:	05db      	lsls	r3, r3, #23
 8007940:	0011      	movs	r1, r2
 8007942:	0018      	movs	r0, r3
 8007944:	f7fb fd04 	bl	8003350 <GPIO_Init>

    /* Connect USART pins to AF9 and AF10 */
	GPIO_PinAFConfig(USARTx_TX_GPIO_PORT, USARTx_TX_SOURCE, USARTx_TX_AF);
 8007948:	2390      	movs	r3, #144	; 0x90
 800794a:	05db      	lsls	r3, r3, #23
 800794c:	2201      	movs	r2, #1
 800794e:	2109      	movs	r1, #9
 8007950:	0018      	movs	r0, r3
 8007952:	f7fb fdd2 	bl	80034fa <GPIO_PinAFConfig>
	GPIO_PinAFConfig(USARTx_RX_GPIO_PORT, USARTx_RX_SOURCE, USARTx_RX_AF);
 8007956:	2390      	movs	r3, #144	; 0x90
 8007958:	05db      	lsls	r3, r3, #23
 800795a:	2201      	movs	r2, #1
 800795c:	210a      	movs	r1, #10
 800795e:	0018      	movs	r0, r3
 8007960:	f7fb fdcb 	bl	80034fa <GPIO_PinAFConfig>

	/* Enable USART clock */
	USARTx_CLK_INIT(USARTx_CLK, ENABLE);
 8007964:	2380      	movs	r3, #128	; 0x80
 8007966:	01db      	lsls	r3, r3, #7
 8007968:	2101      	movs	r1, #1
 800796a:	0018      	movs	r0, r3
 800796c:	f7fc f80a 	bl	8003984 <RCC_APB2PeriphClockCmd>

    USART_InitStructure.USART_BaudRate = dwBaudRate;
 8007970:	2110      	movs	r1, #16
 8007972:	187b      	adds	r3, r7, r1
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	601a      	str	r2, [r3, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8007978:	187b      	adds	r3, r7, r1
 800797a:	2200      	movs	r2, #0
 800797c:	605a      	str	r2, [r3, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800797e:	187b      	adds	r3, r7, r1
 8007980:	2200      	movs	r2, #0
 8007982:	609a      	str	r2, [r3, #8]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8007984:	187b      	adds	r3, r7, r1
 8007986:	2200      	movs	r2, #0
 8007988:	60da      	str	r2, [r3, #12]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800798a:	187b      	adds	r3, r7, r1
 800798c:	2200      	movs	r2, #0
 800798e:	615a      	str	r2, [r3, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8007990:	187b      	adds	r3, r7, r1
 8007992:	220c      	movs	r2, #12
 8007994:	611a      	str	r2, [r3, #16]
    USART_Init(USART1, &USART_InitStructure);
 8007996:	187b      	adds	r3, r7, r1
 8007998:	4a12      	ldr	r2, [pc, #72]	; (80079e4 <UART_Init+0x110>)
 800799a:	0019      	movs	r1, r3
 800799c:	0010      	movs	r0, r2
 800799e:	f7fc fc4f 	bl	8004240 <USART_Init>

    /* Enable USARTx Receive and Transmit interrupts */
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80079a2:	4911      	ldr	r1, [pc, #68]	; (80079e8 <UART_Init+0x114>)
 80079a4:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <UART_Init+0x110>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	0018      	movs	r0, r3
 80079aa:	f7fc fd38 	bl	800441e <USART_ITConfig>
    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 80079ae:	490f      	ldr	r1, [pc, #60]	; (80079ec <UART_Init+0x118>)
 80079b0:	4b0c      	ldr	r3, [pc, #48]	; (80079e4 <UART_Init+0x110>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	0018      	movs	r0, r3
 80079b6:	f7fc fd32 	bl	800441e <USART_ITConfig>
	/* Configure the Priority Group to 2 bits */
//	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

	/* Enable the USARTx Interrupt */
//	NVIC_InitStructure.NVIC_IRQChannel = USARTx_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 80079ba:	210c      	movs	r1, #12
 80079bc:	187b      	adds	r3, r7, r1
 80079be:	2200      	movs	r2, #0
 80079c0:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80079c2:	187b      	adds	r3, r7, r1
 80079c4:	2201      	movs	r2, #1
 80079c6:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStructure);
 80079c8:	187b      	adds	r3, r7, r1
 80079ca:	0018      	movs	r0, r3
 80079cc:	f7fb fde8 	bl	80035a0 <NVIC_Init>

	/* Enable USART */
	USART_Cmd(USART1, ENABLE);
 80079d0:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <UART_Init+0x110>)
 80079d2:	2101      	movs	r1, #1
 80079d4:	0018      	movs	r0, r3
 80079d6:	f7fc fcf7 	bl	80043c8 <USART_Cmd>
}
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	46bd      	mov	sp, r7
 80079de:	b00d      	add	sp, #52	; 0x34
 80079e0:	bd90      	pop	{r4, r7, pc}
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	40013800 	.word	0x40013800
 80079e8:	00050105 	.word	0x00050105
 80079ec:	00070107 	.word	0x00070107

080079f0 <USART1_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART1_IRQHandler(void) {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80079f6:	b672      	cpsid	i
}
 80079f8:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
    if (USART_GetITStatus(USART1, USART_IT_RXNE) == SET) {
 80079fa:	4a13      	ldr	r2, [pc, #76]	; (8007a48 <USART1_IRQHandler+0x58>)
 80079fc:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <USART1_IRQHandler+0x5c>)
 80079fe:	0011      	movs	r1, r2
 8007a00:	0018      	movs	r0, r3
 8007a02:	f7fc fd4e 	bl	80044a2 <USART_GetITStatus>
 8007a06:	0003      	movs	r3, r0
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d116      	bne.n	8007a3a <USART1_IRQHandler+0x4a>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8007a0c:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <USART1_IRQHandler+0x60>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART1);
 8007a12:	4b0e      	ldr	r3, [pc, #56]	; (8007a4c <USART1_IRQHandler+0x5c>)
 8007a14:	0018      	movs	r0, r3
 8007a16:	f7fc fcf4 	bl	8004402 <USART_ReceiveData>
 8007a1a:	0003      	movs	r3, r0
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	1cfb      	adds	r3, r7, #3
 8007a20:	701a      	strb	r2, [r3, #0]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8007a22:	1cfa      	adds	r2, r7, #3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	0011      	movs	r1, r2
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f000 f86a 	bl	8007b02 <bufEnDat>
        USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8007a2e:	4a06      	ldr	r2, [pc, #24]	; (8007a48 <USART1_IRQHandler+0x58>)
 8007a30:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <USART1_IRQHandler+0x5c>)
 8007a32:	0011      	movs	r1, r2
 8007a34:	0018      	movs	r0, r3
 8007a36:	f7fc fd8b 	bl	8004550 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8007a3a:	b662      	cpsie	i
}
 8007a3c:	46c0      	nop			; (mov r8, r8)
    }
    __enable_irq();
}
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b002      	add	sp, #8
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	00050105 	.word	0x00050105
 8007a4c:	40013800 	.word	0x40013800
 8007a50:	20000564 	.word	0x20000564

08007a54 <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	0019      	movs	r1, r3
 8007a60:	1dfb      	adds	r3, r7, #7
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	1d3b      	adds	r3, r7, #4
 8007a66:	1c0a      	adds	r2, r1, #0
 8007a68:	801a      	strh	r2, [r3, #0]
    pQueue->wSize = numberOfElement;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	1d3a      	adds	r2, r7, #4
 8007a6e:	8812      	ldrh	r2, [r2, #0]
 8007a70:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	1dfa      	adds	r2, r7, #7
 8007a76:	7812      	ldrb	r2, [r2, #0]
 8007a78:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	0018      	movs	r0, r3
 8007a84:	f000 f824 	bl	8007ad0 <bufFlush>
}
 8007a88:	46c0      	nop			; (mov r8, r8)
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	b004      	add	sp, #16
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8859      	ldrh	r1, [r3, #2]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	881a      	ldrh	r2, [r3, #0]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4291      	cmp	r1, r2
 8007aa4:	415b      	adcs	r3, r3
 8007aa6:	b2db      	uxtb	r3, r3
}
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b002      	add	sp, #8
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	88da      	ldrh	r2, [r3, #6]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	891b      	ldrh	r3, [r3, #8]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	425a      	negs	r2, r3
 8007ac4:	4153      	adcs	r3, r2
 8007ac6:	b2db      	uxtb	r3, r3
}
 8007ac8:	0018      	movs	r0, r3
 8007aca:	46bd      	mov	sp, r7
 8007acc:	b002      	add	sp, #8
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68d8      	ldr	r0, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	001a      	movs	r2, r3
 8007af4:	2100      	movs	r1, #0
 8007af6:	f000 f8a9 	bl	8007c4c <memsetl>
}
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	46bd      	mov	sp, r7
 8007afe:	b002      	add	sp, #8
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b0c:	b672      	cpsid	i
}
 8007b0e:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8007b10:	230f      	movs	r3, #15
 8007b12:	18fb      	adds	r3, r7, r3
 8007b14:	2200      	movs	r2, #0
 8007b16:	701a      	strb	r2, [r3, #0]
 8007b18:	e025      	b.n	8007b66 <bufEnDat+0x64>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8007b1a:	200f      	movs	r0, #15
 8007b1c:	183b      	adds	r3, r7, r0
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	18d2      	adds	r2, r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	88c9      	ldrh	r1, [r1, #6]
 8007b2c:	185b      	adds	r3, r3, r1
 8007b2e:	7812      	ldrb	r2, [r2, #0]
 8007b30:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	88db      	ldrh	r3, [r3, #6]
 8007b36:	3301      	adds	r3, #1
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	b21b      	sxth	r3, r3
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	8812      	ldrh	r2, [r2, #0]
 8007b40:	3a01      	subs	r2, #1
 8007b42:	b292      	uxth	r2, r2
 8007b44:	b212      	sxth	r2, r2
 8007b46:	4013      	ands	r3, r2
 8007b48:	b21b      	sxth	r3, r3
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	885b      	ldrh	r3, [r3, #2]
 8007b54:	3301      	adds	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8007b5c:	183b      	adds	r3, r7, r0
 8007b5e:	781a      	ldrb	r2, [r3, #0]
 8007b60:	183b      	adds	r3, r7, r0
 8007b62:	3201      	adds	r2, #1
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	791b      	ldrb	r3, [r3, #4]
 8007b6a:	220f      	movs	r2, #15
 8007b6c:	18ba      	adds	r2, r7, r2
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d3d2      	bcc.n	8007b1a <bufEnDat+0x18>
    }
    
    if (bufIsFull(pQueue)) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	0018      	movs	r0, r3
 8007b78:	f7ff ff8a 	bl	8007a90 <bufIsFull>
 8007b7c:	1e03      	subs	r3, r0, #0
 8007b7e:	d011      	beq.n	8007ba4 <bufEnDat+0xa2>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	891a      	ldrh	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	791b      	ldrb	r3, [r3, #4]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	18d3      	adds	r3, r2, r3
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	b21b      	sxth	r3, r3
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	8812      	ldrh	r2, [r2, #0]
 8007b94:	3a01      	subs	r2, #1
 8007b96:	b292      	uxth	r2, r2
 8007b98:	b212      	sxth	r2, r2
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	b21b      	sxth	r3, r3
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8007ba4:	b662      	cpsie	i
}
 8007ba6:	46c0      	nop			; (mov r8, r8)
    }
    
    __enable_irq();
    return ERR_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	0018      	movs	r0, r3
 8007bac:	46bd      	mov	sp, r7
 8007bae:	b004      	add	sp, #16
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bbc:	b672      	cpsid	i
}
 8007bbe:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f7ff ff74 	bl	8007ab0 <bufIsEmpty>
 8007bc8:	1e03      	subs	r3, r0, #0
 8007bca:	d006      	beq.n	8007bda <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 8007bd2:	b662      	cpsie	i
}
 8007bd4:	46c0      	nop			; (mov r8, r8)
        __enable_irq();
        return ERR_BUF_EMPTY;
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e034      	b.n	8007c44 <bufDeDat+0x92>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8007bda:	230f      	movs	r3, #15
 8007bdc:	18fb      	adds	r3, r7, r3
 8007bde:	2200      	movs	r2, #0
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	e025      	b.n	8007c30 <bufDeDat+0x7e>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	8912      	ldrh	r2, [r2, #8]
 8007bec:	189a      	adds	r2, r3, r2
 8007bee:	200f      	movs	r0, #15
 8007bf0:	183b      	adds	r3, r7, r0
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	18cb      	adds	r3, r1, r3
 8007bf8:	7812      	ldrb	r2, [r2, #0]
 8007bfa:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	891b      	ldrh	r3, [r3, #8]
 8007c00:	3301      	adds	r3, #1
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	b21b      	sxth	r3, r3
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	8812      	ldrh	r2, [r2, #0]
 8007c0a:	3a01      	subs	r2, #1
 8007c0c:	b292      	uxth	r2, r2
 8007c0e:	b212      	sxth	r2, r2
 8007c10:	4013      	ands	r3, r2
 8007c12:	b21b      	sxth	r3, r3
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	885b      	ldrh	r3, [r3, #2]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8007c26:	183b      	adds	r3, r7, r0
 8007c28:	781a      	ldrb	r2, [r3, #0]
 8007c2a:	183b      	adds	r3, r7, r0
 8007c2c:	3201      	adds	r2, #1
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	791b      	ldrb	r3, [r3, #4]
 8007c34:	220f      	movs	r2, #15
 8007c36:	18ba      	adds	r2, r7, r2
 8007c38:	7812      	ldrb	r2, [r2, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d3d2      	bcc.n	8007be4 <bufDeDat+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
 8007c3e:	b662      	cpsie	i
}
 8007c40:	46c0      	nop			; (mov r8, r8)
    }
    
    __enable_irq();
    return ERR_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	0018      	movs	r0, r3
 8007c46:	46bd      	mov	sp, r7
 8007c48:	b004      	add	sp, #16
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	0008      	movs	r0, r1
 8007c56:	0011      	movs	r1, r2
 8007c58:	1cfb      	adds	r3, r7, #3
 8007c5a:	1c02      	adds	r2, r0, #0
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	003b      	movs	r3, r7
 8007c60:	1c0a      	adds	r2, r1, #0
 8007c62:	801a      	strh	r2, [r3, #0]
    while (size--) {
 8007c64:	e005      	b.n	8007c72 <memsetl+0x26>
        *dst++ = value;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	1cfa      	adds	r2, r7, #3
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8007c72:	003b      	movs	r3, r7
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	003a      	movs	r2, r7
 8007c78:	1e59      	subs	r1, r3, #1
 8007c7a:	8011      	strh	r1, [r2, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1f2      	bne.n	8007c66 <memsetl+0x1a>
    }    
}
 8007c80:	46c0      	nop			; (mov r8, r8)
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	46bd      	mov	sp, r7
 8007c86:	b002      	add	sp, #8
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <dwCalculatorTime>:
) {
    return ((val >= rmin) && (val <= rmax));
}

uint32_t dwCalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
	if(dwTimeCurrent >= dwTimeInit)
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d303      	bcc.n	8007ca4 <dwCalculatorTime+0x1a>
	{
		return (dwTimeCurrent - dwTimeInit);
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	e003      	b.n	8007cac <dwCalculatorTime+0x22>
	}else
	{
		return (0xFFFFFFFF + dwTimeCurrent - dwTimeInit);
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	3b01      	subs	r3, #1
	}
}
 8007cac:	0018      	movs	r0, r3
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	b002      	add	sp, #8
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <delay_ms>:
void delay_ms(uint32_t ms)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
	uint32_t dwTimeInit = GetMilSecTick();
 8007cbc:	f7ff fae2 	bl	8007284 <GetMilSecTick>
 8007cc0:	0003      	movs	r3, r0
 8007cc2:	60fb      	str	r3, [r7, #12]
	uint32_t dwTimeCurrent = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60bb      	str	r3, [r7, #8]

	do{
		dwTimeCurrent = GetMilSecTick();
 8007cc8:	f7ff fadc 	bl	8007284 <GetMilSecTick>
 8007ccc:	0003      	movs	r3, r0
 8007cce:	60bb      	str	r3, [r7, #8]
	}
	while(dwCalculatorTime(dwTimeInit, dwTimeCurrent) < ms);
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	0011      	movs	r1, r2
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f7ff ffd7 	bl	8007c8a <dwCalculatorTime>
 8007cdc:	0002      	movs	r2, r0
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d8f1      	bhi.n	8007cc8 <delay_ms+0x14>
}
 8007ce4:	46c0      	nop			; (mov r8, r8)
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	b004      	add	sp, #16
 8007cec:	bd80      	pop	{r7, pc}

08007cee <main>:
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

int main(void)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	af00      	add	r7, sp, #0
    // Initialize modules
    AppInitCommon();
 8007cf2:	f000 f80b 	bl	8007d0c <AppInitCommon>
    SetStateApp(STATE_APP_STARTUP);
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	f000 f87e 	bl	8007df8 <SetStateApp>
    EventSchedulerAdd(EVENT_APP_INIT);
 8007cfc:	2001      	movs	r0, #1
 8007cfe:	f7ff f90b 	bl	8006f18 <EventSchedulerAdd>

    while (1)
    {
        /* Process tasks */
        processTimerScheduler();
 8007d02:	f7ff fac9 	bl	8007298 <processTimerScheduler>
        processEventScheduler();
 8007d06:	f7ff f91f 	bl	8006f48 <processEventScheduler>
        processTimerScheduler();
 8007d0a:	e7fa      	b.n	8007d02 <main+0x14>

08007d0c <AppInitCommon>:
 * @param  None
 * @retval None
 */
static
void AppInitCommon(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af04      	add	r7, sp, #16
    // Initializes system clock 48 MHz
	SystemInit();
 8007d12:	f7fa fefb 	bl	8002b0c <SystemInit>
    SystemCoreClockUpdate();
 8007d16:	f7fa ff3f 	bl	8002b98 <SystemCoreClockUpdate>

    // Initializes system tick
    TimerInit();
 8007d1a:	f7ff f9c5 	bl	80070a8 <TimerInit>

    // Initializes scheduler event
    EventSchedulerInit(AppStateManager);
 8007d1e:	4b1b      	ldr	r3, [pc, #108]	; (8007d8c <AppInitCommon+0x80>)
 8007d20:	0018      	movs	r0, r3
 8007d22:	f7ff f8dd 	bl	8006ee0 <EventSchedulerInit>

    // Initializes buttons
    EventButton_Init();
 8007d26:	f7fc fe2f 	bl	8004988 <EventButton_Init>

    // Initializes buzzer
    BuzzerControl_Init();
 8007d2a:	f7fc ff49 	bl	8004bc0 <BuzzerControl_Init>

    // Initializes led
    LedControl_Init();
 8007d2e:	f7fe f9a3 	bl	8006078 <LedControl_Init>

    // Initializes IR sensor
    OpticalSensor_Init(ADC_READ_MODE_DMA);
 8007d32:	2000      	movs	r0, #0
 8007d34:	f7ff fbbc 	bl	80074b0 <OpticalSensor_Init>

    // Initializes lcd
    LCD_Init();
 8007d38:	f7fd fefa 	bl	8005b30 <LCD_Init>
    LCD_direction(1);
 8007d3c:	2001      	movs	r0, #1
 8007d3e:	f7fe f897 	bl	8005e70 <LCD_direction>

    // Initializes motor
    MotorControl_Init();
 8007d42:	f7fe fd25 	bl	8006790 <MotorControl_Init>

    // Initializes encoder
    Encoder_Init();
 8007d46:	f7fe faeb 	bl	8006320 <Encoder_Init>

    // Initializes UART peripheral
	Serial_Init();
 8007d4a:	f7ff fd8d 	bl	8007868 <Serial_Init>

	BlinkLed();
 8007d4e:	f000 f8b9 	bl	8007ec4 <BlinkLed>

	LCD_Init();
 8007d52:	f7fd feed 	bl	8005b30 <LCD_Init>
	LCD_direction(1);
 8007d56:	2001      	movs	r0, #1
 8007d58:	f7fe f88a 	bl	8005e70 <LCD_direction>

	LCD_ClearCursor(50, 210, 200, 240, WHITE);
 8007d5c:	4b0c      	ldr	r3, [pc, #48]	; (8007d90 <AppInitCommon+0x84>)
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	23f0      	movs	r3, #240	; 0xf0
 8007d62:	22c8      	movs	r2, #200	; 0xc8
 8007d64:	21d2      	movs	r1, #210	; 0xd2
 8007d66:	2032      	movs	r0, #50	; 0x32
 8007d68:	f7fd fe4c 	bl	8005a04 <LCD_ClearCursor>
	Gui_StrCenter(100, 100, BLACK, WHITE, (uint8_t*)"I Love Embedded Programming", 16, 1);
 8007d6c:	4a08      	ldr	r2, [pc, #32]	; (8007d90 <AppInitCommon+0x84>)
 8007d6e:	2301      	movs	r3, #1
 8007d70:	9302      	str	r3, [sp, #8]
 8007d72:	2310      	movs	r3, #16
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <AppInitCommon+0x88>)
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	0013      	movs	r3, r2
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2164      	movs	r1, #100	; 0x64
 8007d80:	2064      	movs	r0, #100	; 0x64
 8007d82:	f7fd fcdd 	bl	8005740 <Gui_StrCenter>
}
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	08007da3 	.word	0x08007da3
 8007d90:	0000ffff 	.word	0x0000ffff
 8007d94:	08008e2c 	.word	0x08008e2c

08007d98 <LoadConfiguration>:
 * @param  None
 * @retval None
 */
void
LoadConfiguration(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0

}
 8007d9c:	46c0      	nop			; (mov r8, r8)
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <AppStateManager>:
 * @retval None
 */
static
void AppStateManager(
    uint8_t event)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	0002      	movs	r2, r0
 8007daa:	1dfb      	adds	r3, r7, #7
 8007dac:	701a      	strb	r2, [r3, #0]
    switch (GetStateApp())
 8007dae:	f000 f833 	bl	8007e18 <GetStateApp>
 8007db2:	0003      	movs	r3, r0
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d015      	beq.n	8007de4 <AppStateManager+0x42>
 8007db8:	dc16      	bgt.n	8007de8 <AppStateManager+0x46>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <AppStateManager+0x22>
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d00a      	beq.n	8007dd8 <AppStateManager+0x36>

        case STATE_APP_RESET:
            break;

        default:
            break;
 8007dc2:	e011      	b.n	8007de8 <AppStateManager+0x46>
            if (event == EVENT_APP_INIT)
 8007dc4:	1dfb      	adds	r3, r7, #7
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d10f      	bne.n	8007dec <AppStateManager+0x4a>
                LoadConfiguration();
 8007dcc:	f7ff ffe4 	bl	8007d98 <LoadConfiguration>
                SetStateApp(STATE_APP_IDLE);
 8007dd0:	2001      	movs	r0, #1
 8007dd2:	f000 f811 	bl	8007df8 <SetStateApp>
            break;
 8007dd6:	e009      	b.n	8007dec <AppStateManager+0x4a>
            DeviceStateMachine(event);
 8007dd8:	1dfb      	adds	r3, r7, #7
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f000 f825 	bl	8007e2c <DeviceStateMachine>
            break;
 8007de2:	e004      	b.n	8007dee <AppStateManager+0x4c>
            break;
 8007de4:	46c0      	nop			; (mov r8, r8)
 8007de6:	e002      	b.n	8007dee <AppStateManager+0x4c>
            break;
 8007de8:	46c0      	nop			; (mov r8, r8)
 8007dea:	e000      	b.n	8007dee <AppStateManager+0x4c>
            break;
 8007dec:	46c0      	nop			; (mov r8, r8)
    }
}
 8007dee:	46c0      	nop			; (mov r8, r8)
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b002      	add	sp, #8
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <SetStateApp>:
 * @retval None
 */
static
void SetStateApp(
    state_app_t state
) {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	0002      	movs	r2, r0
 8007e00:	1dfb      	adds	r3, r7, #7
 8007e02:	701a      	strb	r2, [r3, #0]
    /* Set state of application */
    eCurrentState = state;
 8007e04:	4b03      	ldr	r3, [pc, #12]	; (8007e14 <SetStateApp+0x1c>)
 8007e06:	1dfa      	adds	r2, r7, #7
 8007e08:	7812      	ldrb	r2, [r2, #0]
 8007e0a:	701a      	strb	r2, [r3, #0]
}
 8007e0c:	46c0      	nop			; (mov r8, r8)
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	b002      	add	sp, #8
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	2000056c 	.word	0x2000056c

08007e18 <GetStateApp>:
 * @brief  Get state of application
 * @param  None
 * @retval State of application
 */
static
state_app_t GetStateApp(void) {
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
    /* Return state of application */
    return eCurrentState;
 8007e1c:	4b02      	ldr	r3, [pc, #8]	; (8007e28 <GetStateApp+0x10>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
}
 8007e20:	0018      	movs	r0, r3
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	2000056c 	.word	0x2000056c

08007e2c <DeviceStateMachine>:
 * @retval None
 */
void
DeviceStateMachine(
    uint8_t event
) {
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	0002      	movs	r2, r0
 8007e34:	1dfb      	adds	r3, r7, #7
 8007e36:	701a      	strb	r2, [r3, #0]
    switch (event)
 8007e38:	1dfb      	adds	r3, r7, #7
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	3b06      	subs	r3, #6
 8007e3e:	2b0a      	cmp	r3, #10
 8007e40:	d810      	bhi.n	8007e64 <DeviceStateMachine+0x38>
 8007e42:	009a      	lsls	r2, r3, #2
 8007e44:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <DeviceStateMachine+0x44>)
 8007e46:	18d3      	adds	r3, r2, r3
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	469f      	mov	pc, r3
    {
		case EVENT_OF_BUTTON_BACK_PRESS_LOGIC:
			SamplingBlack();
 8007e4c:	f7ff fc84 	bl	8007758 <SamplingBlack>
			break;
 8007e50:	e009      	b.n	8007e66 <DeviceStateMachine+0x3a>

        case EVENT_OF_BUTTON_NEXT_PRESS_LOGIC:
        	SamplingWhite();
 8007e52:	f7ff fc2b 	bl	80076ac <SamplingWhite>
            break;
 8007e56:	e006      	b.n	8007e66 <DeviceStateMachine+0x3a>

        case EVENT_OF_BUTTON_ENTER_PRESS_LOGIC:
        	Calculate_AdcThreshold();
 8007e58:	f7ff fcd4 	bl	8007804 <Calculate_AdcThreshold>
            break;
 8007e5c:	e003      	b.n	8007e66 <DeviceStateMachine+0x3a>

        case EVENT_OF_BUTTON_ENTER_PRESS_2_TIMES:
        	MotorControl_PID();
 8007e5e:	f7ff f817 	bl	8006e90 <MotorControl_PID>
			break;
 8007e62:	e000      	b.n	8007e66 <DeviceStateMachine+0x3a>

        case EVENT_OF_BUTTON_NEXT_PRESS_2_TIMES:
			break;

        default:
            break;
 8007e64:	46c0      	nop			; (mov r8, r8)
    }
}
 8007e66:	46c0      	nop			; (mov r8, r8)
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	b002      	add	sp, #8
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	0800a5fc 	.word	0x0800a5fc

08007e74 <SetLed_Red>:
 * @brief  Set Red Led Color
 * @param  None
 * @retval None
 */
void SetLed_Red(void *arg)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	LedControl_SetColorGeneral(LED_KIT_ID, LED_COLOR_RED, 100);
 8007e7c:	2264      	movs	r2, #100	; 0x64
 8007e7e:	2100      	movs	r1, #0
 8007e80:	2000      	movs	r0, #0
 8007e82:	f7fe f981 	bl	8006188 <LedControl_SetColorGeneral>
}
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	b002      	add	sp, #8
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <SetLed_Green>:
 * @brief  Set Green Led Color
 * @param  None
 * @retval None
 */
void SetLed_Green(void *arg)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
	LedControl_SetColorGeneral(LED_KIT_ID, LED_COLOR_GREEN, 100);
 8007e96:	2264      	movs	r2, #100	; 0x64
 8007e98:	2101      	movs	r1, #1
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	f7fe f974 	bl	8006188 <LedControl_SetColorGeneral>
}
 8007ea0:	46c0      	nop			; (mov r8, r8)
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	b002      	add	sp, #8
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <SetLed_Blue>:
 * @brief  Set Blue Led Color
 * @param  None
 * @retval None
 */
void SetLed_Blue(void *arg)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
	LedControl_SetColorGeneral(LED_KIT_ID, LED_COLOR_BLUE, 100);
 8007eb0:	2264      	movs	r2, #100	; 0x64
 8007eb2:	2102      	movs	r1, #2
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	f7fe f967 	bl	8006188 <LedControl_SetColorGeneral>
}
 8007eba:	46c0      	nop			; (mov r8, r8)
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	b002      	add	sp, #8
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <BlinkLed>:
 * @brief  Blink led R-G-B color
 * @param  None
 * @retval None
 */
void BlinkLed(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af02      	add	r7, sp, #8
	if (idTimerLedRed != NO_TIMER) {
 8007eca:	4b26      	ldr	r3, [pc, #152]	; (8007f64 <BlinkLed+0xa0>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2bff      	cmp	r3, #255	; 0xff
 8007ed0:	d007      	beq.n	8007ee2 <BlinkLed+0x1e>
		TimerStop(idTimerLedRed);
 8007ed2:	4b24      	ldr	r3, [pc, #144]	; (8007f64 <BlinkLed+0xa0>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	0018      	movs	r0, r3
 8007ed8:	f7ff f980 	bl	80071dc <TimerStop>
		idTimerLedRed = NO_TIMER;
 8007edc:	4b21      	ldr	r3, [pc, #132]	; (8007f64 <BlinkLed+0xa0>)
 8007ede:	22ff      	movs	r2, #255	; 0xff
 8007ee0:	701a      	strb	r2, [r3, #0]
	}

	idTimerLedRed = TimerStart("BlinkLed_Red",
 8007ee2:	4b21      	ldr	r3, [pc, #132]	; (8007f68 <BlinkLed+0xa4>)
 8007ee4:	22fa      	movs	r2, #250	; 0xfa
 8007ee6:	0051      	lsls	r1, r2, #1
 8007ee8:	4820      	ldr	r0, [pc, #128]	; (8007f6c <BlinkLed+0xa8>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	9200      	str	r2, [sp, #0]
 8007eee:	22ff      	movs	r2, #255	; 0xff
 8007ef0:	f7ff f900 	bl	80070f4 <TimerStart>
 8007ef4:	0003      	movs	r3, r0
 8007ef6:	001a      	movs	r2, r3
 8007ef8:	4b1a      	ldr	r3, [pc, #104]	; (8007f64 <BlinkLed+0xa0>)
 8007efa:	701a      	strb	r2, [r3, #0]
							   500,
							   TIMER_REPEAT_FOREVER,
							   SetLed_Red,
							   NULL);

	if (idTimerLedGreen != NO_TIMER) {
 8007efc:	4b1c      	ldr	r3, [pc, #112]	; (8007f70 <BlinkLed+0xac>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2bff      	cmp	r3, #255	; 0xff
 8007f02:	d007      	beq.n	8007f14 <BlinkLed+0x50>
		TimerStop(idTimerLedGreen);
 8007f04:	4b1a      	ldr	r3, [pc, #104]	; (8007f70 <BlinkLed+0xac>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	0018      	movs	r0, r3
 8007f0a:	f7ff f967 	bl	80071dc <TimerStop>
		idTimerLedGreen = NO_TIMER;
 8007f0e:	4b18      	ldr	r3, [pc, #96]	; (8007f70 <BlinkLed+0xac>)
 8007f10:	22ff      	movs	r2, #255	; 0xff
 8007f12:	701a      	strb	r2, [r3, #0]
	}

	idTimerLedGreen = TimerStart("idTimerLedGreen",
 8007f14:	4b17      	ldr	r3, [pc, #92]	; (8007f74 <BlinkLed+0xb0>)
 8007f16:	22fa      	movs	r2, #250	; 0xfa
 8007f18:	0091      	lsls	r1, r2, #2
 8007f1a:	4817      	ldr	r0, [pc, #92]	; (8007f78 <BlinkLed+0xb4>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	9200      	str	r2, [sp, #0]
 8007f20:	22ff      	movs	r2, #255	; 0xff
 8007f22:	f7ff f8e7 	bl	80070f4 <TimerStart>
 8007f26:	0003      	movs	r3, r0
 8007f28:	001a      	movs	r2, r3
 8007f2a:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <BlinkLed+0xac>)
 8007f2c:	701a      	strb	r2, [r3, #0]
							     1000,
							     TIMER_REPEAT_FOREVER,
								 SetLed_Green,
							     NULL);

	if (idTimerLedBlue != NO_TIMER) {
 8007f2e:	4b13      	ldr	r3, [pc, #76]	; (8007f7c <BlinkLed+0xb8>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2bff      	cmp	r3, #255	; 0xff
 8007f34:	d007      	beq.n	8007f46 <BlinkLed+0x82>
		TimerStop(idTimerLedBlue);
 8007f36:	4b11      	ldr	r3, [pc, #68]	; (8007f7c <BlinkLed+0xb8>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f7ff f94e 	bl	80071dc <TimerStop>
		idTimerLedBlue = NO_TIMER;
 8007f40:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <BlinkLed+0xb8>)
 8007f42:	22ff      	movs	r2, #255	; 0xff
 8007f44:	701a      	strb	r2, [r3, #0]
	}

	idTimerLedBlue = TimerStart("idTimerLedBLue",
 8007f46:	4b0e      	ldr	r3, [pc, #56]	; (8007f80 <BlinkLed+0xbc>)
 8007f48:	490e      	ldr	r1, [pc, #56]	; (8007f84 <BlinkLed+0xc0>)
 8007f4a:	480f      	ldr	r0, [pc, #60]	; (8007f88 <BlinkLed+0xc4>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	9200      	str	r2, [sp, #0]
 8007f50:	22ff      	movs	r2, #255	; 0xff
 8007f52:	f7ff f8cf 	bl	80070f4 <TimerStart>
 8007f56:	0003      	movs	r3, r0
 8007f58:	001a      	movs	r2, r3
 8007f5a:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <BlinkLed+0xb8>)
 8007f5c:	701a      	strb	r2, [r3, #0]
								1500,
								TIMER_REPEAT_FOREVER,
								SetLed_Blue,
								NULL);
}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000054 	.word	0x20000054
 8007f68:	08007e75 	.word	0x08007e75
 8007f6c:	08008e48 	.word	0x08008e48
 8007f70:	20000055 	.word	0x20000055
 8007f74:	08007e8f 	.word	0x08007e8f
 8007f78:	08008e58 	.word	0x08008e58
 8007f7c:	20000056 	.word	0x20000056
 8007f80:	08007ea9 	.word	0x08007ea9
 8007f84:	000005dc 	.word	0x000005dc
 8007f88:	08008e68 	.word	0x08008e68

08007f8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007f8c:	480d      	ldr	r0, [pc, #52]	; (8007fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007f8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007f90:	f7fa fdbc 	bl	8002b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007f94:	480c      	ldr	r0, [pc, #48]	; (8007fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8007f96:	490d      	ldr	r1, [pc, #52]	; (8007fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8007f98:	4a0d      	ldr	r2, [pc, #52]	; (8007fd0 <LoopForever+0xe>)
  movs r3, #0
 8007f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007f9c:	e002      	b.n	8007fa4 <LoopCopyDataInit>

08007f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007fa2:	3304      	adds	r3, #4

08007fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007fa8:	d3f9      	bcc.n	8007f9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007faa:	4a0a      	ldr	r2, [pc, #40]	; (8007fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007fac:	4c0a      	ldr	r4, [pc, #40]	; (8007fd8 <LoopForever+0x16>)
  movs r3, #0
 8007fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007fb0:	e001      	b.n	8007fb6 <LoopFillZerobss>

08007fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007fb4:	3204      	adds	r2, #4

08007fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007fb8:	d3fb      	bcc.n	8007fb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007fba:	f000 f817 	bl	8007fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007fbe:	f7ff fe96 	bl	8007cee <main>

08007fc2 <LoopForever>:

LoopForever:
  b LoopForever
 8007fc2:	e7fe      	b.n	8007fc2 <LoopForever>
  ldr   r0, =_estack
 8007fc4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8007fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007fcc:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8007fd0:	0800a660 	.word	0x0800a660
  ldr r2, =_sbss
 8007fd4:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8007fd8:	20000578 	.word	0x20000578

08007fdc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007fdc:	e7fe      	b.n	8007fdc <ADC_IRQHandler>
	...

08007fe0 <__errno>:
 8007fe0:	4b01      	ldr	r3, [pc, #4]	; (8007fe8 <__errno+0x8>)
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	4770      	bx	lr
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	20000058 	.word	0x20000058

08007fec <__libc_init_array>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	2600      	movs	r6, #0
 8007ff0:	4d0c      	ldr	r5, [pc, #48]	; (8008024 <__libc_init_array+0x38>)
 8007ff2:	4c0d      	ldr	r4, [pc, #52]	; (8008028 <__libc_init_array+0x3c>)
 8007ff4:	1b64      	subs	r4, r4, r5
 8007ff6:	10a4      	asrs	r4, r4, #2
 8007ff8:	42a6      	cmp	r6, r4
 8007ffa:	d109      	bne.n	8008010 <__libc_init_array+0x24>
 8007ffc:	2600      	movs	r6, #0
 8007ffe:	f000 feff 	bl	8008e00 <_init>
 8008002:	4d0a      	ldr	r5, [pc, #40]	; (800802c <__libc_init_array+0x40>)
 8008004:	4c0a      	ldr	r4, [pc, #40]	; (8008030 <__libc_init_array+0x44>)
 8008006:	1b64      	subs	r4, r4, r5
 8008008:	10a4      	asrs	r4, r4, #2
 800800a:	42a6      	cmp	r6, r4
 800800c:	d105      	bne.n	800801a <__libc_init_array+0x2e>
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	00b3      	lsls	r3, r6, #2
 8008012:	58eb      	ldr	r3, [r5, r3]
 8008014:	4798      	blx	r3
 8008016:	3601      	adds	r6, #1
 8008018:	e7ee      	b.n	8007ff8 <__libc_init_array+0xc>
 800801a:	00b3      	lsls	r3, r6, #2
 800801c:	58eb      	ldr	r3, [r5, r3]
 800801e:	4798      	blx	r3
 8008020:	3601      	adds	r6, #1
 8008022:	e7f2      	b.n	800800a <__libc_init_array+0x1e>
 8008024:	0800a658 	.word	0x0800a658
 8008028:	0800a658 	.word	0x0800a658
 800802c:	0800a658 	.word	0x0800a658
 8008030:	0800a65c 	.word	0x0800a65c

08008034 <memset>:
 8008034:	0003      	movs	r3, r0
 8008036:	1882      	adds	r2, r0, r2
 8008038:	4293      	cmp	r3, r2
 800803a:	d100      	bne.n	800803e <memset+0xa>
 800803c:	4770      	bx	lr
 800803e:	7019      	strb	r1, [r3, #0]
 8008040:	3301      	adds	r3, #1
 8008042:	e7f9      	b.n	8008038 <memset+0x4>

08008044 <pow>:
 8008044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008046:	0014      	movs	r4, r2
 8008048:	001d      	movs	r5, r3
 800804a:	9000      	str	r0, [sp, #0]
 800804c:	9101      	str	r1, [sp, #4]
 800804e:	f000 f867 	bl	8008120 <__ieee754_pow>
 8008052:	0022      	movs	r2, r4
 8008054:	0006      	movs	r6, r0
 8008056:	000f      	movs	r7, r1
 8008058:	002b      	movs	r3, r5
 800805a:	0020      	movs	r0, r4
 800805c:	0029      	movs	r1, r5
 800805e:	f7fa fc2b 	bl	80028b8 <__aeabi_dcmpun>
 8008062:	2800      	cmp	r0, #0
 8008064:	d13f      	bne.n	80080e6 <pow+0xa2>
 8008066:	9800      	ldr	r0, [sp, #0]
 8008068:	9901      	ldr	r1, [sp, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	2300      	movs	r3, #0
 800806e:	f7f8 f9d9 	bl	8000424 <__aeabi_dcmpeq>
 8008072:	2800      	cmp	r0, #0
 8008074:	d019      	beq.n	80080aa <pow+0x66>
 8008076:	2200      	movs	r2, #0
 8008078:	2300      	movs	r3, #0
 800807a:	0020      	movs	r0, r4
 800807c:	0029      	movs	r1, r5
 800807e:	f7f8 f9d1 	bl	8000424 <__aeabi_dcmpeq>
 8008082:	2800      	cmp	r0, #0
 8008084:	d146      	bne.n	8008114 <pow+0xd0>
 8008086:	0020      	movs	r0, r4
 8008088:	0029      	movs	r1, r5
 800808a:	f000 fe3d 	bl	8008d08 <finite>
 800808e:	2800      	cmp	r0, #0
 8008090:	d029      	beq.n	80080e6 <pow+0xa2>
 8008092:	2200      	movs	r2, #0
 8008094:	2300      	movs	r3, #0
 8008096:	0020      	movs	r0, r4
 8008098:	0029      	movs	r1, r5
 800809a:	f7f8 f9c9 	bl	8000430 <__aeabi_dcmplt>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d021      	beq.n	80080e6 <pow+0xa2>
 80080a2:	f7ff ff9d 	bl	8007fe0 <__errno>
 80080a6:	2322      	movs	r3, #34	; 0x22
 80080a8:	e01c      	b.n	80080e4 <pow+0xa0>
 80080aa:	0030      	movs	r0, r6
 80080ac:	0039      	movs	r1, r7
 80080ae:	f000 fe2b 	bl	8008d08 <finite>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d11b      	bne.n	80080ee <pow+0xaa>
 80080b6:	9800      	ldr	r0, [sp, #0]
 80080b8:	9901      	ldr	r1, [sp, #4]
 80080ba:	f000 fe25 	bl	8008d08 <finite>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d015      	beq.n	80080ee <pow+0xaa>
 80080c2:	0020      	movs	r0, r4
 80080c4:	0029      	movs	r1, r5
 80080c6:	f000 fe1f 	bl	8008d08 <finite>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d00f      	beq.n	80080ee <pow+0xaa>
 80080ce:	0032      	movs	r2, r6
 80080d0:	003b      	movs	r3, r7
 80080d2:	0030      	movs	r0, r6
 80080d4:	0039      	movs	r1, r7
 80080d6:	f7fa fbef 	bl	80028b8 <__aeabi_dcmpun>
 80080da:	2800      	cmp	r0, #0
 80080dc:	d0e1      	beq.n	80080a2 <pow+0x5e>
 80080de:	f7ff ff7f 	bl	8007fe0 <__errno>
 80080e2:	2321      	movs	r3, #33	; 0x21
 80080e4:	6003      	str	r3, [r0, #0]
 80080e6:	0030      	movs	r0, r6
 80080e8:	0039      	movs	r1, r7
 80080ea:	b003      	add	sp, #12
 80080ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ee:	2200      	movs	r2, #0
 80080f0:	2300      	movs	r3, #0
 80080f2:	0030      	movs	r0, r6
 80080f4:	0039      	movs	r1, r7
 80080f6:	f7f8 f995 	bl	8000424 <__aeabi_dcmpeq>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	d0f3      	beq.n	80080e6 <pow+0xa2>
 80080fe:	9800      	ldr	r0, [sp, #0]
 8008100:	9901      	ldr	r1, [sp, #4]
 8008102:	f000 fe01 	bl	8008d08 <finite>
 8008106:	2800      	cmp	r0, #0
 8008108:	d0ed      	beq.n	80080e6 <pow+0xa2>
 800810a:	0020      	movs	r0, r4
 800810c:	0029      	movs	r1, r5
 800810e:	f000 fdfb 	bl	8008d08 <finite>
 8008112:	e7c4      	b.n	800809e <pow+0x5a>
 8008114:	2600      	movs	r6, #0
 8008116:	4f01      	ldr	r7, [pc, #4]	; (800811c <pow+0xd8>)
 8008118:	e7e5      	b.n	80080e6 <pow+0xa2>
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	3ff00000 	.word	0x3ff00000

08008120 <__ieee754_pow>:
 8008120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008122:	b095      	sub	sp, #84	; 0x54
 8008124:	9202      	str	r2, [sp, #8]
 8008126:	9303      	str	r3, [sp, #12]
 8008128:	9b03      	ldr	r3, [sp, #12]
 800812a:	9a03      	ldr	r2, [sp, #12]
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	9b02      	ldr	r3, [sp, #8]
 8008130:	0056      	lsls	r6, r2, #1
 8008132:	001a      	movs	r2, r3
 8008134:	0876      	lsrs	r6, r6, #1
 8008136:	0007      	movs	r7, r0
 8008138:	000d      	movs	r5, r1
 800813a:	4332      	orrs	r2, r6
 800813c:	d119      	bne.n	8008172 <__ieee754_pow+0x52>
 800813e:	2180      	movs	r1, #128	; 0x80
 8008140:	0309      	lsls	r1, r1, #12
 8008142:	4069      	eors	r1, r5
 8008144:	0002      	movs	r2, r0
 8008146:	000b      	movs	r3, r1
 8008148:	1892      	adds	r2, r2, r2
 800814a:	415b      	adcs	r3, r3
 800814c:	4989      	ldr	r1, [pc, #548]	; (8008374 <__ieee754_pow+0x254>)
 800814e:	428b      	cmp	r3, r1
 8008150:	d806      	bhi.n	8008160 <__ieee754_pow+0x40>
 8008152:	d001      	beq.n	8008158 <__ieee754_pow+0x38>
 8008154:	f000 fcb6 	bl	8008ac4 <__ieee754_pow+0x9a4>
 8008158:	2a00      	cmp	r2, #0
 800815a:	d101      	bne.n	8008160 <__ieee754_pow+0x40>
 800815c:	f000 fcb2 	bl	8008ac4 <__ieee754_pow+0x9a4>
 8008160:	9a02      	ldr	r2, [sp, #8]
 8008162:	9b03      	ldr	r3, [sp, #12]
 8008164:	0038      	movs	r0, r7
 8008166:	0029      	movs	r1, r5
 8008168:	f7f8 fe6a 	bl	8000e40 <__aeabi_dadd>
 800816c:	9000      	str	r0, [sp, #0]
 800816e:	9101      	str	r1, [sp, #4]
 8008170:	e0ad      	b.n	80082ce <__ieee754_pow+0x1ae>
 8008172:	4a81      	ldr	r2, [pc, #516]	; (8008378 <__ieee754_pow+0x258>)
 8008174:	004c      	lsls	r4, r1, #1
 8008176:	9108      	str	r1, [sp, #32]
 8008178:	9000      	str	r0, [sp, #0]
 800817a:	0864      	lsrs	r4, r4, #1
 800817c:	4294      	cmp	r4, r2
 800817e:	dc08      	bgt.n	8008192 <__ieee754_pow+0x72>
 8008180:	d101      	bne.n	8008186 <__ieee754_pow+0x66>
 8008182:	2800      	cmp	r0, #0
 8008184:	d1ec      	bne.n	8008160 <__ieee754_pow+0x40>
 8008186:	4a7c      	ldr	r2, [pc, #496]	; (8008378 <__ieee754_pow+0x258>)
 8008188:	4296      	cmp	r6, r2
 800818a:	dc02      	bgt.n	8008192 <__ieee754_pow+0x72>
 800818c:	d10c      	bne.n	80081a8 <__ieee754_pow+0x88>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <__ieee754_pow+0x88>
 8008192:	4b7a      	ldr	r3, [pc, #488]	; (800837c <__ieee754_pow+0x25c>)
 8008194:	18eb      	adds	r3, r5, r3
 8008196:	433b      	orrs	r3, r7
 8008198:	d1e2      	bne.n	8008160 <__ieee754_pow+0x40>
 800819a:	2180      	movs	r1, #128	; 0x80
 800819c:	9803      	ldr	r0, [sp, #12]
 800819e:	0309      	lsls	r1, r1, #12
 80081a0:	4048      	eors	r0, r1
 80081a2:	0003      	movs	r3, r0
 80081a4:	9a02      	ldr	r2, [sp, #8]
 80081a6:	e7cf      	b.n	8008148 <__ieee754_pow+0x28>
 80081a8:	2200      	movs	r2, #0
 80081aa:	9206      	str	r2, [sp, #24]
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	da69      	bge.n	8008284 <__ieee754_pow+0x164>
 80081b0:	4a73      	ldr	r2, [pc, #460]	; (8008380 <__ieee754_pow+0x260>)
 80081b2:	4296      	cmp	r6, r2
 80081b4:	dc64      	bgt.n	8008280 <__ieee754_pow+0x160>
 80081b6:	4a73      	ldr	r2, [pc, #460]	; (8008384 <__ieee754_pow+0x264>)
 80081b8:	4296      	cmp	r6, r2
 80081ba:	dd11      	ble.n	80081e0 <__ieee754_pow+0xc0>
 80081bc:	4972      	ldr	r1, [pc, #456]	; (8008388 <__ieee754_pow+0x268>)
 80081be:	1532      	asrs	r2, r6, #20
 80081c0:	1852      	adds	r2, r2, r1
 80081c2:	2a14      	cmp	r2, #20
 80081c4:	dd3c      	ble.n	8008240 <__ieee754_pow+0x120>
 80081c6:	2134      	movs	r1, #52	; 0x34
 80081c8:	1a8a      	subs	r2, r1, r2
 80081ca:	9902      	ldr	r1, [sp, #8]
 80081cc:	40d1      	lsrs	r1, r2
 80081ce:	0008      	movs	r0, r1
 80081d0:	4090      	lsls	r0, r2
 80081d2:	4298      	cmp	r0, r3
 80081d4:	d104      	bne.n	80081e0 <__ieee754_pow+0xc0>
 80081d6:	2201      	movs	r2, #1
 80081d8:	4011      	ands	r1, r2
 80081da:	1892      	adds	r2, r2, r2
 80081dc:	1a52      	subs	r2, r2, r1
 80081de:	9206      	str	r2, [sp, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d03c      	beq.n	800825e <__ieee754_pow+0x13e>
 80081e4:	0038      	movs	r0, r7
 80081e6:	0029      	movs	r1, r5
 80081e8:	f000 fd8b 	bl	8008d02 <fabs>
 80081ec:	9000      	str	r0, [sp, #0]
 80081ee:	9101      	str	r1, [sp, #4]
 80081f0:	2f00      	cmp	r7, #0
 80081f2:	d000      	beq.n	80081f6 <__ieee754_pow+0xd6>
 80081f4:	e094      	b.n	8008320 <__ieee754_pow+0x200>
 80081f6:	2c00      	cmp	r4, #0
 80081f8:	d005      	beq.n	8008206 <__ieee754_pow+0xe6>
 80081fa:	4a64      	ldr	r2, [pc, #400]	; (800838c <__ieee754_pow+0x26c>)
 80081fc:	00ab      	lsls	r3, r5, #2
 80081fe:	089b      	lsrs	r3, r3, #2
 8008200:	4293      	cmp	r3, r2
 8008202:	d000      	beq.n	8008206 <__ieee754_pow+0xe6>
 8008204:	e08c      	b.n	8008320 <__ieee754_pow+0x200>
 8008206:	9b04      	ldr	r3, [sp, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	da07      	bge.n	800821c <__ieee754_pow+0xfc>
 800820c:	9a00      	ldr	r2, [sp, #0]
 800820e:	9b01      	ldr	r3, [sp, #4]
 8008210:	2000      	movs	r0, #0
 8008212:	495e      	ldr	r1, [pc, #376]	; (800838c <__ieee754_pow+0x26c>)
 8008214:	f7f9 f950 	bl	80014b8 <__aeabi_ddiv>
 8008218:	9000      	str	r0, [sp, #0]
 800821a:	9101      	str	r1, [sp, #4]
 800821c:	9b08      	ldr	r3, [sp, #32]
 800821e:	2b00      	cmp	r3, #0
 8008220:	da55      	bge.n	80082ce <__ieee754_pow+0x1ae>
 8008222:	4b56      	ldr	r3, [pc, #344]	; (800837c <__ieee754_pow+0x25c>)
 8008224:	18e4      	adds	r4, r4, r3
 8008226:	9b06      	ldr	r3, [sp, #24]
 8008228:	431c      	orrs	r4, r3
 800822a:	d000      	beq.n	800822e <__ieee754_pow+0x10e>
 800822c:	e06c      	b.n	8008308 <__ieee754_pow+0x1e8>
 800822e:	9a00      	ldr	r2, [sp, #0]
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	0010      	movs	r0, r2
 8008234:	0019      	movs	r1, r3
 8008236:	f7f9 ffad 	bl	8002194 <__aeabi_dsub>
 800823a:	0002      	movs	r2, r0
 800823c:	000b      	movs	r3, r1
 800823e:	e01c      	b.n	800827a <__ieee754_pow+0x15a>
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1cf      	bne.n	80081e4 <__ieee754_pow+0xc4>
 8008244:	3314      	adds	r3, #20
 8008246:	1a9a      	subs	r2, r3, r2
 8008248:	0033      	movs	r3, r6
 800824a:	4113      	asrs	r3, r2
 800824c:	0019      	movs	r1, r3
 800824e:	4091      	lsls	r1, r2
 8008250:	42b1      	cmp	r1, r6
 8008252:	d104      	bne.n	800825e <__ieee754_pow+0x13e>
 8008254:	2201      	movs	r2, #1
 8008256:	4013      	ands	r3, r2
 8008258:	1892      	adds	r2, r2, r2
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	9306      	str	r3, [sp, #24]
 800825e:	4b4b      	ldr	r3, [pc, #300]	; (800838c <__ieee754_pow+0x26c>)
 8008260:	429e      	cmp	r6, r3
 8008262:	d138      	bne.n	80082d6 <__ieee754_pow+0x1b6>
 8008264:	0038      	movs	r0, r7
 8008266:	0029      	movs	r1, r5
 8008268:	9b04      	ldr	r3, [sp, #16]
 800826a:	9000      	str	r0, [sp, #0]
 800826c:	9101      	str	r1, [sp, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	da2d      	bge.n	80082ce <__ieee754_pow+0x1ae>
 8008272:	003a      	movs	r2, r7
 8008274:	002b      	movs	r3, r5
 8008276:	2000      	movs	r0, #0
 8008278:	4944      	ldr	r1, [pc, #272]	; (800838c <__ieee754_pow+0x26c>)
 800827a:	f7f9 f91d 	bl	80014b8 <__aeabi_ddiv>
 800827e:	e775      	b.n	800816c <__ieee754_pow+0x4c>
 8008280:	2202      	movs	r2, #2
 8008282:	9206      	str	r2, [sp, #24]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1ad      	bne.n	80081e4 <__ieee754_pow+0xc4>
 8008288:	4b3b      	ldr	r3, [pc, #236]	; (8008378 <__ieee754_pow+0x258>)
 800828a:	429e      	cmp	r6, r3
 800828c:	d1e7      	bne.n	800825e <__ieee754_pow+0x13e>
 800828e:	4b3b      	ldr	r3, [pc, #236]	; (800837c <__ieee754_pow+0x25c>)
 8008290:	18e3      	adds	r3, r4, r3
 8008292:	431f      	orrs	r7, r3
 8008294:	d101      	bne.n	800829a <__ieee754_pow+0x17a>
 8008296:	f000 fc15 	bl	8008ac4 <__ieee754_pow+0x9a4>
 800829a:	4b3a      	ldr	r3, [pc, #232]	; (8008384 <__ieee754_pow+0x264>)
 800829c:	429c      	cmp	r4, r3
 800829e:	dd09      	ble.n	80082b4 <__ieee754_pow+0x194>
 80082a0:	9b04      	ldr	r3, [sp, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	da01      	bge.n	80082aa <__ieee754_pow+0x18a>
 80082a6:	f000 fc11 	bl	8008acc <__ieee754_pow+0x9ac>
 80082aa:	9b02      	ldr	r3, [sp, #8]
 80082ac:	9c03      	ldr	r4, [sp, #12]
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	9401      	str	r4, [sp, #4]
 80082b2:	e00c      	b.n	80082ce <__ieee754_pow+0x1ae>
 80082b4:	9b04      	ldr	r3, [sp, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	db01      	blt.n	80082be <__ieee754_pow+0x19e>
 80082ba:	f000 fc07 	bl	8008acc <__ieee754_pow+0x9ac>
 80082be:	2280      	movs	r2, #128	; 0x80
 80082c0:	0612      	lsls	r2, r2, #24
 80082c2:	4694      	mov	ip, r2
 80082c4:	9b02      	ldr	r3, [sp, #8]
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	9b03      	ldr	r3, [sp, #12]
 80082ca:	4463      	add	r3, ip
 80082cc:	9301      	str	r3, [sp, #4]
 80082ce:	9800      	ldr	r0, [sp, #0]
 80082d0:	9901      	ldr	r1, [sp, #4]
 80082d2:	b015      	add	sp, #84	; 0x54
 80082d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d6:	2380      	movs	r3, #128	; 0x80
 80082d8:	9a04      	ldr	r2, [sp, #16]
 80082da:	05db      	lsls	r3, r3, #23
 80082dc:	429a      	cmp	r2, r3
 80082de:	d106      	bne.n	80082ee <__ieee754_pow+0x1ce>
 80082e0:	003a      	movs	r2, r7
 80082e2:	002b      	movs	r3, r5
 80082e4:	0038      	movs	r0, r7
 80082e6:	0029      	movs	r1, r5
 80082e8:	f7f9 fce8 	bl	8001cbc <__aeabi_dmul>
 80082ec:	e73e      	b.n	800816c <__ieee754_pow+0x4c>
 80082ee:	4b28      	ldr	r3, [pc, #160]	; (8008390 <__ieee754_pow+0x270>)
 80082f0:	9a04      	ldr	r2, [sp, #16]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d000      	beq.n	80082f8 <__ieee754_pow+0x1d8>
 80082f6:	e775      	b.n	80081e4 <__ieee754_pow+0xc4>
 80082f8:	2d00      	cmp	r5, #0
 80082fa:	da00      	bge.n	80082fe <__ieee754_pow+0x1de>
 80082fc:	e772      	b.n	80081e4 <__ieee754_pow+0xc4>
 80082fe:	0038      	movs	r0, r7
 8008300:	0029      	movs	r1, r5
 8008302:	f000 fc17 	bl	8008b34 <__ieee754_sqrt>
 8008306:	e731      	b.n	800816c <__ieee754_pow+0x4c>
 8008308:	9b06      	ldr	r3, [sp, #24]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d1df      	bne.n	80082ce <__ieee754_pow+0x1ae>
 800830e:	9800      	ldr	r0, [sp, #0]
 8008310:	2180      	movs	r1, #128	; 0x80
 8008312:	0002      	movs	r2, r0
 8008314:	9801      	ldr	r0, [sp, #4]
 8008316:	0609      	lsls	r1, r1, #24
 8008318:	1843      	adds	r3, r0, r1
 800831a:	9200      	str	r2, [sp, #0]
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	e7d6      	b.n	80082ce <__ieee754_pow+0x1ae>
 8008320:	0feb      	lsrs	r3, r5, #31
 8008322:	3b01      	subs	r3, #1
 8008324:	930e      	str	r3, [sp, #56]	; 0x38
 8008326:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008328:	9b06      	ldr	r3, [sp, #24]
 800832a:	4313      	orrs	r3, r2
 800832c:	d104      	bne.n	8008338 <__ieee754_pow+0x218>
 800832e:	003a      	movs	r2, r7
 8008330:	002b      	movs	r3, r5
 8008332:	0038      	movs	r0, r7
 8008334:	0029      	movs	r1, r5
 8008336:	e77e      	b.n	8008236 <__ieee754_pow+0x116>
 8008338:	4b16      	ldr	r3, [pc, #88]	; (8008394 <__ieee754_pow+0x274>)
 800833a:	429e      	cmp	r6, r3
 800833c:	dc00      	bgt.n	8008340 <__ieee754_pow+0x220>
 800833e:	e0ef      	b.n	8008520 <__ieee754_pow+0x400>
 8008340:	4b15      	ldr	r3, [pc, #84]	; (8008398 <__ieee754_pow+0x278>)
 8008342:	429e      	cmp	r6, r3
 8008344:	dd09      	ble.n	800835a <__ieee754_pow+0x23a>
 8008346:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <__ieee754_pow+0x264>)
 8008348:	429c      	cmp	r4, r3
 800834a:	dc0c      	bgt.n	8008366 <__ieee754_pow+0x246>
 800834c:	9b04      	ldr	r3, [sp, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	da0c      	bge.n	800836c <__ieee754_pow+0x24c>
 8008352:	2000      	movs	r0, #0
 8008354:	f000 fcce 	bl	8008cf4 <__math_oflow>
 8008358:	e708      	b.n	800816c <__ieee754_pow+0x4c>
 800835a:	4b10      	ldr	r3, [pc, #64]	; (800839c <__ieee754_pow+0x27c>)
 800835c:	429c      	cmp	r4, r3
 800835e:	ddf5      	ble.n	800834c <__ieee754_pow+0x22c>
 8008360:	4b0a      	ldr	r3, [pc, #40]	; (800838c <__ieee754_pow+0x26c>)
 8008362:	429c      	cmp	r4, r3
 8008364:	dd1c      	ble.n	80083a0 <__ieee754_pow+0x280>
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	dcf2      	bgt.n	8008352 <__ieee754_pow+0x232>
 800836c:	2000      	movs	r0, #0
 800836e:	f000 fcba 	bl	8008ce6 <__math_uflow>
 8008372:	e6fb      	b.n	800816c <__ieee754_pow+0x4c>
 8008374:	fff00000 	.word	0xfff00000
 8008378:	7ff00000 	.word	0x7ff00000
 800837c:	c0100000 	.word	0xc0100000
 8008380:	433fffff 	.word	0x433fffff
 8008384:	3fefffff 	.word	0x3fefffff
 8008388:	fffffc01 	.word	0xfffffc01
 800838c:	3ff00000 	.word	0x3ff00000
 8008390:	3fe00000 	.word	0x3fe00000
 8008394:	41e00000 	.word	0x41e00000
 8008398:	43f00000 	.word	0x43f00000
 800839c:	3feffffe 	.word	0x3feffffe
 80083a0:	2200      	movs	r2, #0
 80083a2:	9800      	ldr	r0, [sp, #0]
 80083a4:	9901      	ldr	r1, [sp, #4]
 80083a6:	4b52      	ldr	r3, [pc, #328]	; (80084f0 <__ieee754_pow+0x3d0>)
 80083a8:	f7f9 fef4 	bl	8002194 <__aeabi_dsub>
 80083ac:	22c0      	movs	r2, #192	; 0xc0
 80083ae:	4b51      	ldr	r3, [pc, #324]	; (80084f4 <__ieee754_pow+0x3d4>)
 80083b0:	05d2      	lsls	r2, r2, #23
 80083b2:	0004      	movs	r4, r0
 80083b4:	000d      	movs	r5, r1
 80083b6:	f7f9 fc81 	bl	8001cbc <__aeabi_dmul>
 80083ba:	4a4f      	ldr	r2, [pc, #316]	; (80084f8 <__ieee754_pow+0x3d8>)
 80083bc:	9000      	str	r0, [sp, #0]
 80083be:	9101      	str	r1, [sp, #4]
 80083c0:	4b4e      	ldr	r3, [pc, #312]	; (80084fc <__ieee754_pow+0x3dc>)
 80083c2:	0020      	movs	r0, r4
 80083c4:	0029      	movs	r1, r5
 80083c6:	f7f9 fc79 	bl	8001cbc <__aeabi_dmul>
 80083ca:	2200      	movs	r2, #0
 80083cc:	9004      	str	r0, [sp, #16]
 80083ce:	9105      	str	r1, [sp, #20]
 80083d0:	4b4b      	ldr	r3, [pc, #300]	; (8008500 <__ieee754_pow+0x3e0>)
 80083d2:	0020      	movs	r0, r4
 80083d4:	0029      	movs	r1, r5
 80083d6:	f7f9 fc71 	bl	8001cbc <__aeabi_dmul>
 80083da:	0002      	movs	r2, r0
 80083dc:	000b      	movs	r3, r1
 80083de:	4849      	ldr	r0, [pc, #292]	; (8008504 <__ieee754_pow+0x3e4>)
 80083e0:	4949      	ldr	r1, [pc, #292]	; (8008508 <__ieee754_pow+0x3e8>)
 80083e2:	f7f9 fed7 	bl	8002194 <__aeabi_dsub>
 80083e6:	0022      	movs	r2, r4
 80083e8:	002b      	movs	r3, r5
 80083ea:	f7f9 fc67 	bl	8001cbc <__aeabi_dmul>
 80083ee:	0002      	movs	r2, r0
 80083f0:	000b      	movs	r3, r1
 80083f2:	2000      	movs	r0, #0
 80083f4:	4945      	ldr	r1, [pc, #276]	; (800850c <__ieee754_pow+0x3ec>)
 80083f6:	f7f9 fecd 	bl	8002194 <__aeabi_dsub>
 80083fa:	0022      	movs	r2, r4
 80083fc:	0006      	movs	r6, r0
 80083fe:	000f      	movs	r7, r1
 8008400:	002b      	movs	r3, r5
 8008402:	0020      	movs	r0, r4
 8008404:	0029      	movs	r1, r5
 8008406:	f7f9 fc59 	bl	8001cbc <__aeabi_dmul>
 800840a:	0002      	movs	r2, r0
 800840c:	000b      	movs	r3, r1
 800840e:	0030      	movs	r0, r6
 8008410:	0039      	movs	r1, r7
 8008412:	f7f9 fc53 	bl	8001cbc <__aeabi_dmul>
 8008416:	4a3e      	ldr	r2, [pc, #248]	; (8008510 <__ieee754_pow+0x3f0>)
 8008418:	4b36      	ldr	r3, [pc, #216]	; (80084f4 <__ieee754_pow+0x3d4>)
 800841a:	f7f9 fc4f 	bl	8001cbc <__aeabi_dmul>
 800841e:	0002      	movs	r2, r0
 8008420:	000b      	movs	r3, r1
 8008422:	9804      	ldr	r0, [sp, #16]
 8008424:	9905      	ldr	r1, [sp, #20]
 8008426:	f7f9 feb5 	bl	8002194 <__aeabi_dsub>
 800842a:	0002      	movs	r2, r0
 800842c:	000b      	movs	r3, r1
 800842e:	0004      	movs	r4, r0
 8008430:	000d      	movs	r5, r1
 8008432:	9800      	ldr	r0, [sp, #0]
 8008434:	9901      	ldr	r1, [sp, #4]
 8008436:	f7f8 fd03 	bl	8000e40 <__aeabi_dadd>
 800843a:	9a00      	ldr	r2, [sp, #0]
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	2000      	movs	r0, #0
 8008440:	000f      	movs	r7, r1
 8008442:	0006      	movs	r6, r0
 8008444:	f7f9 fea6 	bl	8002194 <__aeabi_dsub>
 8008448:	0002      	movs	r2, r0
 800844a:	000b      	movs	r3, r1
 800844c:	0020      	movs	r0, r4
 800844e:	0029      	movs	r1, r5
 8008450:	f7f9 fea0 	bl	8002194 <__aeabi_dsub>
 8008454:	9b06      	ldr	r3, [sp, #24]
 8008456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008458:	3b01      	subs	r3, #1
 800845a:	9004      	str	r0, [sp, #16]
 800845c:	9105      	str	r1, [sp, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	d000      	beq.n	8008464 <__ieee754_pow+0x344>
 8008462:	e1db      	b.n	800881c <__ieee754_pow+0x6fc>
 8008464:	2300      	movs	r3, #0
 8008466:	4c2b      	ldr	r4, [pc, #172]	; (8008514 <__ieee754_pow+0x3f4>)
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	9401      	str	r4, [sp, #4]
 800846c:	9c02      	ldr	r4, [sp, #8]
 800846e:	9d03      	ldr	r5, [sp, #12]
 8008470:	9802      	ldr	r0, [sp, #8]
 8008472:	9903      	ldr	r1, [sp, #12]
 8008474:	2400      	movs	r4, #0
 8008476:	002b      	movs	r3, r5
 8008478:	0022      	movs	r2, r4
 800847a:	f7f9 fe8b 	bl	8002194 <__aeabi_dsub>
 800847e:	0032      	movs	r2, r6
 8008480:	003b      	movs	r3, r7
 8008482:	f7f9 fc1b 	bl	8001cbc <__aeabi_dmul>
 8008486:	9a02      	ldr	r2, [sp, #8]
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	9006      	str	r0, [sp, #24]
 800848c:	9107      	str	r1, [sp, #28]
 800848e:	9804      	ldr	r0, [sp, #16]
 8008490:	9905      	ldr	r1, [sp, #20]
 8008492:	f7f9 fc13 	bl	8001cbc <__aeabi_dmul>
 8008496:	0002      	movs	r2, r0
 8008498:	000b      	movs	r3, r1
 800849a:	9806      	ldr	r0, [sp, #24]
 800849c:	9907      	ldr	r1, [sp, #28]
 800849e:	f7f8 fccf 	bl	8000e40 <__aeabi_dadd>
 80084a2:	0022      	movs	r2, r4
 80084a4:	002b      	movs	r3, r5
 80084a6:	9004      	str	r0, [sp, #16]
 80084a8:	9105      	str	r1, [sp, #20]
 80084aa:	0030      	movs	r0, r6
 80084ac:	0039      	movs	r1, r7
 80084ae:	f7f9 fc05 	bl	8001cbc <__aeabi_dmul>
 80084b2:	0006      	movs	r6, r0
 80084b4:	000f      	movs	r7, r1
 80084b6:	000b      	movs	r3, r1
 80084b8:	0002      	movs	r2, r0
 80084ba:	9804      	ldr	r0, [sp, #16]
 80084bc:	9905      	ldr	r1, [sp, #20]
 80084be:	9606      	str	r6, [sp, #24]
 80084c0:	9707      	str	r7, [sp, #28]
 80084c2:	f7f8 fcbd 	bl	8000e40 <__aeabi_dadd>
 80084c6:	4b14      	ldr	r3, [pc, #80]	; (8008518 <__ieee754_pow+0x3f8>)
 80084c8:	0005      	movs	r5, r0
 80084ca:	000c      	movs	r4, r1
 80084cc:	9108      	str	r1, [sp, #32]
 80084ce:	4299      	cmp	r1, r3
 80084d0:	dc00      	bgt.n	80084d4 <__ieee754_pow+0x3b4>
 80084d2:	e2d6      	b.n	8008a82 <__ieee754_pow+0x962>
 80084d4:	4b11      	ldr	r3, [pc, #68]	; (800851c <__ieee754_pow+0x3fc>)
 80084d6:	18cb      	adds	r3, r1, r3
 80084d8:	4303      	orrs	r3, r0
 80084da:	d100      	bne.n	80084de <__ieee754_pow+0x3be>
 80084dc:	e1d8      	b.n	8008890 <__ieee754_pow+0x770>
 80084de:	9800      	ldr	r0, [sp, #0]
 80084e0:	9901      	ldr	r1, [sp, #4]
 80084e2:	2300      	movs	r3, #0
 80084e4:	2200      	movs	r2, #0
 80084e6:	f7f7 ffa3 	bl	8000430 <__aeabi_dcmplt>
 80084ea:	1e43      	subs	r3, r0, #1
 80084ec:	4198      	sbcs	r0, r3
 80084ee:	e731      	b.n	8008354 <__ieee754_pow+0x234>
 80084f0:	3ff00000 	.word	0x3ff00000
 80084f4:	3ff71547 	.word	0x3ff71547
 80084f8:	f85ddf44 	.word	0xf85ddf44
 80084fc:	3e54ae0b 	.word	0x3e54ae0b
 8008500:	3fd00000 	.word	0x3fd00000
 8008504:	55555555 	.word	0x55555555
 8008508:	3fd55555 	.word	0x3fd55555
 800850c:	3fe00000 	.word	0x3fe00000
 8008510:	652b82fe 	.word	0x652b82fe
 8008514:	bff00000 	.word	0xbff00000
 8008518:	408fffff 	.word	0x408fffff
 800851c:	bf700000 	.word	0xbf700000
 8008520:	4bc0      	ldr	r3, [pc, #768]	; (8008824 <__ieee754_pow+0x704>)
 8008522:	2200      	movs	r2, #0
 8008524:	422b      	tst	r3, r5
 8008526:	d10a      	bne.n	800853e <__ieee754_pow+0x41e>
 8008528:	9800      	ldr	r0, [sp, #0]
 800852a:	9901      	ldr	r1, [sp, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	4bbe      	ldr	r3, [pc, #760]	; (8008828 <__ieee754_pow+0x708>)
 8008530:	f7f9 fbc4 	bl	8001cbc <__aeabi_dmul>
 8008534:	2235      	movs	r2, #53	; 0x35
 8008536:	9000      	str	r0, [sp, #0]
 8008538:	9101      	str	r1, [sp, #4]
 800853a:	9c01      	ldr	r4, [sp, #4]
 800853c:	4252      	negs	r2, r2
 800853e:	49bb      	ldr	r1, [pc, #748]	; (800882c <__ieee754_pow+0x70c>)
 8008540:	1523      	asrs	r3, r4, #20
 8008542:	185b      	adds	r3, r3, r1
 8008544:	189b      	adds	r3, r3, r2
 8008546:	0324      	lsls	r4, r4, #12
 8008548:	4db9      	ldr	r5, [pc, #740]	; (8008830 <__ieee754_pow+0x710>)
 800854a:	930d      	str	r3, [sp, #52]	; 0x34
 800854c:	4bb9      	ldr	r3, [pc, #740]	; (8008834 <__ieee754_pow+0x714>)
 800854e:	0b22      	lsrs	r2, r4, #12
 8008550:	4315      	orrs	r5, r2
 8008552:	2400      	movs	r4, #0
 8008554:	429a      	cmp	r2, r3
 8008556:	dd09      	ble.n	800856c <__ieee754_pow+0x44c>
 8008558:	4bb7      	ldr	r3, [pc, #732]	; (8008838 <__ieee754_pow+0x718>)
 800855a:	3401      	adds	r4, #1
 800855c:	429a      	cmp	r2, r3
 800855e:	dd05      	ble.n	800856c <__ieee754_pow+0x44c>
 8008560:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008562:	191b      	adds	r3, r3, r4
 8008564:	2400      	movs	r4, #0
 8008566:	930d      	str	r3, [sp, #52]	; 0x34
 8008568:	4bb4      	ldr	r3, [pc, #720]	; (800883c <__ieee754_pow+0x71c>)
 800856a:	18ed      	adds	r5, r5, r3
 800856c:	00e3      	lsls	r3, r4, #3
 800856e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008570:	4bb3      	ldr	r3, [pc, #716]	; (8008840 <__ieee754_pow+0x720>)
 8008572:	00e2      	lsls	r2, r4, #3
 8008574:	189b      	adds	r3, r3, r2
 8008576:	9800      	ldr	r0, [sp, #0]
 8008578:	9901      	ldr	r1, [sp, #4]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	0029      	movs	r1, r5
 8008580:	0006      	movs	r6, r0
 8008582:	920a      	str	r2, [sp, #40]	; 0x28
 8008584:	930b      	str	r3, [sp, #44]	; 0x2c
 8008586:	f7f9 fe05 	bl	8002194 <__aeabi_dsub>
 800858a:	0032      	movs	r2, r6
 800858c:	002b      	movs	r3, r5
 800858e:	9010      	str	r0, [sp, #64]	; 0x40
 8008590:	9111      	str	r1, [sp, #68]	; 0x44
 8008592:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008596:	f7f8 fc53 	bl	8000e40 <__aeabi_dadd>
 800859a:	0002      	movs	r2, r0
 800859c:	000b      	movs	r3, r1
 800859e:	2000      	movs	r0, #0
 80085a0:	49a3      	ldr	r1, [pc, #652]	; (8008830 <__ieee754_pow+0x710>)
 80085a2:	f7f8 ff89 	bl	80014b8 <__aeabi_ddiv>
 80085a6:	0002      	movs	r2, r0
 80085a8:	000b      	movs	r3, r1
 80085aa:	9012      	str	r0, [sp, #72]	; 0x48
 80085ac:	9113      	str	r1, [sp, #76]	; 0x4c
 80085ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 80085b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085b2:	f7f9 fb83 	bl	8001cbc <__aeabi_dmul>
 80085b6:	9008      	str	r0, [sp, #32]
 80085b8:	9109      	str	r1, [sp, #36]	; 0x24
 80085ba:	9a08      	ldr	r2, [sp, #32]
 80085bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085be:	2180      	movs	r1, #128	; 0x80
 80085c0:	9204      	str	r2, [sp, #16]
 80085c2:	9305      	str	r3, [sp, #20]
 80085c4:	2300      	movs	r3, #0
 80085c6:	002f      	movs	r7, r5
 80085c8:	0589      	lsls	r1, r1, #22
 80085ca:	106d      	asrs	r5, r5, #1
 80085cc:	430d      	orrs	r5, r1
 80085ce:	2180      	movs	r1, #128	; 0x80
 80085d0:	9304      	str	r3, [sp, #16]
 80085d2:	9a04      	ldr	r2, [sp, #16]
 80085d4:	9b05      	ldr	r3, [sp, #20]
 80085d6:	9200      	str	r2, [sp, #0]
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	0309      	lsls	r1, r1, #12
 80085de:	186d      	adds	r5, r5, r1
 80085e0:	04a1      	lsls	r1, r4, #18
 80085e2:	186b      	adds	r3, r5, r1
 80085e4:	9800      	ldr	r0, [sp, #0]
 80085e6:	9901      	ldr	r1, [sp, #4]
 80085e8:	0014      	movs	r4, r2
 80085ea:	001d      	movs	r5, r3
 80085ec:	f7f9 fb66 	bl	8001cbc <__aeabi_dmul>
 80085f0:	0002      	movs	r2, r0
 80085f2:	000b      	movs	r3, r1
 80085f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80085f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085f8:	f7f9 fdcc 	bl	8002194 <__aeabi_dsub>
 80085fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008600:	9010      	str	r0, [sp, #64]	; 0x40
 8008602:	9111      	str	r1, [sp, #68]	; 0x44
 8008604:	0020      	movs	r0, r4
 8008606:	0029      	movs	r1, r5
 8008608:	f7f9 fdc4 	bl	8002194 <__aeabi_dsub>
 800860c:	0002      	movs	r2, r0
 800860e:	000b      	movs	r3, r1
 8008610:	0030      	movs	r0, r6
 8008612:	0039      	movs	r1, r7
 8008614:	f7f9 fdbe 	bl	8002194 <__aeabi_dsub>
 8008618:	9a00      	ldr	r2, [sp, #0]
 800861a:	9b01      	ldr	r3, [sp, #4]
 800861c:	f7f9 fb4e 	bl	8001cbc <__aeabi_dmul>
 8008620:	0002      	movs	r2, r0
 8008622:	000b      	movs	r3, r1
 8008624:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008626:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008628:	f7f9 fdb4 	bl	8002194 <__aeabi_dsub>
 800862c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800862e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008630:	f7f9 fb44 	bl	8001cbc <__aeabi_dmul>
 8008634:	9a08      	ldr	r2, [sp, #32]
 8008636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008638:	900a      	str	r0, [sp, #40]	; 0x28
 800863a:	910b      	str	r1, [sp, #44]	; 0x2c
 800863c:	0010      	movs	r0, r2
 800863e:	0019      	movs	r1, r3
 8008640:	f7f9 fb3c 	bl	8001cbc <__aeabi_dmul>
 8008644:	0006      	movs	r6, r0
 8008646:	000f      	movs	r7, r1
 8008648:	4a7e      	ldr	r2, [pc, #504]	; (8008844 <__ieee754_pow+0x724>)
 800864a:	4b7f      	ldr	r3, [pc, #508]	; (8008848 <__ieee754_pow+0x728>)
 800864c:	f7f9 fb36 	bl	8001cbc <__aeabi_dmul>
 8008650:	4a7e      	ldr	r2, [pc, #504]	; (800884c <__ieee754_pow+0x72c>)
 8008652:	4b7f      	ldr	r3, [pc, #508]	; (8008850 <__ieee754_pow+0x730>)
 8008654:	f7f8 fbf4 	bl	8000e40 <__aeabi_dadd>
 8008658:	0032      	movs	r2, r6
 800865a:	003b      	movs	r3, r7
 800865c:	f7f9 fb2e 	bl	8001cbc <__aeabi_dmul>
 8008660:	4a7c      	ldr	r2, [pc, #496]	; (8008854 <__ieee754_pow+0x734>)
 8008662:	4b7d      	ldr	r3, [pc, #500]	; (8008858 <__ieee754_pow+0x738>)
 8008664:	f7f8 fbec 	bl	8000e40 <__aeabi_dadd>
 8008668:	0032      	movs	r2, r6
 800866a:	003b      	movs	r3, r7
 800866c:	f7f9 fb26 	bl	8001cbc <__aeabi_dmul>
 8008670:	4a7a      	ldr	r2, [pc, #488]	; (800885c <__ieee754_pow+0x73c>)
 8008672:	4b7b      	ldr	r3, [pc, #492]	; (8008860 <__ieee754_pow+0x740>)
 8008674:	f7f8 fbe4 	bl	8000e40 <__aeabi_dadd>
 8008678:	0032      	movs	r2, r6
 800867a:	003b      	movs	r3, r7
 800867c:	f7f9 fb1e 	bl	8001cbc <__aeabi_dmul>
 8008680:	4a78      	ldr	r2, [pc, #480]	; (8008864 <__ieee754_pow+0x744>)
 8008682:	4b79      	ldr	r3, [pc, #484]	; (8008868 <__ieee754_pow+0x748>)
 8008684:	f7f8 fbdc 	bl	8000e40 <__aeabi_dadd>
 8008688:	0032      	movs	r2, r6
 800868a:	003b      	movs	r3, r7
 800868c:	f7f9 fb16 	bl	8001cbc <__aeabi_dmul>
 8008690:	4a76      	ldr	r2, [pc, #472]	; (800886c <__ieee754_pow+0x74c>)
 8008692:	4b77      	ldr	r3, [pc, #476]	; (8008870 <__ieee754_pow+0x750>)
 8008694:	f7f8 fbd4 	bl	8000e40 <__aeabi_dadd>
 8008698:	0032      	movs	r2, r6
 800869a:	0004      	movs	r4, r0
 800869c:	000d      	movs	r5, r1
 800869e:	003b      	movs	r3, r7
 80086a0:	0030      	movs	r0, r6
 80086a2:	0039      	movs	r1, r7
 80086a4:	f7f9 fb0a 	bl	8001cbc <__aeabi_dmul>
 80086a8:	0002      	movs	r2, r0
 80086aa:	000b      	movs	r3, r1
 80086ac:	0020      	movs	r0, r4
 80086ae:	0029      	movs	r1, r5
 80086b0:	f7f9 fb04 	bl	8001cbc <__aeabi_dmul>
 80086b4:	9a00      	ldr	r2, [sp, #0]
 80086b6:	9b01      	ldr	r3, [sp, #4]
 80086b8:	0004      	movs	r4, r0
 80086ba:	000d      	movs	r5, r1
 80086bc:	9808      	ldr	r0, [sp, #32]
 80086be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086c0:	f7f8 fbbe 	bl	8000e40 <__aeabi_dadd>
 80086c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c8:	f7f9 faf8 	bl	8001cbc <__aeabi_dmul>
 80086cc:	0022      	movs	r2, r4
 80086ce:	002b      	movs	r3, r5
 80086d0:	f7f8 fbb6 	bl	8000e40 <__aeabi_dadd>
 80086d4:	9a00      	ldr	r2, [sp, #0]
 80086d6:	9b01      	ldr	r3, [sp, #4]
 80086d8:	9010      	str	r0, [sp, #64]	; 0x40
 80086da:	9111      	str	r1, [sp, #68]	; 0x44
 80086dc:	0010      	movs	r0, r2
 80086de:	0019      	movs	r1, r3
 80086e0:	f7f9 faec 	bl	8001cbc <__aeabi_dmul>
 80086e4:	2200      	movs	r2, #0
 80086e6:	4b63      	ldr	r3, [pc, #396]	; (8008874 <__ieee754_pow+0x754>)
 80086e8:	0004      	movs	r4, r0
 80086ea:	000d      	movs	r5, r1
 80086ec:	f7f8 fba8 	bl	8000e40 <__aeabi_dadd>
 80086f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086f4:	f7f8 fba4 	bl	8000e40 <__aeabi_dadd>
 80086f8:	2600      	movs	r6, #0
 80086fa:	000f      	movs	r7, r1
 80086fc:	0032      	movs	r2, r6
 80086fe:	000b      	movs	r3, r1
 8008700:	9800      	ldr	r0, [sp, #0]
 8008702:	9901      	ldr	r1, [sp, #4]
 8008704:	f7f9 fada 	bl	8001cbc <__aeabi_dmul>
 8008708:	2200      	movs	r2, #0
 800870a:	9000      	str	r0, [sp, #0]
 800870c:	9101      	str	r1, [sp, #4]
 800870e:	4b59      	ldr	r3, [pc, #356]	; (8008874 <__ieee754_pow+0x754>)
 8008710:	0030      	movs	r0, r6
 8008712:	0039      	movs	r1, r7
 8008714:	f7f9 fd3e 	bl	8002194 <__aeabi_dsub>
 8008718:	0022      	movs	r2, r4
 800871a:	002b      	movs	r3, r5
 800871c:	f7f9 fd3a 	bl	8002194 <__aeabi_dsub>
 8008720:	0002      	movs	r2, r0
 8008722:	000b      	movs	r3, r1
 8008724:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008726:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008728:	f7f9 fd34 	bl	8002194 <__aeabi_dsub>
 800872c:	9a08      	ldr	r2, [sp, #32]
 800872e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008730:	f7f9 fac4 	bl	8001cbc <__aeabi_dmul>
 8008734:	0032      	movs	r2, r6
 8008736:	0004      	movs	r4, r0
 8008738:	000d      	movs	r5, r1
 800873a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800873c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800873e:	003b      	movs	r3, r7
 8008740:	f7f9 fabc 	bl	8001cbc <__aeabi_dmul>
 8008744:	0002      	movs	r2, r0
 8008746:	000b      	movs	r3, r1
 8008748:	0020      	movs	r0, r4
 800874a:	0029      	movs	r1, r5
 800874c:	f7f8 fb78 	bl	8000e40 <__aeabi_dadd>
 8008750:	0004      	movs	r4, r0
 8008752:	000d      	movs	r5, r1
 8008754:	0002      	movs	r2, r0
 8008756:	000b      	movs	r3, r1
 8008758:	9800      	ldr	r0, [sp, #0]
 800875a:	9901      	ldr	r1, [sp, #4]
 800875c:	f7f8 fb70 	bl	8000e40 <__aeabi_dadd>
 8008760:	2600      	movs	r6, #0
 8008762:	22e0      	movs	r2, #224	; 0xe0
 8008764:	4b44      	ldr	r3, [pc, #272]	; (8008878 <__ieee754_pow+0x758>)
 8008766:	0612      	lsls	r2, r2, #24
 8008768:	0030      	movs	r0, r6
 800876a:	000f      	movs	r7, r1
 800876c:	f7f9 faa6 	bl	8001cbc <__aeabi_dmul>
 8008770:	9008      	str	r0, [sp, #32]
 8008772:	9109      	str	r1, [sp, #36]	; 0x24
 8008774:	9a00      	ldr	r2, [sp, #0]
 8008776:	9b01      	ldr	r3, [sp, #4]
 8008778:	0039      	movs	r1, r7
 800877a:	0030      	movs	r0, r6
 800877c:	f7f9 fd0a 	bl	8002194 <__aeabi_dsub>
 8008780:	0002      	movs	r2, r0
 8008782:	000b      	movs	r3, r1
 8008784:	0020      	movs	r0, r4
 8008786:	0029      	movs	r1, r5
 8008788:	f7f9 fd04 	bl	8002194 <__aeabi_dsub>
 800878c:	4a3b      	ldr	r2, [pc, #236]	; (800887c <__ieee754_pow+0x75c>)
 800878e:	4b3a      	ldr	r3, [pc, #232]	; (8008878 <__ieee754_pow+0x758>)
 8008790:	f7f9 fa94 	bl	8001cbc <__aeabi_dmul>
 8008794:	4a3a      	ldr	r2, [pc, #232]	; (8008880 <__ieee754_pow+0x760>)
 8008796:	0004      	movs	r4, r0
 8008798:	000d      	movs	r5, r1
 800879a:	4b3a      	ldr	r3, [pc, #232]	; (8008884 <__ieee754_pow+0x764>)
 800879c:	0039      	movs	r1, r7
 800879e:	0030      	movs	r0, r6
 80087a0:	f7f9 fa8c 	bl	8001cbc <__aeabi_dmul>
 80087a4:	0002      	movs	r2, r0
 80087a6:	000b      	movs	r3, r1
 80087a8:	0020      	movs	r0, r4
 80087aa:	0029      	movs	r1, r5
 80087ac:	f7f8 fb48 	bl	8000e40 <__aeabi_dadd>
 80087b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087b2:	4b35      	ldr	r3, [pc, #212]	; (8008888 <__ieee754_pow+0x768>)
 80087b4:	189b      	adds	r3, r3, r2
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f7f8 fb41 	bl	8000e40 <__aeabi_dadd>
 80087be:	900a      	str	r0, [sp, #40]	; 0x28
 80087c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80087c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80087c4:	f7fa f8cc 	bl	8002960 <__aeabi_i2d>
 80087c8:	0004      	movs	r4, r0
 80087ca:	000d      	movs	r5, r1
 80087cc:	9808      	ldr	r0, [sp, #32]
 80087ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087d2:	4b2e      	ldr	r3, [pc, #184]	; (800888c <__ieee754_pow+0x76c>)
 80087d4:	189b      	adds	r3, r3, r2
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	9200      	str	r2, [sp, #0]
 80087dc:	9301      	str	r3, [sp, #4]
 80087de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087e2:	f7f8 fb2d 	bl	8000e40 <__aeabi_dadd>
 80087e6:	9a00      	ldr	r2, [sp, #0]
 80087e8:	9b01      	ldr	r3, [sp, #4]
 80087ea:	f7f8 fb29 	bl	8000e40 <__aeabi_dadd>
 80087ee:	0022      	movs	r2, r4
 80087f0:	002b      	movs	r3, r5
 80087f2:	f7f8 fb25 	bl	8000e40 <__aeabi_dadd>
 80087f6:	0022      	movs	r2, r4
 80087f8:	002b      	movs	r3, r5
 80087fa:	0030      	movs	r0, r6
 80087fc:	000f      	movs	r7, r1
 80087fe:	f7f9 fcc9 	bl	8002194 <__aeabi_dsub>
 8008802:	9a00      	ldr	r2, [sp, #0]
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	f7f9 fcc5 	bl	8002194 <__aeabi_dsub>
 800880a:	9a08      	ldr	r2, [sp, #32]
 800880c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800880e:	f7f9 fcc1 	bl	8002194 <__aeabi_dsub>
 8008812:	0002      	movs	r2, r0
 8008814:	000b      	movs	r3, r1
 8008816:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800881a:	e619      	b.n	8008450 <__ieee754_pow+0x330>
 800881c:	2300      	movs	r3, #0
 800881e:	4c04      	ldr	r4, [pc, #16]	; (8008830 <__ieee754_pow+0x710>)
 8008820:	e622      	b.n	8008468 <__ieee754_pow+0x348>
 8008822:	46c0      	nop			; (mov r8, r8)
 8008824:	7ff00000 	.word	0x7ff00000
 8008828:	43400000 	.word	0x43400000
 800882c:	fffffc01 	.word	0xfffffc01
 8008830:	3ff00000 	.word	0x3ff00000
 8008834:	0003988e 	.word	0x0003988e
 8008838:	000bb679 	.word	0x000bb679
 800883c:	fff00000 	.word	0xfff00000
 8008840:	0800a628 	.word	0x0800a628
 8008844:	4a454eef 	.word	0x4a454eef
 8008848:	3fca7e28 	.word	0x3fca7e28
 800884c:	93c9db65 	.word	0x93c9db65
 8008850:	3fcd864a 	.word	0x3fcd864a
 8008854:	a91d4101 	.word	0xa91d4101
 8008858:	3fd17460 	.word	0x3fd17460
 800885c:	518f264d 	.word	0x518f264d
 8008860:	3fd55555 	.word	0x3fd55555
 8008864:	db6fabff 	.word	0xdb6fabff
 8008868:	3fdb6db6 	.word	0x3fdb6db6
 800886c:	33333303 	.word	0x33333303
 8008870:	3fe33333 	.word	0x3fe33333
 8008874:	40080000 	.word	0x40080000
 8008878:	3feec709 	.word	0x3feec709
 800887c:	dc3a03fd 	.word	0xdc3a03fd
 8008880:	145b01f5 	.word	0x145b01f5
 8008884:	be3e2fe0 	.word	0xbe3e2fe0
 8008888:	0800a648 	.word	0x0800a648
 800888c:	0800a638 	.word	0x0800a638
 8008890:	4a90      	ldr	r2, [pc, #576]	; (8008ad4 <__ieee754_pow+0x9b4>)
 8008892:	4b91      	ldr	r3, [pc, #580]	; (8008ad8 <__ieee754_pow+0x9b8>)
 8008894:	9804      	ldr	r0, [sp, #16]
 8008896:	9905      	ldr	r1, [sp, #20]
 8008898:	f7f8 fad2 	bl	8000e40 <__aeabi_dadd>
 800889c:	0032      	movs	r2, r6
 800889e:	9002      	str	r0, [sp, #8]
 80088a0:	9103      	str	r1, [sp, #12]
 80088a2:	003b      	movs	r3, r7
 80088a4:	0028      	movs	r0, r5
 80088a6:	0021      	movs	r1, r4
 80088a8:	f7f9 fc74 	bl	8002194 <__aeabi_dsub>
 80088ac:	0002      	movs	r2, r0
 80088ae:	000b      	movs	r3, r1
 80088b0:	9802      	ldr	r0, [sp, #8]
 80088b2:	9903      	ldr	r1, [sp, #12]
 80088b4:	f7f7 fdd0 	bl	8000458 <__aeabi_dcmpgt>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d000      	beq.n	80088be <__ieee754_pow+0x79e>
 80088bc:	e60f      	b.n	80084de <__ieee754_pow+0x3be>
 80088be:	2100      	movs	r1, #0
 80088c0:	4a86      	ldr	r2, [pc, #536]	; (8008adc <__ieee754_pow+0x9bc>)
 80088c2:	0063      	lsls	r3, r4, #1
 80088c4:	085b      	lsrs	r3, r3, #1
 80088c6:	9102      	str	r1, [sp, #8]
 80088c8:	4293      	cmp	r3, r2
 80088ca:	dd25      	ble.n	8008918 <__ieee754_pow+0x7f8>
 80088cc:	4a84      	ldr	r2, [pc, #528]	; (8008ae0 <__ieee754_pow+0x9c0>)
 80088ce:	151b      	asrs	r3, r3, #20
 80088d0:	189b      	adds	r3, r3, r2
 80088d2:	2280      	movs	r2, #128	; 0x80
 80088d4:	0352      	lsls	r2, r2, #13
 80088d6:	4694      	mov	ip, r2
 80088d8:	411a      	asrs	r2, r3
 80088da:	1914      	adds	r4, r2, r4
 80088dc:	4b81      	ldr	r3, [pc, #516]	; (8008ae4 <__ieee754_pow+0x9c4>)
 80088de:	0060      	lsls	r0, r4, #1
 80088e0:	4d81      	ldr	r5, [pc, #516]	; (8008ae8 <__ieee754_pow+0x9c8>)
 80088e2:	0d40      	lsrs	r0, r0, #21
 80088e4:	18c0      	adds	r0, r0, r3
 80088e6:	4105      	asrs	r5, r0
 80088e8:	0021      	movs	r1, r4
 80088ea:	43a9      	bics	r1, r5
 80088ec:	000b      	movs	r3, r1
 80088ee:	4661      	mov	r1, ip
 80088f0:	0324      	lsls	r4, r4, #12
 80088f2:	0b24      	lsrs	r4, r4, #12
 80088f4:	4321      	orrs	r1, r4
 80088f6:	2414      	movs	r4, #20
 80088f8:	1a20      	subs	r0, r4, r0
 80088fa:	4101      	asrs	r1, r0
 80088fc:	9102      	str	r1, [sp, #8]
 80088fe:	9908      	ldr	r1, [sp, #32]
 8008900:	2200      	movs	r2, #0
 8008902:	2900      	cmp	r1, #0
 8008904:	da02      	bge.n	800890c <__ieee754_pow+0x7ec>
 8008906:	9902      	ldr	r1, [sp, #8]
 8008908:	4249      	negs	r1, r1
 800890a:	9102      	str	r1, [sp, #8]
 800890c:	0030      	movs	r0, r6
 800890e:	0039      	movs	r1, r7
 8008910:	f7f9 fc40 	bl	8002194 <__aeabi_dsub>
 8008914:	9006      	str	r0, [sp, #24]
 8008916:	9107      	str	r1, [sp, #28]
 8008918:	9a04      	ldr	r2, [sp, #16]
 800891a:	9b05      	ldr	r3, [sp, #20]
 800891c:	9806      	ldr	r0, [sp, #24]
 800891e:	9907      	ldr	r1, [sp, #28]
 8008920:	2600      	movs	r6, #0
 8008922:	f7f8 fa8d 	bl	8000e40 <__aeabi_dadd>
 8008926:	2200      	movs	r2, #0
 8008928:	0030      	movs	r0, r6
 800892a:	4b70      	ldr	r3, [pc, #448]	; (8008aec <__ieee754_pow+0x9cc>)
 800892c:	000f      	movs	r7, r1
 800892e:	f7f9 f9c5 	bl	8001cbc <__aeabi_dmul>
 8008932:	9a06      	ldr	r2, [sp, #24]
 8008934:	9b07      	ldr	r3, [sp, #28]
 8008936:	9008      	str	r0, [sp, #32]
 8008938:	9109      	str	r1, [sp, #36]	; 0x24
 800893a:	0030      	movs	r0, r6
 800893c:	0039      	movs	r1, r7
 800893e:	f7f9 fc29 	bl	8002194 <__aeabi_dsub>
 8008942:	0002      	movs	r2, r0
 8008944:	000b      	movs	r3, r1
 8008946:	9804      	ldr	r0, [sp, #16]
 8008948:	9905      	ldr	r1, [sp, #20]
 800894a:	f7f9 fc23 	bl	8002194 <__aeabi_dsub>
 800894e:	4a68      	ldr	r2, [pc, #416]	; (8008af0 <__ieee754_pow+0x9d0>)
 8008950:	4b68      	ldr	r3, [pc, #416]	; (8008af4 <__ieee754_pow+0x9d4>)
 8008952:	f7f9 f9b3 	bl	8001cbc <__aeabi_dmul>
 8008956:	4a68      	ldr	r2, [pc, #416]	; (8008af8 <__ieee754_pow+0x9d8>)
 8008958:	0004      	movs	r4, r0
 800895a:	000d      	movs	r5, r1
 800895c:	0030      	movs	r0, r6
 800895e:	0039      	movs	r1, r7
 8008960:	4b66      	ldr	r3, [pc, #408]	; (8008afc <__ieee754_pow+0x9dc>)
 8008962:	f7f9 f9ab 	bl	8001cbc <__aeabi_dmul>
 8008966:	0002      	movs	r2, r0
 8008968:	000b      	movs	r3, r1
 800896a:	0020      	movs	r0, r4
 800896c:	0029      	movs	r1, r5
 800896e:	f7f8 fa67 	bl	8000e40 <__aeabi_dadd>
 8008972:	0004      	movs	r4, r0
 8008974:	000d      	movs	r5, r1
 8008976:	0002      	movs	r2, r0
 8008978:	000b      	movs	r3, r1
 800897a:	9808      	ldr	r0, [sp, #32]
 800897c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800897e:	f7f8 fa5f 	bl	8000e40 <__aeabi_dadd>
 8008982:	9a08      	ldr	r2, [sp, #32]
 8008984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008986:	0006      	movs	r6, r0
 8008988:	000f      	movs	r7, r1
 800898a:	f7f9 fc03 	bl	8002194 <__aeabi_dsub>
 800898e:	0002      	movs	r2, r0
 8008990:	000b      	movs	r3, r1
 8008992:	0020      	movs	r0, r4
 8008994:	0029      	movs	r1, r5
 8008996:	f7f9 fbfd 	bl	8002194 <__aeabi_dsub>
 800899a:	0032      	movs	r2, r6
 800899c:	9004      	str	r0, [sp, #16]
 800899e:	9105      	str	r1, [sp, #20]
 80089a0:	003b      	movs	r3, r7
 80089a2:	0030      	movs	r0, r6
 80089a4:	0039      	movs	r1, r7
 80089a6:	f7f9 f989 	bl	8001cbc <__aeabi_dmul>
 80089aa:	0004      	movs	r4, r0
 80089ac:	000d      	movs	r5, r1
 80089ae:	4a54      	ldr	r2, [pc, #336]	; (8008b00 <__ieee754_pow+0x9e0>)
 80089b0:	4b54      	ldr	r3, [pc, #336]	; (8008b04 <__ieee754_pow+0x9e4>)
 80089b2:	f7f9 f983 	bl	8001cbc <__aeabi_dmul>
 80089b6:	4a54      	ldr	r2, [pc, #336]	; (8008b08 <__ieee754_pow+0x9e8>)
 80089b8:	4b54      	ldr	r3, [pc, #336]	; (8008b0c <__ieee754_pow+0x9ec>)
 80089ba:	f7f9 fbeb 	bl	8002194 <__aeabi_dsub>
 80089be:	0022      	movs	r2, r4
 80089c0:	002b      	movs	r3, r5
 80089c2:	f7f9 f97b 	bl	8001cbc <__aeabi_dmul>
 80089c6:	4a52      	ldr	r2, [pc, #328]	; (8008b10 <__ieee754_pow+0x9f0>)
 80089c8:	4b52      	ldr	r3, [pc, #328]	; (8008b14 <__ieee754_pow+0x9f4>)
 80089ca:	f7f8 fa39 	bl	8000e40 <__aeabi_dadd>
 80089ce:	0022      	movs	r2, r4
 80089d0:	002b      	movs	r3, r5
 80089d2:	f7f9 f973 	bl	8001cbc <__aeabi_dmul>
 80089d6:	4a50      	ldr	r2, [pc, #320]	; (8008b18 <__ieee754_pow+0x9f8>)
 80089d8:	4b50      	ldr	r3, [pc, #320]	; (8008b1c <__ieee754_pow+0x9fc>)
 80089da:	f7f9 fbdb 	bl	8002194 <__aeabi_dsub>
 80089de:	0022      	movs	r2, r4
 80089e0:	002b      	movs	r3, r5
 80089e2:	f7f9 f96b 	bl	8001cbc <__aeabi_dmul>
 80089e6:	4a4e      	ldr	r2, [pc, #312]	; (8008b20 <__ieee754_pow+0xa00>)
 80089e8:	4b4e      	ldr	r3, [pc, #312]	; (8008b24 <__ieee754_pow+0xa04>)
 80089ea:	f7f8 fa29 	bl	8000e40 <__aeabi_dadd>
 80089ee:	0022      	movs	r2, r4
 80089f0:	002b      	movs	r3, r5
 80089f2:	f7f9 f963 	bl	8001cbc <__aeabi_dmul>
 80089f6:	0002      	movs	r2, r0
 80089f8:	000b      	movs	r3, r1
 80089fa:	0030      	movs	r0, r6
 80089fc:	0039      	movs	r1, r7
 80089fe:	f7f9 fbc9 	bl	8002194 <__aeabi_dsub>
 8008a02:	0004      	movs	r4, r0
 8008a04:	000d      	movs	r5, r1
 8008a06:	0002      	movs	r2, r0
 8008a08:	000b      	movs	r3, r1
 8008a0a:	0030      	movs	r0, r6
 8008a0c:	0039      	movs	r1, r7
 8008a0e:	f7f9 f955 	bl	8001cbc <__aeabi_dmul>
 8008a12:	2380      	movs	r3, #128	; 0x80
 8008a14:	9006      	str	r0, [sp, #24]
 8008a16:	9107      	str	r1, [sp, #28]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	0020      	movs	r0, r4
 8008a1c:	0029      	movs	r1, r5
 8008a1e:	05db      	lsls	r3, r3, #23
 8008a20:	f7f9 fbb8 	bl	8002194 <__aeabi_dsub>
 8008a24:	0002      	movs	r2, r0
 8008a26:	000b      	movs	r3, r1
 8008a28:	9806      	ldr	r0, [sp, #24]
 8008a2a:	9907      	ldr	r1, [sp, #28]
 8008a2c:	f7f8 fd44 	bl	80014b8 <__aeabi_ddiv>
 8008a30:	9a04      	ldr	r2, [sp, #16]
 8008a32:	9b05      	ldr	r3, [sp, #20]
 8008a34:	0004      	movs	r4, r0
 8008a36:	000d      	movs	r5, r1
 8008a38:	0030      	movs	r0, r6
 8008a3a:	0039      	movs	r1, r7
 8008a3c:	f7f9 f93e 	bl	8001cbc <__aeabi_dmul>
 8008a40:	9a04      	ldr	r2, [sp, #16]
 8008a42:	9b05      	ldr	r3, [sp, #20]
 8008a44:	f7f8 f9fc 	bl	8000e40 <__aeabi_dadd>
 8008a48:	0002      	movs	r2, r0
 8008a4a:	000b      	movs	r3, r1
 8008a4c:	0020      	movs	r0, r4
 8008a4e:	0029      	movs	r1, r5
 8008a50:	f7f9 fba0 	bl	8002194 <__aeabi_dsub>
 8008a54:	0032      	movs	r2, r6
 8008a56:	003b      	movs	r3, r7
 8008a58:	f7f9 fb9c 	bl	8002194 <__aeabi_dsub>
 8008a5c:	0002      	movs	r2, r0
 8008a5e:	000b      	movs	r3, r1
 8008a60:	2000      	movs	r0, #0
 8008a62:	4931      	ldr	r1, [pc, #196]	; (8008b28 <__ieee754_pow+0xa08>)
 8008a64:	f7f9 fb96 	bl	8002194 <__aeabi_dsub>
 8008a68:	9b02      	ldr	r3, [sp, #8]
 8008a6a:	051b      	lsls	r3, r3, #20
 8008a6c:	185b      	adds	r3, r3, r1
 8008a6e:	151a      	asrs	r2, r3, #20
 8008a70:	2a00      	cmp	r2, #0
 8008a72:	dc25      	bgt.n	8008ac0 <__ieee754_pow+0x9a0>
 8008a74:	9a02      	ldr	r2, [sp, #8]
 8008a76:	f000 f94f 	bl	8008d18 <scalbn>
 8008a7a:	9a00      	ldr	r2, [sp, #0]
 8008a7c:	9b01      	ldr	r3, [sp, #4]
 8008a7e:	f7ff fc33 	bl	80082e8 <__ieee754_pow+0x1c8>
 8008a82:	4a2a      	ldr	r2, [pc, #168]	; (8008b2c <__ieee754_pow+0xa0c>)
 8008a84:	004b      	lsls	r3, r1, #1
 8008a86:	085b      	lsrs	r3, r3, #1
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	dc00      	bgt.n	8008a8e <__ieee754_pow+0x96e>
 8008a8c:	e717      	b.n	80088be <__ieee754_pow+0x79e>
 8008a8e:	4b28      	ldr	r3, [pc, #160]	; (8008b30 <__ieee754_pow+0xa10>)
 8008a90:	18cb      	adds	r3, r1, r3
 8008a92:	4303      	orrs	r3, r0
 8008a94:	d008      	beq.n	8008aa8 <__ieee754_pow+0x988>
 8008a96:	9800      	ldr	r0, [sp, #0]
 8008a98:	9901      	ldr	r1, [sp, #4]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f7f7 fcc7 	bl	8000430 <__aeabi_dcmplt>
 8008aa2:	1e43      	subs	r3, r0, #1
 8008aa4:	4198      	sbcs	r0, r3
 8008aa6:	e462      	b.n	800836e <__ieee754_pow+0x24e>
 8008aa8:	0032      	movs	r2, r6
 8008aaa:	003b      	movs	r3, r7
 8008aac:	f7f9 fb72 	bl	8002194 <__aeabi_dsub>
 8008ab0:	9a04      	ldr	r2, [sp, #16]
 8008ab2:	9b05      	ldr	r3, [sp, #20]
 8008ab4:	f7f7 fcda 	bl	800046c <__aeabi_dcmpge>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d100      	bne.n	8008abe <__ieee754_pow+0x99e>
 8008abc:	e6ff      	b.n	80088be <__ieee754_pow+0x79e>
 8008abe:	e7ea      	b.n	8008a96 <__ieee754_pow+0x976>
 8008ac0:	0019      	movs	r1, r3
 8008ac2:	e7da      	b.n	8008a7a <__ieee754_pow+0x95a>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4c18      	ldr	r4, [pc, #96]	; (8008b28 <__ieee754_pow+0xa08>)
 8008ac8:	f7ff fbf1 	bl	80082ae <__ieee754_pow+0x18e>
 8008acc:	2300      	movs	r3, #0
 8008ace:	2400      	movs	r4, #0
 8008ad0:	f7ff fbed 	bl	80082ae <__ieee754_pow+0x18e>
 8008ad4:	652b82fe 	.word	0x652b82fe
 8008ad8:	3c971547 	.word	0x3c971547
 8008adc:	3fe00000 	.word	0x3fe00000
 8008ae0:	fffffc02 	.word	0xfffffc02
 8008ae4:	fffffc01 	.word	0xfffffc01
 8008ae8:	000fffff 	.word	0x000fffff
 8008aec:	3fe62e43 	.word	0x3fe62e43
 8008af0:	fefa39ef 	.word	0xfefa39ef
 8008af4:	3fe62e42 	.word	0x3fe62e42
 8008af8:	0ca86c39 	.word	0x0ca86c39
 8008afc:	be205c61 	.word	0xbe205c61
 8008b00:	72bea4d0 	.word	0x72bea4d0
 8008b04:	3e663769 	.word	0x3e663769
 8008b08:	c5d26bf1 	.word	0xc5d26bf1
 8008b0c:	3ebbbd41 	.word	0x3ebbbd41
 8008b10:	af25de2c 	.word	0xaf25de2c
 8008b14:	3f11566a 	.word	0x3f11566a
 8008b18:	16bebd93 	.word	0x16bebd93
 8008b1c:	3f66c16c 	.word	0x3f66c16c
 8008b20:	5555553e 	.word	0x5555553e
 8008b24:	3fc55555 	.word	0x3fc55555
 8008b28:	3ff00000 	.word	0x3ff00000
 8008b2c:	4090cbff 	.word	0x4090cbff
 8008b30:	3f6f3400 	.word	0x3f6f3400

08008b34 <__ieee754_sqrt>:
 8008b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b36:	000b      	movs	r3, r1
 8008b38:	000c      	movs	r4, r1
 8008b3a:	4956      	ldr	r1, [pc, #344]	; (8008c94 <__ieee754_sqrt+0x160>)
 8008b3c:	0005      	movs	r5, r0
 8008b3e:	0002      	movs	r2, r0
 8008b40:	0008      	movs	r0, r1
 8008b42:	b085      	sub	sp, #20
 8008b44:	4020      	ands	r0, r4
 8008b46:	4288      	cmp	r0, r1
 8008b48:	d10f      	bne.n	8008b6a <__ieee754_sqrt+0x36>
 8008b4a:	0028      	movs	r0, r5
 8008b4c:	0021      	movs	r1, r4
 8008b4e:	f7f9 f8b5 	bl	8001cbc <__aeabi_dmul>
 8008b52:	0002      	movs	r2, r0
 8008b54:	000b      	movs	r3, r1
 8008b56:	0028      	movs	r0, r5
 8008b58:	0021      	movs	r1, r4
 8008b5a:	f7f8 f971 	bl	8000e40 <__aeabi_dadd>
 8008b5e:	0005      	movs	r5, r0
 8008b60:	000c      	movs	r4, r1
 8008b62:	0028      	movs	r0, r5
 8008b64:	0021      	movs	r1, r4
 8008b66:	b005      	add	sp, #20
 8008b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b6a:	2c00      	cmp	r4, #0
 8008b6c:	dc10      	bgt.n	8008b90 <__ieee754_sqrt+0x5c>
 8008b6e:	0061      	lsls	r1, r4, #1
 8008b70:	0849      	lsrs	r1, r1, #1
 8008b72:	4329      	orrs	r1, r5
 8008b74:	d0f5      	beq.n	8008b62 <__ieee754_sqrt+0x2e>
 8008b76:	2100      	movs	r1, #0
 8008b78:	428c      	cmp	r4, r1
 8008b7a:	d100      	bne.n	8008b7e <__ieee754_sqrt+0x4a>
 8008b7c:	e080      	b.n	8008c80 <__ieee754_sqrt+0x14c>
 8008b7e:	0028      	movs	r0, r5
 8008b80:	0021      	movs	r1, r4
 8008b82:	f7f9 fb07 	bl	8002194 <__aeabi_dsub>
 8008b86:	0002      	movs	r2, r0
 8008b88:	000b      	movs	r3, r1
 8008b8a:	f7f8 fc95 	bl	80014b8 <__aeabi_ddiv>
 8008b8e:	e7e6      	b.n	8008b5e <__ieee754_sqrt+0x2a>
 8008b90:	1521      	asrs	r1, r4, #20
 8008b92:	d075      	beq.n	8008c80 <__ieee754_sqrt+0x14c>
 8008b94:	4840      	ldr	r0, [pc, #256]	; (8008c98 <__ieee754_sqrt+0x164>)
 8008b96:	031b      	lsls	r3, r3, #12
 8008b98:	180c      	adds	r4, r1, r0
 8008b9a:	2080      	movs	r0, #128	; 0x80
 8008b9c:	0b1b      	lsrs	r3, r3, #12
 8008b9e:	0340      	lsls	r0, r0, #13
 8008ba0:	4303      	orrs	r3, r0
 8008ba2:	07c9      	lsls	r1, r1, #31
 8008ba4:	d403      	bmi.n	8008bae <__ieee754_sqrt+0x7a>
 8008ba6:	0fd1      	lsrs	r1, r2, #31
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	185b      	adds	r3, r3, r1
 8008bac:	0052      	lsls	r2, r2, #1
 8008bae:	1061      	asrs	r1, r4, #1
 8008bb0:	2400      	movs	r4, #0
 8008bb2:	9103      	str	r1, [sp, #12]
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	0fd1      	lsrs	r1, r2, #31
 8008bb8:	185b      	adds	r3, r3, r1
 8008bba:	2180      	movs	r1, #128	; 0x80
 8008bbc:	2516      	movs	r5, #22
 8008bbe:	0020      	movs	r0, r4
 8008bc0:	0052      	lsls	r2, r2, #1
 8008bc2:	0389      	lsls	r1, r1, #14
 8008bc4:	1846      	adds	r6, r0, r1
 8008bc6:	429e      	cmp	r6, r3
 8008bc8:	dc02      	bgt.n	8008bd0 <__ieee754_sqrt+0x9c>
 8008bca:	1870      	adds	r0, r6, r1
 8008bcc:	1b9b      	subs	r3, r3, r6
 8008bce:	1864      	adds	r4, r4, r1
 8008bd0:	0fd6      	lsrs	r6, r2, #31
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	3d01      	subs	r5, #1
 8008bd6:	18f3      	adds	r3, r6, r3
 8008bd8:	0052      	lsls	r2, r2, #1
 8008bda:	0849      	lsrs	r1, r1, #1
 8008bdc:	2d00      	cmp	r5, #0
 8008bde:	d1f1      	bne.n	8008bc4 <__ieee754_sqrt+0x90>
 8008be0:	2620      	movs	r6, #32
 8008be2:	2780      	movs	r7, #128	; 0x80
 8008be4:	0029      	movs	r1, r5
 8008be6:	9601      	str	r6, [sp, #4]
 8008be8:	063f      	lsls	r7, r7, #24
 8008bea:	197e      	adds	r6, r7, r5
 8008bec:	46b4      	mov	ip, r6
 8008bee:	4283      	cmp	r3, r0
 8008bf0:	dc02      	bgt.n	8008bf8 <__ieee754_sqrt+0xc4>
 8008bf2:	d114      	bne.n	8008c1e <__ieee754_sqrt+0xea>
 8008bf4:	4296      	cmp	r6, r2
 8008bf6:	d812      	bhi.n	8008c1e <__ieee754_sqrt+0xea>
 8008bf8:	4665      	mov	r5, ip
 8008bfa:	4666      	mov	r6, ip
 8008bfc:	19ed      	adds	r5, r5, r7
 8008bfe:	9002      	str	r0, [sp, #8]
 8008c00:	2e00      	cmp	r6, #0
 8008c02:	da03      	bge.n	8008c0c <__ieee754_sqrt+0xd8>
 8008c04:	43ee      	mvns	r6, r5
 8008c06:	0ff6      	lsrs	r6, r6, #31
 8008c08:	1986      	adds	r6, r0, r6
 8008c0a:	9602      	str	r6, [sp, #8]
 8008c0c:	1a1b      	subs	r3, r3, r0
 8008c0e:	4562      	cmp	r2, ip
 8008c10:	4180      	sbcs	r0, r0
 8008c12:	4240      	negs	r0, r0
 8008c14:	1a1b      	subs	r3, r3, r0
 8008c16:	4660      	mov	r0, ip
 8008c18:	1a12      	subs	r2, r2, r0
 8008c1a:	9802      	ldr	r0, [sp, #8]
 8008c1c:	19c9      	adds	r1, r1, r7
 8008c1e:	0fd6      	lsrs	r6, r2, #31
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	199b      	adds	r3, r3, r6
 8008c24:	9e01      	ldr	r6, [sp, #4]
 8008c26:	0052      	lsls	r2, r2, #1
 8008c28:	3e01      	subs	r6, #1
 8008c2a:	087f      	lsrs	r7, r7, #1
 8008c2c:	9601      	str	r6, [sp, #4]
 8008c2e:	2e00      	cmp	r6, #0
 8008c30:	d1db      	bne.n	8008bea <__ieee754_sqrt+0xb6>
 8008c32:	4313      	orrs	r3, r2
 8008c34:	d003      	beq.n	8008c3e <__ieee754_sqrt+0x10a>
 8008c36:	1c4b      	adds	r3, r1, #1
 8008c38:	d127      	bne.n	8008c8a <__ieee754_sqrt+0x156>
 8008c3a:	0031      	movs	r1, r6
 8008c3c:	3401      	adds	r4, #1
 8008c3e:	4b17      	ldr	r3, [pc, #92]	; (8008c9c <__ieee754_sqrt+0x168>)
 8008c40:	1060      	asrs	r0, r4, #1
 8008c42:	18c0      	adds	r0, r0, r3
 8008c44:	0849      	lsrs	r1, r1, #1
 8008c46:	07e3      	lsls	r3, r4, #31
 8008c48:	d502      	bpl.n	8008c50 <__ieee754_sqrt+0x11c>
 8008c4a:	2380      	movs	r3, #128	; 0x80
 8008c4c:	061b      	lsls	r3, r3, #24
 8008c4e:	4319      	orrs	r1, r3
 8008c50:	9b03      	ldr	r3, [sp, #12]
 8008c52:	000d      	movs	r5, r1
 8008c54:	051c      	lsls	r4, r3, #20
 8008c56:	1823      	adds	r3, r4, r0
 8008c58:	001c      	movs	r4, r3
 8008c5a:	e782      	b.n	8008b62 <__ieee754_sqrt+0x2e>
 8008c5c:	0ad3      	lsrs	r3, r2, #11
 8008c5e:	3815      	subs	r0, #21
 8008c60:	0552      	lsls	r2, r2, #21
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0fa      	beq.n	8008c5c <__ieee754_sqrt+0x128>
 8008c66:	2480      	movs	r4, #128	; 0x80
 8008c68:	0364      	lsls	r4, r4, #13
 8008c6a:	4223      	tst	r3, r4
 8008c6c:	d00a      	beq.n	8008c84 <__ieee754_sqrt+0x150>
 8008c6e:	2420      	movs	r4, #32
 8008c70:	0016      	movs	r6, r2
 8008c72:	1a64      	subs	r4, r4, r1
 8008c74:	40e6      	lsrs	r6, r4
 8008c76:	1e4d      	subs	r5, r1, #1
 8008c78:	408a      	lsls	r2, r1
 8008c7a:	4333      	orrs	r3, r6
 8008c7c:	1b41      	subs	r1, r0, r5
 8008c7e:	e789      	b.n	8008b94 <__ieee754_sqrt+0x60>
 8008c80:	2000      	movs	r0, #0
 8008c82:	e7ee      	b.n	8008c62 <__ieee754_sqrt+0x12e>
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	3101      	adds	r1, #1
 8008c88:	e7ef      	b.n	8008c6a <__ieee754_sqrt+0x136>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	3101      	adds	r1, #1
 8008c8e:	4399      	bics	r1, r3
 8008c90:	e7d5      	b.n	8008c3e <__ieee754_sqrt+0x10a>
 8008c92:	46c0      	nop			; (mov r8, r8)
 8008c94:	7ff00000 	.word	0x7ff00000
 8008c98:	fffffc01 	.word	0xfffffc01
 8008c9c:	3fe00000 	.word	0x3fe00000

08008ca0 <with_errno>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	000d      	movs	r5, r1
 8008ca4:	0016      	movs	r6, r2
 8008ca6:	0004      	movs	r4, r0
 8008ca8:	f7ff f99a 	bl	8007fe0 <__errno>
 8008cac:	0029      	movs	r1, r5
 8008cae:	6006      	str	r6, [r0, #0]
 8008cb0:	0020      	movs	r0, r4
 8008cb2:	bd70      	pop	{r4, r5, r6, pc}

08008cb4 <xflow>:
 8008cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cb6:	0015      	movs	r5, r2
 8008cb8:	001c      	movs	r4, r3
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d010      	beq.n	8008ce0 <xflow+0x2c>
 8008cbe:	2380      	movs	r3, #128	; 0x80
 8008cc0:	0010      	movs	r0, r2
 8008cc2:	061b      	lsls	r3, r3, #24
 8008cc4:	18e1      	adds	r1, r4, r3
 8008cc6:	9000      	str	r0, [sp, #0]
 8008cc8:	9101      	str	r1, [sp, #4]
 8008cca:	9a00      	ldr	r2, [sp, #0]
 8008ccc:	9b01      	ldr	r3, [sp, #4]
 8008cce:	0028      	movs	r0, r5
 8008cd0:	0021      	movs	r1, r4
 8008cd2:	f7f8 fff3 	bl	8001cbc <__aeabi_dmul>
 8008cd6:	2222      	movs	r2, #34	; 0x22
 8008cd8:	f7ff ffe2 	bl	8008ca0 <with_errno>
 8008cdc:	b003      	add	sp, #12
 8008cde:	bd30      	pop	{r4, r5, pc}
 8008ce0:	0010      	movs	r0, r2
 8008ce2:	0019      	movs	r1, r3
 8008ce4:	e7ef      	b.n	8008cc6 <xflow+0x12>

08008ce6 <__math_uflow>:
 8008ce6:	2380      	movs	r3, #128	; 0x80
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	2200      	movs	r2, #0
 8008cec:	055b      	lsls	r3, r3, #21
 8008cee:	f7ff ffe1 	bl	8008cb4 <xflow>
 8008cf2:	bd10      	pop	{r4, pc}

08008cf4 <__math_oflow>:
 8008cf4:	23e0      	movs	r3, #224	; 0xe0
 8008cf6:	b510      	push	{r4, lr}
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	05db      	lsls	r3, r3, #23
 8008cfc:	f7ff ffda 	bl	8008cb4 <xflow>
 8008d00:	bd10      	pop	{r4, pc}

08008d02 <fabs>:
 8008d02:	004b      	lsls	r3, r1, #1
 8008d04:	0859      	lsrs	r1, r3, #1
 8008d06:	4770      	bx	lr

08008d08 <finite>:
 8008d08:	4b02      	ldr	r3, [pc, #8]	; (8008d14 <finite+0xc>)
 8008d0a:	0048      	lsls	r0, r1, #1
 8008d0c:	0840      	lsrs	r0, r0, #1
 8008d0e:	18c0      	adds	r0, r0, r3
 8008d10:	0fc0      	lsrs	r0, r0, #31
 8008d12:	4770      	bx	lr
 8008d14:	80100000 	.word	0x80100000

08008d18 <scalbn>:
 8008d18:	004b      	lsls	r3, r1, #1
 8008d1a:	b570      	push	{r4, r5, r6, lr}
 8008d1c:	0d5b      	lsrs	r3, r3, #21
 8008d1e:	0014      	movs	r4, r2
 8008d20:	000a      	movs	r2, r1
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10d      	bne.n	8008d42 <scalbn+0x2a>
 8008d26:	004b      	lsls	r3, r1, #1
 8008d28:	085b      	lsrs	r3, r3, #1
 8008d2a:	4303      	orrs	r3, r0
 8008d2c:	d010      	beq.n	8008d50 <scalbn+0x38>
 8008d2e:	4b27      	ldr	r3, [pc, #156]	; (8008dcc <scalbn+0xb4>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	f7f8 ffc3 	bl	8001cbc <__aeabi_dmul>
 8008d36:	4b26      	ldr	r3, [pc, #152]	; (8008dd0 <scalbn+0xb8>)
 8008d38:	429c      	cmp	r4, r3
 8008d3a:	da0a      	bge.n	8008d52 <scalbn+0x3a>
 8008d3c:	4a25      	ldr	r2, [pc, #148]	; (8008dd4 <scalbn+0xbc>)
 8008d3e:	4b26      	ldr	r3, [pc, #152]	; (8008dd8 <scalbn+0xc0>)
 8008d40:	e019      	b.n	8008d76 <scalbn+0x5e>
 8008d42:	4d26      	ldr	r5, [pc, #152]	; (8008ddc <scalbn+0xc4>)
 8008d44:	42ab      	cmp	r3, r5
 8008d46:	d108      	bne.n	8008d5a <scalbn+0x42>
 8008d48:	0002      	movs	r2, r0
 8008d4a:	000b      	movs	r3, r1
 8008d4c:	f7f8 f878 	bl	8000e40 <__aeabi_dadd>
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
 8008d52:	000a      	movs	r2, r1
 8008d54:	004b      	lsls	r3, r1, #1
 8008d56:	0d5b      	lsrs	r3, r3, #21
 8008d58:	3b36      	subs	r3, #54	; 0x36
 8008d5a:	4d21      	ldr	r5, [pc, #132]	; (8008de0 <scalbn+0xc8>)
 8008d5c:	18e3      	adds	r3, r4, r3
 8008d5e:	42ab      	cmp	r3, r5
 8008d60:	dd0c      	ble.n	8008d7c <scalbn+0x64>
 8008d62:	4c20      	ldr	r4, [pc, #128]	; (8008de4 <scalbn+0xcc>)
 8008d64:	4d20      	ldr	r5, [pc, #128]	; (8008de8 <scalbn+0xd0>)
 8008d66:	2900      	cmp	r1, #0
 8008d68:	da01      	bge.n	8008d6e <scalbn+0x56>
 8008d6a:	4c1e      	ldr	r4, [pc, #120]	; (8008de4 <scalbn+0xcc>)
 8008d6c:	4d1f      	ldr	r5, [pc, #124]	; (8008dec <scalbn+0xd4>)
 8008d6e:	0020      	movs	r0, r4
 8008d70:	0029      	movs	r1, r5
 8008d72:	4a1c      	ldr	r2, [pc, #112]	; (8008de4 <scalbn+0xcc>)
 8008d74:	4b1c      	ldr	r3, [pc, #112]	; (8008de8 <scalbn+0xd0>)
 8008d76:	f7f8 ffa1 	bl	8001cbc <__aeabi_dmul>
 8008d7a:	e7e9      	b.n	8008d50 <scalbn+0x38>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dd05      	ble.n	8008d8c <scalbn+0x74>
 8008d80:	4c1b      	ldr	r4, [pc, #108]	; (8008df0 <scalbn+0xd8>)
 8008d82:	051b      	lsls	r3, r3, #20
 8008d84:	4022      	ands	r2, r4
 8008d86:	431a      	orrs	r2, r3
 8008d88:	0011      	movs	r1, r2
 8008d8a:	e7e1      	b.n	8008d50 <scalbn+0x38>
 8008d8c:	001d      	movs	r5, r3
 8008d8e:	3535      	adds	r5, #53	; 0x35
 8008d90:	da13      	bge.n	8008dba <scalbn+0xa2>
 8008d92:	4a18      	ldr	r2, [pc, #96]	; (8008df4 <scalbn+0xdc>)
 8008d94:	0fcb      	lsrs	r3, r1, #31
 8008d96:	4294      	cmp	r4, r2
 8008d98:	dd08      	ble.n	8008dac <scalbn+0x94>
 8008d9a:	4812      	ldr	r0, [pc, #72]	; (8008de4 <scalbn+0xcc>)
 8008d9c:	4912      	ldr	r1, [pc, #72]	; (8008de8 <scalbn+0xd0>)
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <scalbn+0x8e>
 8008da2:	4810      	ldr	r0, [pc, #64]	; (8008de4 <scalbn+0xcc>)
 8008da4:	4911      	ldr	r1, [pc, #68]	; (8008dec <scalbn+0xd4>)
 8008da6:	4a0f      	ldr	r2, [pc, #60]	; (8008de4 <scalbn+0xcc>)
 8008da8:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <scalbn+0xd0>)
 8008daa:	e7e4      	b.n	8008d76 <scalbn+0x5e>
 8008dac:	4809      	ldr	r0, [pc, #36]	; (8008dd4 <scalbn+0xbc>)
 8008dae:	490a      	ldr	r1, [pc, #40]	; (8008dd8 <scalbn+0xc0>)
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0c3      	beq.n	8008d3c <scalbn+0x24>
 8008db4:	4807      	ldr	r0, [pc, #28]	; (8008dd4 <scalbn+0xbc>)
 8008db6:	4910      	ldr	r1, [pc, #64]	; (8008df8 <scalbn+0xe0>)
 8008db8:	e7c0      	b.n	8008d3c <scalbn+0x24>
 8008dba:	4c0d      	ldr	r4, [pc, #52]	; (8008df0 <scalbn+0xd8>)
 8008dbc:	3336      	adds	r3, #54	; 0x36
 8008dbe:	4022      	ands	r2, r4
 8008dc0:	051b      	lsls	r3, r3, #20
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	0019      	movs	r1, r3
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	4b0c      	ldr	r3, [pc, #48]	; (8008dfc <scalbn+0xe4>)
 8008dca:	e7d4      	b.n	8008d76 <scalbn+0x5e>
 8008dcc:	43500000 	.word	0x43500000
 8008dd0:	ffff3cb0 	.word	0xffff3cb0
 8008dd4:	c2f8f359 	.word	0xc2f8f359
 8008dd8:	01a56e1f 	.word	0x01a56e1f
 8008ddc:	000007ff 	.word	0x000007ff
 8008de0:	000007fe 	.word	0x000007fe
 8008de4:	8800759c 	.word	0x8800759c
 8008de8:	7e37e43c 	.word	0x7e37e43c
 8008dec:	fe37e43c 	.word	0xfe37e43c
 8008df0:	800fffff 	.word	0x800fffff
 8008df4:	0000c350 	.word	0x0000c350
 8008df8:	81a56e1f 	.word	0x81a56e1f
 8008dfc:	3c900000 	.word	0x3c900000

08008e00 <_init>:
 8008e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e02:	46c0      	nop			; (mov r8, r8)
 8008e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e06:	bc08      	pop	{r3}
 8008e08:	469e      	mov	lr, r3
 8008e0a:	4770      	bx	lr

08008e0c <_fini>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	46c0      	nop			; (mov r8, r8)
 8008e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e12:	bc08      	pop	{r3}
 8008e14:	469e      	mov	lr, r3
 8008e16:	4770      	bx	lr
